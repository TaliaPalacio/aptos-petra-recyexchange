{
    "sourceFile": "src/pages/ensayo/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1728774752554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728774794060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         signMessageAndVerify} = useWallet();\n \n     const getRecycling = async () =>{\n         const payload = {\n-            function: `${ADDRESS}::recicly::get_all_recyclings`,\n+            function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         }\n         let result = await aptos.view({payload});\n         console.log(result);\n"
                },
                {
                    "date": 1728774814353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     }\n   \n   return (\n     <div>\n+        <Header />\n         <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n     </div>\n   )\n }\n"
                },
                {
                    "date": 1728775129190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n     }\n   \n   return (\n     <div>\n-        <Header />\n         <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n     </div>\n   )\n }\n"
                },
                {
                    "date": 1728775308812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         }\n         let result = await aptos.view({payload});\n-        console.log(result);\n+        console.log(result[0]);\n     }\n   \n   return (\n     <div>\n"
                },
                {
                    "date": 1728775394472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         }\n         let result = await aptos.view({payload});\n-        console.log(result[0]);\n+        console.log(result[0]?.toString());\n     }\n   \n   return (\n     <div>\n"
                },
                {
                    "date": 1728775500554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         }\n         let result = await aptos.view({payload});\n-        console.log(result[0]?.toString());\n+        console.log(result[0]);\n     }\n   \n   return (\n     <div>\n"
                },
                {
                    "date": 1728776424735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n import React from 'react'\n import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n-import { useEffect, useState } from 'react';\n import { useWallet } from '@aptos-labs/wallet-adapter-react';\n-import axios from 'axios';\n-import Header from '@/components/header';\n \n+\n export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n \n const index = () => {\n"
                },
                {
                    "date": 1728780274951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,89 @@\n-import React from 'react'\n-import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n+import React, { useState } from 'react';\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from '@aptos-labs/wallet-adapter-react';\n \n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n-export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n+const Index = () => {\n+    const { account } = useWallet();\n+    interface Recycling {\n+        owner: string;\n+        type: string;\n+        ubication: string;\n+        weight: string;\n+        pricePound: string;\n+        observations: string;\n+        available: boolean;\n+    }\n \n-const index = () => {\n-    const {connect, account, connected, disconnect, signAndSubmitTransaction,\n-    signTransaction, signMessage, \n-        signMessageAndVerify} = useWallet();\n+    const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n-    const getRecycling = async () =>{\n\\ No newline at end of file\n+    const getRecycling = async () => {\n         const payload = {\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n+        };\n+        try {\n+            const result = await aptos.view({ payload });\n+\n+            // Extraer datos del array de arrays\n+            const extractedRecyclings = result.map(recyclingArray => {\n+                if (!Array.isArray(recyclingArray) || recyclingArray.length === 0) {\n+                    throw new Error(\"Invalid recycling data\");\n+                }\n+                const recycling = recyclingArray[0] as [string, string, string, number, number, string, boolean]; // acceder al primer elemento del array\n+                return {\n+                    owner: recycling[0],               // address\n+                    type: recycling[1],                // String\n+                    ubication: recycling[2],            // String\n+                    weight: recycling[3].toString(),    // u64, convertir a string si es necesario\n+                    pricePound: recycling[4].toString(), // u64, convertir a string si es necesario\n+                    observations: recycling[5],         // String\n+                    available: recycling[6]             // bool\n+                };\n+            });\n+\n+            setRecyclings(extractedRecyclings);\n+            console.log(extractedRecyclings);\n+        } catch (error) {\n+            console.error(\"Error al obtener reciclajes:\", error);\n         }\n-        let result = await aptos.view({payload});\n-        console.log(result[0]);\n-    }\n-  \n-  return (\n-    <div>\n-        <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n-    </div>\n-  )\n-}\n+    };\n \n-export default index\n+    return (\n+        <div>\n+            <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n+            {recyclings.length > 0 && (\n+                <table>\n+                    <thead>\n+                        <tr>\n+                            <th>Owner</th>\n+                            <th>Type</th>\n+                            <th>Ubicación</th>\n+                            <th>Peso</th>\n+                            <th>Precio por libra</th>\n+                            <th>Observaciones</th>\n+                            <th>Disponible</th>\n+                        </tr>\n+                    </thead>\n+                    <tbody>\n+                        {recyclings.map((recycling, index) => (\n+                            <tr key={index}>\n+                                <td>{recycling.owner}</td>\n+                                <td>{recycling.type}</td>\n+                                <td>{recycling.ubication}</td>\n+                                <td>{recycling.weight}</td>\n+                                <td>{recycling.pricePound}</td>\n+                                <td>{recycling.observations}</td>\n+                                <td>{recycling.available ? 'Sí' : 'No'}</td>\n+                            </tr>\n+                        ))}\n+                    </tbody>\n+                </table>\n+            )}\n+        </div>\n+    );\n+};\n+\n+export default Index;\n"
                },
                {
                    "date": 1728780453897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,28 +25,29 @@\n             functionArguments: [`${account?.address}`]\n         };\n         try {\n             const result = await aptos.view({ payload });\n+            console.log(result); // Verifica el resultado\n \n             // Extraer datos del array de arrays\n             const extractedRecyclings = result.map(recyclingArray => {\n-                if (!Array.isArray(recyclingArray) || recyclingArray.length === 0) {\n-                    throw new Error(\"Invalid recycling data\");\n+                if (Array.isArray(recyclingArray) && recyclingArray.length > 0) {\n+                    const recycling: any[] = recyclingArray[0]; // acceder al primer elemento del array\n+                    return {\n+                        owner: recycling[0],               // address\n+                        type: recycling[1],                // String\n+                        ubication: recycling[2],            // String\n+                        weight: recycling[3].toString(),    // u64, convertir a string si es necesario\n+                        pricePound: recycling[4].toString(), // u64, convertir a string si es necesario\n+                        observations: recycling[5],         // String\n+                        available: recycling[6]             // bool\n+                    };\n                 }\n-                const recycling = recyclingArray[0] as [string, string, string, number, number, string, boolean]; // acceder al primer elemento del array\n-                return {\n-                    owner: recycling[0],               // address\n-                    type: recycling[1],                // String\n-                    ubication: recycling[2],            // String\n-                    weight: recycling[3].toString(),    // u64, convertir a string si es necesario\n-                    pricePound: recycling[4].toString(), // u64, convertir a string si es necesario\n-                    observations: recycling[5],         // String\n-                    available: recycling[6]             // bool\n-                };\n-            });\n+                return null;\n+            }).filter(recycling => recycling !== null);\n \n             setRecyclings(extractedRecyclings);\n-            console.log(extractedRecyclings);\n+            console.log(extractedRecyclings); // Verifica los reciclajes extraídos\n         } catch (error) {\n             console.error(\"Error al obtener reciclajes:\", error);\n         }\n     };\n@@ -54,30 +55,30 @@\n     return (\n         <div>\n             <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n             {recyclings.length > 0 && (\n-                <table>\n+                <table style={{ marginTop: '20px', borderCollapse: 'collapse', width: '100%' }}>\n                     <thead>\n                         <tr>\n-                            <th>Owner</th>\n-                            <th>Type</th>\n-                            <th>Ubicación</th>\n-                            <th>Peso</th>\n-                            <th>Precio por libra</th>\n-                            <th>Observaciones</th>\n-                            <th>Disponible</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Owner</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Type</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Ubicación</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Peso</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Precio por libra</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Observaciones</th>\n+                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Disponible</th>\n                         </tr>\n                     </thead>\n                     <tbody>\n                         {recyclings.map((recycling, index) => (\n                             <tr key={index}>\n-                                <td>{recycling.owner}</td>\n-                                <td>{recycling.type}</td>\n-                                <td>{recycling.ubication}</td>\n-                                <td>{recycling.weight}</td>\n-                                <td>{recycling.pricePound}</td>\n-                                <td>{recycling.observations}</td>\n-                                <td>{recycling.available ? 'Sí' : 'No'}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.owner}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.type}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.ubication}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.weight}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.pricePound}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.observations}</td>\n+                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.available ? 'Sí' : 'No'}</td>\n                             </tr>\n                         ))}\n                     </tbody>\n                 </table>\n"
                },
                {
                    "date": 1728780589208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,13 @@\n             functionArguments: [`${account?.address}`]\n         };\n         try {\n             const result = await aptos.view({ payload });\n-            console.log(result); // Verifica el resultado\n \n             // Extraer datos del array de arrays\n             const extractedRecyclings = result.map(recyclingArray => {\n                 if (Array.isArray(recyclingArray) && recyclingArray.length > 0) {\n-                    const recycling: any[] = recyclingArray[0]; // acceder al primer elemento del array\n+                    const recycling = recyclingArray[0]; // acceder al primer elemento del array\n                     return {\n                         owner: recycling[0],               // address\n                         type: recycling[1],                // String\n                         ubication: recycling[2],            // String\n@@ -45,9 +44,8 @@\n                 return null;\n             }).filter(recycling => recycling !== null);\n \n             setRecyclings(extractedRecyclings);\n-            console.log(extractedRecyclings); // Verifica los reciclajes extraídos\n         } catch (error) {\n             console.error(\"Error al obtener reciclajes:\", error);\n         }\n     };\n"
                },
                {
                    "date": 1728780743660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,20 +4,20 @@\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n+type Recycling = {\n+    owner: string;\n+    type: string;\n+    ubication: string;\n+    weight: string;\n+    pricePound: string;\n+    observations: string;\n+    available: boolean;\n+};\n+\n const Index = () => {\n     const { account } = useWallet();\n-    interface Recycling {\n-        owner: string;\n-        type: string;\n-        ubication: string;\n-        weight: string;\n-        pricePound: string;\n-        observations: string;\n-        available: boolean;\n-    }\n-\n     const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n     const getRecycling = async () => {\n         const payload = {\n@@ -26,26 +26,28 @@\n         };\n         try {\n             const result = await aptos.view({ payload });\n \n-            // Extraer datos del array de arrays\n-            const extractedRecyclings = result.map(recyclingArray => {\n-                if (Array.isArray(recyclingArray) && recyclingArray.length > 0) {\n-                    const recycling = recyclingArray[0]; // acceder al primer elemento del array\n+            // Asegurarse de que result es un array de arrays y tiene datos\n+            if (Array.isArray(result) && result.length > 0) {\n+                const extractedRecyclings = result.map((recyclingArray: any) => {\n+                    // Verificar que recyclingArray es un array y tiene al menos un elemento\n+                    const recycling = Array.isArray(recyclingArray) && recyclingArray.length > 0 ? recyclingArray[0] : [];\n                     return {\n-                        owner: recycling[0],               // address\n-                        type: recycling[1],                // String\n-                        ubication: recycling[2],            // String\n-                        weight: recycling[3].toString(),    // u64, convertir a string si es necesario\n-                        pricePound: recycling[4].toString(), // u64, convertir a string si es necesario\n-                        observations: recycling[5],         // String\n-                        available: recycling[6]             // bool\n+                        owner: recycling[0]?.toString() || 'N/A',                // address\n+                        type: recycling[1]?.toString() || 'N/A',                 // String\n+                        ubication: recycling[2]?.toString() || 'N/A',             // String\n+                        weight: recycling[3] !== undefined ? recycling[3].toString() : 'N/A', // u64\n+                        pricePound: recycling[4] !== undefined ? recycling[4].toString() : 'N/A', // u64\n+                        observations: recycling[5]?.toString() || 'N/A',          // String\n+                        available: recycling[6] || false                          // bool\n                     };\n-                }\n-                return null;\n-            }).filter(recycling => recycling !== null);\n+                });\n \n-            setRecyclings(extractedRecyclings);\n+                setRecyclings(extractedRecyclings);\n+            } else {\n+                console.error(\"No se encontraron reciclajes\");\n+            }\n         } catch (error) {\n             console.error(\"Error al obtener reciclajes:\", error);\n         }\n     };\n"
                },
                {
                    "date": 1728780894365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n             functionArguments: [`${account?.address}`]\n         };\n         try {\n             const result = await aptos.view({ payload });\n+            console.log(\"Resultado de reciclajes:\", result);\n \n             // Asegurarse de que result es un array de arrays y tiene datos\n             if (Array.isArray(result) && result.length > 0) {\n                 const extractedRecyclings = result.map((recyclingArray: any) => {\n"
                },
                {
                    "date": 1728781013476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,36 @@\n-import React, { useState } from 'react';\n-import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+import React, { useState } from 'react'; \n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"; \n+import { useWallet } from '@aptos-labs/wallet-adapter-react'; \n \n-export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET})); \n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n \n-type Recycling = {\n-    owner: string;\n-    type: string;\n-    ubication: string;\n-    weight: string;\n-    pricePound: string;\n-    observations: string;\n-    available: boolean;\n-};\n+const Index = () => { \n+    const { connect, account } = useWallet(); \n+    const [recyclings, setRecyclings] = useState([]);\n \n-const Index = () => {\n-    const { account } = useWallet();\n-    const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n-\n     const getRecycling = async () => {\n         const payload = {\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         };\n         try {\n             const result = await aptos.view({ payload });\n-            console.log(\"Resultado de reciclajes:\", result);\n+            console.log(\"Resultado de reciclajes:\", result); \n \n-            // Asegurarse de que result es un array de arrays y tiene datos\n+            // Asegurarse de que result es un array y tiene datos\n             if (Array.isArray(result) && result.length > 0) {\n-                const extractedRecyclings = result.map((recyclingArray: any) => {\n-                    // Verificar que recyclingArray es un array y tiene al menos un elemento\n-                    const recycling = Array.isArray(recyclingArray) && recyclingArray.length > 0 ? recyclingArray[0] : [];\n-                    return {\n-                        owner: recycling[0]?.toString() || 'N/A',                // address\n-                        type: recycling[1]?.toString() || 'N/A',                 // String\n-                        ubication: recycling[2]?.toString() || 'N/A',             // String\n-                        weight: recycling[3] !== undefined ? recycling[3].toString() : 'N/A', // u64\n-                        pricePound: recycling[4] !== undefined ? recycling[4].toString() : 'N/A', // u64\n-                        observations: recycling[5]?.toString() || 'N/A',          // String\n-                        available: recycling[6] || false                          // bool\n-                    };\n-                });\n+                // Mapear los datos directamente desde el resultado\n+                const extractedRecyclings = result.map((recycling: any) => ({\n+                    owner: recycling.owner?.toString() || 'N/A',\n+                    type: recycling.type?.toString() || 'N/A',\n+                    ubication: recycling.ubication?.toString() || 'N/A',\n+                    weight: recycling.weight?.toString() || 'N/A',\n+                    pricePound: recycling.pricePound?.toString() || 'N/A',\n+                    observations: recycling.observations?.toString() || 'N/A',\n+                    available: recycling.available || false\n+                }));\n \n                 setRecyclings(extractedRecyclings);\n             } else {\n                 console.error(\"No se encontraron reciclajes\");\n@@ -56,30 +43,30 @@\n     return (\n         <div>\n             <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n             {recyclings.length > 0 && (\n-                <table style={{ marginTop: '20px', borderCollapse: 'collapse', width: '100%' }}>\n+                <table>\n                     <thead>\n                         <tr>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Owner</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Type</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Ubicación</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Peso</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Precio por libra</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Observaciones</th>\n-                            <th style={{ border: '1px solid #ddd', padding: '8px' }}>Disponible</th>\n+                            <th>Owner</th>\n+                            <th>Type</th>\n+                            <th>Ubication</th>\n+                            <th>Weight</th>\n+                            <th>Price per Pound</th>\n+                            <th>Observations</th>\n+                            <th>Available</th>\n                         </tr>\n                     </thead>\n                     <tbody>\n                         {recyclings.map((recycling, index) => (\n                             <tr key={index}>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.owner}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.type}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.ubication}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.weight}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.pricePound}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.observations}</td>\n-                                <td style={{ border: '1px solid #ddd', padding: '8px' }}>{recycling.available ? 'Sí' : 'No'}</td>\n+                                <td>{recycling.owner}</td>\n+                                <td>{recycling.type}</td>\n+                                <td>{recycling.ubication}</td>\n+                                <td>{recycling.weight}</td>\n+                                <td>{recycling.pricePound}</td>\n+                                <td>{recycling.observations}</td>\n+                                <td>{recycling.available ? 'Sí' : 'No'}</td>\n                             </tr>\n                         ))}\n                     </tbody>\n                 </table>\n"
                },
                {
                    "date": 1728781078927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,26 @@\n import React, { useState } from 'react'; \n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"; \n import { useWallet } from '@aptos-labs/wallet-adapter-react'; \n \n-export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET})); \n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n+// Define la interfaz para los reciclajes\n+interface Recycling {\n+    owner: string;\n+    type: string;\n+    ubication: string;\n+    weight: string;\n+    pricePound: string;\n+    observations: string;\n+    available: boolean;\n+}\n \n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET })); \n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+\n const Index = () => { \n     const { connect, account } = useWallet(); \n-    const [recyclings, setRecyclings] = useState([]);\n+    // Tipar el estado como un array de Recycling\n+    const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n     const getRecycling = async () => {\n         const payload = {\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n@@ -20,9 +32,9 @@\n \n             // Asegurarse de que result es un array y tiene datos\n             if (Array.isArray(result) && result.length > 0) {\n                 // Mapear los datos directamente desde el resultado\n-                const extractedRecyclings = result.map((recycling: any) => ({\n+                const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n                     owner: recycling.owner?.toString() || 'N/A',\n                     type: recycling.type?.toString() || 'N/A',\n                     ubication: recycling.ubication?.toString() || 'N/A',\n                     weight: recycling.weight?.toString() || 'N/A',\n"
                },
                {
                    "date": 1728781213599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useState } from 'react'; \n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"; \n import { useWallet } from '@aptos-labs/wallet-adapter-react'; \n \n-// Define la interfaz para los reciclajes\n interface Recycling {\n     owner: string;\n     type: string;\n     ubication: string;\n@@ -17,9 +16,8 @@\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => { \n     const { connect, account } = useWallet(); \n-    // Tipar el estado como un array de Recycling\n     const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n     const getRecycling = async () => {\n         const payload = {\n@@ -29,18 +27,16 @@\n         try {\n             const result = await aptos.view({ payload });\n             console.log(\"Resultado de reciclajes:\", result); \n \n-            // Asegurarse de que result es un array y tiene datos\n             if (Array.isArray(result) && result.length > 0) {\n-                // Mapear los datos directamente desde el resultado\n                 const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n-                    owner: recycling.owner?.toString() || 'N/A',\n-                    type: recycling.type?.toString() || 'N/A',\n-                    ubication: recycling.ubication?.toString() || 'N/A',\n-                    weight: recycling.weight?.toString() || 'N/A',\n-                    pricePound: recycling.pricePound?.toString() || 'N/A',\n-                    observations: recycling.observations?.toString() || 'N/A',\n+                    owner: recycling.owner || 'N/A',\n+                    type: recycling.type || 'N/A',\n+                    ubication: recycling.ubication || 'N/A',\n+                    weight: recycling.weight || 'N/A',\n+                    pricePound: recycling.pricePound || 'N/A',\n+                    observations: recycling.observations || 'N/A',\n                     available: recycling.available || false\n                 }));\n \n                 setRecyclings(extractedRecyclings);\n"
                },
                {
                    "date": 1728781650806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             console.log(\"Resultado de reciclajes:\", result); \n \n             if (Array.isArray(result) && result.length > 0) {\n                 const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n-                    owner: recycling.owner || 'N/A',\n+                    owner: recycling.owner,\n                     type: recycling.type || 'N/A',\n                     ubication: recycling.ubication || 'N/A',\n                     weight: recycling.weight || 'N/A',\n                     pricePound: recycling.pricePound || 'N/A',\n"
                },
                {
                    "date": 1728781785456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,17 @@\n import React, { useState } from 'react'; \n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"; \n import { useWallet } from '@aptos-labs/wallet-adapter-react'; \n+import { Address } from 'cluster';\n \n interface Recycling {\n-    owner: string;\n+    owner: Address;\n     type: string;\n     ubication: string;\n-    weight: string;\n-    pricePound: string;\n+    weight: number;\n+    pricePound: number;\n     observations: string;\n+    chats: [];\n     available: boolean;\n }\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET })); \n"
                },
                {
                    "date": 1728781809350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET })); \n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => { \n-    const { connect, account } = useWallet(); \n+    const { account } = useWallet(); \n     const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n     const getRecycling = async () => {\n         const payload = {\n"
                },
                {
                    "date": 1728781830238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n                     ubication: recycling.ubication || 'N/A',\n                     weight: recycling.weight || 'N/A',\n                     pricePound: recycling.pricePound || 'N/A',\n                     observations: recycling.observations || 'N/A',\n+                    chats: recycling.chats || [],\n                     available: recycling.available || false\n                 }));\n \n                 setRecyclings(extractedRecyclings);\n"
                },
                {
                    "date": 1728781900042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => { \n     const { account } = useWallet(); \n-    const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n+    const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n \n+\n     const getRecycling = async () => {\n         const payload = {\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n"
                },
                {
                    "date": 1728782233193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,22 +27,24 @@\n             function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n             functionArguments: [`${account?.address}`]\n         };\n         try {\n-            const result = await aptos.view({ payload });\n+            const result: any = await aptos.view({ payload });\n             console.log(\"Resultado de reciclajes:\", result); \n \n             if (Array.isArray(result) && result.length > 0) {\n-                const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n-                    owner: recycling.owner,\n-                    type: recycling.type || 'N/A',\n-                    ubication: recycling.ubication || 'N/A',\n-                    weight: recycling.weight || 'N/A',\n-                    pricePound: recycling.pricePound || 'N/A',\n-                    observations: recycling.observations || 'N/A',\n-                    chats: recycling.chats || [],\n-                    available: recycling.available || false\n-                }));\n+                const extractedRecyclings: Recycling[][] = result.map((recyclingArray: any[]) =>\n+                    recyclingArray.map((recycling: any) => ({\n+                      owner: recycling.owner,\n+                      type: recycling.type || 'N/A',\n+                      ubication: recycling.ubication || 'N/A',\n+                      weight: recycling.weight || 0,\n+                      pricePound: recycling.pricePound || 0,\n+                      observations: recycling.observations || 'N/A',\n+                      chats: recycling.chats || [],\n+                      available: recycling.available || false,\n+                    }))\n+                );\n \n                 setRecyclings(extractedRecyclings);\n             } else {\n                 console.error(\"No se encontraron reciclajes\");\n"
                },
                {
                    "date": 1728782516116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,102 @@\n-import React, { useState } from 'react'; \n-import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"; \n-import { useWallet } from '@aptos-labs/wallet-adapter-react'; \n-import { Address } from 'cluster';\n+import React, { useState } from \"react\";\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+import { Address } from \"cluster\";\n \n interface Recycling {\n-    owner: Address;\n-    type: string;\n-    ubication: string;\n-    weight: number;\n-    pricePound: number;\n-    observations: string;\n-    chats: [];\n-    available: boolean;\n+  owner: Address;\n+  type: string;\n+  ubication: string;\n+  weight: number;\n+  pricePound: number;\n+  observations: string;\n+  chats: [];\n+  available: boolean;\n }\n \n-export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET })); \n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS =\n+  \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n-const Index = () => { \n-    const { account } = useWallet(); \n-    const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+const Index = () => {\n+  const { account } = useWallet();\n+  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n \n+  const getRecycling = async () => {\n+    const payload = {\n+      function:\n+        `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+      functionArguments: [`${account?.address}`],\n+    };\n+    try {\n+      const result: any = await aptos.view({ payload });\n+      console.log(\"Resultado de reciclajes:\", result);\n \n-    const getRecycling = async () => {\n-        const payload = {\n-            function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n-            functionArguments: [`${account?.address}`]\n-        };\n-        try {\n-            const result: any = await aptos.view({ payload });\n-            console.log(\"Resultado de reciclajes:\", result); \n+      if (Array.isArray(result) && result.length > 0) {\n+        const extractedRecyclings: Recycling[][] = result.map(\n+          (recyclingArray: any[]) =>\n+            recyclingArray.map((recycling: any) => ({\n+              owner: recycling.owner,\n+              type: recycling.type || \"N/A\",\n+              ubication: recycling.ubication || \"N/A\",\n+              weight: recycling.weight || 0,\n+              pricePound: recycling.pricePound || 0,\n+              observations: recycling.observations || \"N/A\",\n+              chats: recycling.chats || [],\n+              available: recycling.available || false,\n+            }))\n+        );\n \n-            if (Array.isArray(result) && result.length > 0) {\n-                const extractedRecyclings: Recycling[][] = result.map((recyclingArray: any[]) =>\n-                    recyclingArray.map((recycling: any) => ({\n-                      owner: recycling.owner,\n-                      type: recycling.type || 'N/A',\n-                      ubication: recycling.ubication || 'N/A',\n-                      weight: recycling.weight || 0,\n-                      pricePound: recycling.pricePound || 0,\n-                      observations: recycling.observations || 'N/A',\n-                      chats: recycling.chats || [],\n-                      available: recycling.available || false,\n-                    }))\n-                );\n+        setRecyclings(extractedRecyclings);\n+      } else {\n+        console.error(\"No se encontraron reciclajes\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error al obtener reciclajes:\", error);\n+    }\n+  };\n \n-                setRecyclings(extractedRecyclings);\n-            } else {\n-                console.error(\"No se encontraron reciclajes\");\n-            }\n-        } catch (error) {\n-            console.error(\"Error al obtener reciclajes:\", error);\n-        }\n-    };\n-\n-    return (\n-        <div>\n-            <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n-            {recyclings.length > 0 && (\n-                <table>\n-                    <thead>\n-                        <tr>\n-                            <th>Owner</th>\n-                            <th>Type</th>\n-                            <th>Ubication</th>\n-                            <th>Weight</th>\n-                            <th>Price per Pound</th>\n-                            <th>Observations</th>\n-                            <th>Available</th>\n-                        </tr>\n-                    </thead>\n-                    <tbody>\n-                        {recyclings.map((recycling, index) => (\n-                            <tr key={index}>\n-                                <td>{recycling.owner}</td>\n-                                <td>{recycling.type}</td>\n-                                <td>{recycling.ubication}</td>\n-                                <td>{recycling.weight}</td>\n-                                <td>{recycling.pricePound}</td>\n-                                <td>{recycling.observations}</td>\n-                                <td>{recycling.available ? 'Sí' : 'No'}</td>\n-                            </tr>\n-                        ))}\n-                    </tbody>\n-                </table>\n+  return (\n+    <div>\n+      <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n+      {recyclings.length > 0 && (\n+        <table>\n+          <thead>\n+            <tr>\n+              <th>Owner</th>\n+              <th>Type</th>\n+              <th>Ubication</th>\n+              <th>Weight</th>\n+              <th>Price per Pound</th>\n+              <th>Observations</th>\n+              <th>Available</th>\n+            </tr>\n+          </thead>\n+          <tbody>\n+            {recyclings.length > 0 ? (\n+              recyclings.flatMap((recyclingArray, index) =>\n+                recyclingArray.map((recycling, subIndex) => (\n+                  <tr key={`${index}-${subIndex}`}>\n+                    <td>{recycling.owner.toString()}</td>\n+                    <td>{recycling.type}</td>\n+                    <td>{recycling.ubication}</td>\n+                    <td>{recycling.weight}</td>\n+                    <td>{recycling.pricePound}</td>\n+                    <td>{recycling.observations}</td>\n+                    <td>{recycling.available ? \"Sí\" : \"No\"}</td>\n+                  </tr>\n+                ))\n+              )\n+            ) : (\n+              <tr>\n+                <td colSpan={7}>No hay reciclajes disponibles</td>\n+              </tr>\n             )}\n-        </div>\n-    );\n+          </tbody>\n+        </table>\n+      )}\n+    </div>\n+  );\n };\n \n export default Index;\n"
                },
                {
                    "date": 1728783608524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n import React, { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n-import { Address } from \"cluster\";\n \n interface Recycling {\n-  owner: Address;\n   type: string;\n   ubication: string;\n   weight: number;\n   pricePound: number;\n@@ -14,10 +12,9 @@\n   available: boolean;\n }\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-const ADDRESS =\n-  \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => {\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n@@ -29,9 +26,9 @@\n       functionArguments: [`${account?.address}`],\n     };\n     try {\n       const result: any = await aptos.view({ payload });\n-      console.log(\"Resultado de reciclajes:\", result);\n+      console.log(\"Resultado de reciclajes:\", result[0]);\n \n       if (Array.isArray(result) && result.length > 0) {\n         const extractedRecyclings: Recycling[][] = result.map(\n           (recyclingArray: any[]) =>\n@@ -62,9 +59,8 @@\n       {recyclings.length > 0 && (\n         <table>\n           <thead>\n             <tr>\n-              <th>Owner</th>\n               <th>Type</th>\n               <th>Ubication</th>\n               <th>Weight</th>\n               <th>Price per Pound</th>\n@@ -76,9 +72,8 @@\n             {recyclings.length > 0 ? (\n               recyclings.flatMap((recyclingArray, index) =>\n                 recyclingArray.map((recycling, subIndex) => (\n                   <tr key={`${index}-${subIndex}`}>\n-                    <td>{recycling.owner.toString()}</td>\n                     <td>{recycling.type}</td>\n                     <td>{recycling.ubication}</td>\n                     <td>{recycling.weight}</td>\n                     <td>{recycling.pricePound}</td>\n"
                },
                {
                    "date": 1728783749094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => {\n   const { account } = useWallet();\n-  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+  const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n \n   const getRecycling = async () => {\n     const payload = {\n       function:\n@@ -28,10 +28,10 @@\n     try {\n       const result: any = await aptos.view({ payload });\n       console.log(\"Resultado de reciclajes:\", result[0]);\n \n-      if (Array.isArray(result) && result.length > 0) {\n-        const extractedRecyclings: Recycling[][] = result.map(\n+      if (Array.isArray(result[0]) && result[0].length > 0) {\n+        const extractedRecyclings: Recycling[] = result.map(\n           (recyclingArray: any[]) =>\n             recyclingArray.map((recycling: any) => ({\n               owner: recycling.owner,\n               type: recycling.type || \"N/A\",\n"
                },
                {
                    "date": 1728783908227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Index = () => {\n   const { account } = useWallet();\n-  const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n+  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n \n   const getRecycling = async () => {\n     const payload = {\n       function:\n@@ -28,10 +28,10 @@\n     try {\n       const result: any = await aptos.view({ payload });\n       console.log(\"Resultado de reciclajes:\", result[0]);\n \n-      if (Array.isArray(result[0]) && result[0].length > 0) {\n-        const extractedRecyclings: Recycling[] = result.map(\n+      if (Array.isArray(result) && result.length > 0) {\n+        const extractedRecyclings: Recycling[][] = result.map(\n           (recyclingArray: any[]) =>\n             recyclingArray.map((recycling: any) => ({\n               owner: recycling.owner,\n               type: recycling.type || \"N/A\",\n"
                },
                {
                    "date": 1728786659303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n \n const Index = () => {\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+  const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n   const getRecycling = async () => {\n     const payload = {\n       function:\n@@ -52,45 +53,74 @@\n       console.error(\"Error al obtener reciclajes:\", error);\n     }\n   };\n \n+  const handleRowClick = (recycling: Recycling) => {\n+    setSelectedRecycling(recycling);\n+  };\n+\n+  const handleCloseModal = () => {\n+    setSelectedRecycling(null);\n+  };\n+\n   return (\n     <div>\n-      <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n+      <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n+        Obtener todos los reciclajes\n+      </button>\n       {recyclings.length > 0 && (\n-        <table>\n+        <table className=\"min-w-full bg-white border border-gray-200\">\n           <thead>\n-            <tr>\n-              <th>Type</th>\n-              <th>Ubication</th>\n-              <th>Weight</th>\n-              <th>Price per Pound</th>\n-              <th>Observations</th>\n-              <th>Available</th>\n+            <tr className=\"bg-gray-200\">\n+              <th className=\"px-4 py-2 border\">Type</th>\n+              <th className=\"px-4 py-2 border\">Ubication</th>\n+              <th className=\"px-4 py-2 border\">Weight</th>\n+              <th className=\"px-4 py-2 border\">Price per Pound</th>\n+              <th className=\"px-4 py-2 border\">Observations</th>\n+              <th className=\"px-4 py-2 border\">Available</th>\n             </tr>\n           </thead>\n           <tbody>\n             {recyclings.length > 0 ? (\n               recyclings.flatMap((recyclingArray, index) =>\n                 recyclingArray.map((recycling, subIndex) => (\n-                  <tr key={`${index}-${subIndex}`}>\n-                    <td>{recycling.type}</td>\n-                    <td>{recycling.ubication}</td>\n-                    <td>{recycling.weight}</td>\n-                    <td>{recycling.pricePound}</td>\n-                    <td>{recycling.observations}</td>\n-                    <td>{recycling.available ? \"Sí\" : \"No\"}</td>\n+                  <tr \n+                    key={`${index}-${subIndex}`} \n+                    onClick={() => handleRowClick(recycling)} \n+                    className=\"hover:bg-gray-100 cursor-pointer\"\n+                  >\n+                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n                   </tr>\n                 ))\n               )\n             ) : (\n               <tr>\n-                <td colSpan={7}>No hay reciclajes disponibles</td>\n+                <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n               </tr>\n             )}\n           </tbody>\n         </table>\n       )}\n+      \n+      {selectedRecycling && (\n+        <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n+          <div className=\"bg-white rounded-lg p-6\">\n+            <h2 className=\"text-xl mb-4\">Resumen del Reciclaje</h2>\n+            <p><strong>Type:</strong> {selectedRecycling.type}</p>\n+            <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n+            <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n+            <p><strong>Price per Pound:</strong> {selectedRecycling.pricePound}</p>\n+            <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n+            <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+            <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Cerrar</button>\n+          </div>\n+        </div>\n+      )}\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1728788718403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-full bg-white border border-gray-200\">\n+        <table className=\"min-w-full bg-white border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788727990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-full bg-white border border-blue-600\">\n+        <table className=\"min-w-full bg-blue-100 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788757320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-full bg-blue-100 border border-blue-600\">\n+        <table className=\"min-w-full bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788795448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-full bg-blue-50 border border-blue-600\">\n+        <table className=\"min-w-fit bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788826413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-fit bg-blue-50 border border-blue-600\">\n+        <table className=\"w-auto bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788845944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"w-auto bg-blue-50 border border-blue-600\">\n+        <table className=\"w-80 bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788863955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"w-80 bg-blue-50 border border-blue-600\">\n+        <table className=\"min-w-max bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728788899250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n         Obtener todos los reciclajes\n       </button>\n       {recyclings.length > 0 && (\n-        <table className=\"min-w-max bg-blue-50 border border-blue-600\">\n+        <table className=\"min-w-96 bg-blue-50 border border-blue-600\">\n           <thead>\n             <tr className=\"bg-gray-200\">\n               <th className=\"px-4 py-2 border\">Type</th>\n               <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728789161987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,65 +62,67 @@\n     setSelectedRecycling(null);\n   };\n \n   return (\n-    <div>\n-      <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n-        Obtener todos los reciclajes\n-      </button>\n-      {recyclings.length > 0 && (\n-        <table className=\"min-w-96 bg-blue-50 border border-blue-600\">\n-          <thead>\n-            <tr className=\"bg-gray-200\">\n-              <th className=\"px-4 py-2 border\">Type</th>\n-              <th className=\"px-4 py-2 border\">Ubication</th>\n-              <th className=\"px-4 py-2 border\">Weight</th>\n-              <th className=\"px-4 py-2 border\">Price per Pound</th>\n-              <th className=\"px-4 py-2 border\">Observations</th>\n-              <th className=\"px-4 py-2 border\">Available</th>\n-            </tr>\n-          </thead>\n-          <tbody>\n-            {recyclings.length > 0 ? (\n-              recyclings.flatMap((recyclingArray, index) =>\n-                recyclingArray.map((recycling, subIndex) => (\n-                  <tr \n-                    key={`${index}-${subIndex}`} \n-                    onClick={() => handleRowClick(recycling)} \n-                    className=\"hover:bg-gray-100 cursor-pointer\"\n-                  >\n-                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                  </tr>\n-                ))\n-              )\n-            ) : (\n+    <div className=\"flex justify-center\">\n+      <div className=\"w-full max-w-3xl\">\n+        <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n+          Obtener todos los reciclajes\n+        </button>\n+        {recyclings.length > 0 && (\n+          <table className=\"min-w-full bg-white border border-gray-200\">\n+            <thead className=\"bg-blue-800 text-white\">\n               <tr>\n-                <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n+                <th className=\"px-4 py-2 border\">Type</th>\n+                <th className=\"px-4 py-2 border\">Ubication</th>\n+                <th className=\"px-4 py-2 border\">Weight</th>\n+                <th className=\"px-4 py-2 border\">Price per Pound</th>\n+                <th className=\"px-4 py-2 border\">Observations</th>\n+                <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n-            )}\n-          </tbody>\n-        </table>\n-      )}\n-      \n-      {selectedRecycling && (\n-        <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-          <div className=\"bg-white rounded-lg p-6\">\n-            <h2 className=\"text-xl mb-4\">Resumen del Reciclaje</h2>\n-            <p><strong>Type:</strong> {selectedRecycling.type}</p>\n-            <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-            <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n-            <p><strong>Price per Pound:</strong> {selectedRecycling.pricePound}</p>\n-            <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n-            <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-            <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Cerrar</button>\n+            </thead>\n+            <tbody>\n+              {recyclings.length > 0 ? (\n+                recyclings.flatMap((recyclingArray, index) =>\n+                  recyclingArray.map((recycling, subIndex) => (\n+                    <tr \n+                      key={`${index}-${subIndex}`} \n+                      onClick={() => handleRowClick(recycling)} \n+                      className=\"hover:bg-blue-600 hover:text-white cursor-pointer transition-colors duration-200\"\n+                    >\n+                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                    </tr>\n+                  ))\n+                )\n+              ) : (\n+                <tr>\n+                  <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n+                </tr>\n+              )}\n+            </tbody>\n+          </table>\n+        )}\n+        \n+        {selectedRecycling && (\n+          <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n+            <div className=\"bg-white rounded-lg p-6\">\n+              <h2 className=\"text-xl mb-4\">Resumen del Reciclaje</h2>\n+              <p><strong>Type:</strong> {selectedRecycling.type}</p>\n+              <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n+              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Price per Pound:</strong> {selectedRecycling.pricePound}</p>\n+              <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n+              <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Cerrar</button>\n+            </div>\n           </div>\n-        </div>\n-      )}\n+        )}\n+      </div>\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1728789282225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,21 +64,21 @@\n \n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full max-w-3xl\">\n-        <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded\">\n+        <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition duration-200\">\n           Obtener todos los reciclajes\n         </button>\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n-            <thead className=\"bg-blue-800 text-white\">\n+            <thead className=\"bg-blue-500 text-white\">\n               <tr>\n-                <th className=\"px-4 py-2 border\">Type</th>\n-                <th className=\"px-4 py-2 border\">Ubication</th>\n-                <th className=\"px-4 py-2 border\">Weight</th>\n-                <th className=\"px-4 py-2 border\">Price per Pound</th>\n-                <th className=\"px-4 py-2 border\">Observations</th>\n-                <th className=\"px-4 py-2 border\">Available</th>\n+                <th className=\"px-4 py-2 border\">Tipo</th>\n+                <th className=\"px-4 py-2 border\">Ubicación</th>\n+                <th className=\"px-4 py-2 border\">Peso</th>\n+                <th className=\"px-4 py-2 border\">Precio por libra</th>\n+                <th className=\"px-4 py-2 border\">Observaciones</th>\n+                <th className=\"px-4 py-2 border\">Disponible</th>\n               </tr>\n             </thead>\n             <tbody>\n               {recyclings.length > 0 ? (\n@@ -86,9 +86,9 @@\n                   recyclingArray.map((recycling, subIndex) => (\n                     <tr \n                       key={`${index}-${subIndex}`} \n                       onClick={() => handleRowClick(recycling)} \n-                      className=\"hover:bg-blue-600 hover:text-white cursor-pointer transition-colors duration-200\"\n+                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n                     >\n                       <td className=\"px-4 py-2 border\">{recycling.type}</td>\n                       <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n                       <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n@@ -110,14 +110,14 @@\n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Resumen del Reciclaje</h2>\n-              <p><strong>Type:</strong> {selectedRecycling.type}</p>\n-              <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n-              <p><strong>Price per Pound:</strong> {selectedRecycling.pricePound}</p>\n-              <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n-              <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <p><strong>Tipo:</strong> {selectedRecycling.type}</p>\n+              <p><strong>Ubicación:</strong> {selectedRecycling.ubication}</p>\n+              <p><strong>Peso:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Precio por libra:</strong> {selectedRecycling.pricePound}</p>\n+              <p><strong>Observaciones:</strong> {selectedRecycling.observations}</p>\n+              <p><strong>Disponible:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Cerrar</button>\n             </div>\n           </div>\n         )}\n@@ -126,4 +126,5 @@\n   );\n };\n \n export default Index;\n+\n"
                },
                {
                    "date": 1728789395050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,8 @@\n \n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full max-w-3xl\">\n-        <button onClick={getRecycling} className=\"mb-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition duration-200\">\n-          Obtener todos los reciclajes\n-        </button>\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n"
                },
                {
                    "date": 1728789848805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,14 +68,14 @@\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n-                <th className=\"px-4 py-2 border\">Tipo</th>\n-                <th className=\"px-4 py-2 border\">Ubicación</th>\n-                <th className=\"px-4 py-2 border\">Peso</th>\n-                <th className=\"px-4 py-2 border\">Precio por libra</th>\n-                <th className=\"px-4 py-2 border\">Observaciones</th>\n-                <th className=\"px-4 py-2 border\">Disponible</th>\n+                <th className=\"px-4 py-2 border\">Type</th>\n+                <th className=\"px-4 py-2 border\">Ubication</th>\n+                <th className=\"px-4 py-2 border\">Weight</th>\n+                <th className=\"px-4 py-2 border\">Price Per Pound</th>\n+                <th className=\"px-4 py-2 border\">Observations</th>\n+                <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n               {recyclings.length > 0 ? (\n@@ -106,16 +106,17 @@\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n             <div className=\"bg-white rounded-lg p-6\">\n-              <h2 className=\"text-xl mb-4\">Resumen del Reciclaje</h2>\n-              <p><strong>Tipo:</strong> {selectedRecycling.type}</p>\n-              <p><strong>Ubicación:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Peso:</strong> {selectedRecycling.weight}</p>\n-              <p><strong>Precio por libra:</strong> {selectedRecycling.pricePound}</p>\n-              <p><strong>Observaciones:</strong> {selectedRecycling.observations}</p>\n-              <p><strong>Disponible:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Cerrar</button>\n+              <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n+              <p><strong>Type:</strong> {selectedRecycling.type}</p>\n+              <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n+              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n+              <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n+              <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">See Chat</button>\n             </div>\n           </div>\n         )}\n       </div>\n"
                }
            ],
            "date": 1728774752554,
            "name": "Commit-0",
            "content": "import React from 'react'\nimport { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\nimport { useEffect, useState } from 'react';\nimport { useWallet } from '@aptos-labs/wallet-adapter-react';\nimport axios from 'axios';\nimport Header from '@/components/header';\n\nexport const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\nconst ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n\nconst index = () => {\n    const {connect, account, connected, disconnect, signAndSubmitTransaction,\n    signTransaction, signMessage, \n        signMessageAndVerify} = useWallet();\n\n    const getRecycling = async () =>{\n        const payload = {\n            function: `${ADDRESS}::recicly::get_all_recyclings`,\n            functionArguments: [`${account?.address}`]\n        }\n        let result = await aptos.view({payload});\n        console.log(result);\n    }\n  \n  return (\n    <div>\n        <button onClick={getRecycling}>Obtener todos los reciclajes</button>\n    </div>\n  )\n}\n\nexport default index"
        }
    ]
}