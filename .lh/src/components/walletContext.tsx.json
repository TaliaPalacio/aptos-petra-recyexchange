{
    "sourceFile": "src/components/walletContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1728429760384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728441785016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n+import Header from './header';  \n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n@@ -28,8 +29,9 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n+      <Header/>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728441812542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n-      <Header/>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728442037611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n+      <Header />\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728442156914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n-import Header from './header';  \n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n@@ -29,9 +28,8 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n-      <Header />\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728442186053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n+import Header from './header';\n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n"
                },
                {
                    "date": 1728442191744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n+      <Header />\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728442274798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,15 @@\n     }\n   }, [connected]);\n \n   return (\n+    <div>\n+      <Header/>\n+    \n     <WalletContext.Provider value={{ connected, setConnected }}>\n-      <Header />\n       {children}\n     </WalletContext.Provider>\n+    </div>\n   );\n };\n \n export const useWalletContext = () => {\n"
                },
                {
                    "date": 1728442329735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,11 @@\n     }\n   }, [connected]);\n \n   return (\n-    <div>\n-      <Header/>\n-    \n     <WalletContext.Provider value={{ connected, setConnected }}>\n       {children}\n     </WalletContext.Provider>\n-    </div>\n   );\n };\n \n export const useWalletContext = () => {\n"
                },
                {
                    "date": 1728760683780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n-import Header from './header';\n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n"
                },
                {
                    "date": 1728760789075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n }\n-\n const WalletContext = createContext<WalletContextProps | undefined>(undefined);\n \n export const WalletProvider = ({ children }: { children: ReactNode }) => {\n   const [connected, setConnected] = useState<boolean>(false);\n"
                },
                {
                    "date": 1728770608940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n+import Header from './header';\n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n@@ -27,8 +28,9 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n+<Header/>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728770634247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n   }, [connected]);\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n-<Header/>\n       {children}\n+      <Header />\n     </WalletContext.Provider>\n   );\n };\n \n"
                },
                {
                    "date": 1728770653314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n \n   return (\n     <WalletContext.Provider value={{ connected, setConnected }}>\n       {children}\n-      <Header />\n     </WalletContext.Provider>\n   );\n };\n \n"
                },
                {
                    "date": 1728771828649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n-import Header from './header';\n \n interface WalletContextProps {\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n"
                },
                {
                    "date": 1728853766072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,36 @@\n export const WalletProvider = ({ children }: { children: ReactNode }) => {\n   const [connected, setConnected] = useState<boolean>(false);\n \n   useEffect(() => {\n-    // Solo acceder a localStorage en el cliente\n-    if (typeof window !== 'undefined') {\n-      const storedConnected = localStorage.getItem('walletConnected');\n-      if (storedConnected) {\n-        setConnected(storedConnected === 'true');\n+    const checkWalletConnection = async () => {\n+      // Verifica si estamos en el lado del cliente\n+      if (typeof window !== 'undefined') {\n+        // Verifica el estado de conexión en la wallet Petra directamente\n+        const petraWallet = (window as any)?.aptos; // Accede a la API de Petra\n+        if (petraWallet) {\n+          try {\n+            const isConnected = await petraWallet.isConnected(); // Método que verifica si la wallet está conectada\n+            if (isConnected) {\n+              setConnected(true);\n+              localStorage.setItem('walletConnected', 'true');\n+            } else {\n+              setConnected(false);\n+              localStorage.setItem('walletConnected', 'false');\n+            }\n+          } catch (error) {\n+            console.error('Error verificando la conexión con la wallet Petra', error);\n+          }\n+        } else {\n+          const storedConnected = localStorage.getItem('walletConnected');\n+          if (storedConnected) {\n+            setConnected(storedConnected === 'true');\n+          }\n+        }\n       }\n-    }\n+    };\n+\n+    checkWalletConnection();\n   }, []);\n \n   useEffect(() => {\n     // Guardar el estado de conexión en localStorage cuando cambie\n"
                },
                {
                    "date": 1728943221450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n \n interface WalletContextProps {\n+  wallets: string[];\n+  addWallet: (wallet: string) => void;\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n }\n const WalletContext = createContext<WalletContextProps | undefined>(undefined);\n"
                },
                {
                    "date": 1728943791512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,25 @@\n   addWallet: (wallet: string) => void;\n   connected: boolean;\n   setConnected: (value: boolean) => void;\n }\n-const WalletContext = createContext<WalletContextProps | undefined>(undefined);\n+const WalletContext = createContext<WalletContextProps | undefined>({\n+  wallets: [],\n+  addWallet: () => {},\n+  connected: false,\n+  setConnected: () => {},\n+});\n \n export const WalletProvider = ({ children }: { children: ReactNode }) => {\n   const [connected, setConnected] = useState<boolean>(false);\n+  const [wallets, setWallets] = useState<string[]>([]);\n \n+  const addWallet = (wallet: string) => {\n+    if (!wallets.includes(wallet)) {\n+      setWallets((prevWallets) => [...prevWallets, wallet]);\n+    }\n+  };\n+\n   useEffect(() => {\n     const checkWalletConnection = async () => {\n       // Verifica si estamos en el lado del cliente\n       if (typeof window !== 'undefined') {\n@@ -49,9 +61,9 @@\n     }\n   }, [connected]);\n \n   return (\n-    <WalletContext.Provider value={{ connected, setConnected }}>\n+    <WalletContext.Provider value={{ connected, setConnected, wallets, addWallet }}>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728947556926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,26 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n \n interface WalletContextProps {\n-  wallets: string[];\n-  addWallet: (wallet: string) => void;\n   connected: boolean;\n+  walletAddresses: string[];\n   setConnected: (value: boolean) => void;\n+  addWalletAddress: (address: string) => void;\n }\n-const WalletContext = createContext<WalletContextProps | undefined>({\n-  wallets: [],\n-  addWallet: () => {},\n+const WalletContext = createContext<WalletContextProps>({\n   connected: false,\n+  walletAddresses: [],\n   setConnected: () => {},\n+  addWalletAddress: () => {},\n });\n \n export const WalletProvider = ({ children }: { children: ReactNode }) => {\n   const [connected, setConnected] = useState<boolean>(false);\n-  const [wallets, setWallets] = useState<string[]>([]);\n+  const [walletAddresses, setWalletAddresses] = useState<string[]>([]);\n \n-  const addWallet = (wallet: string) => {\n-    if (!wallets.includes(wallet)) {\n-      setWallets((prevWallets) => [...prevWallets, wallet]);\n+  const addWalletAddress = (address: string) => {\n+    if (!walletAddresses.includes(address)) {\n+      setWalletAddresses([...walletAddresses, address]);;\n     }\n   };\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1728947613672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     }\n   }, [connected]);\n \n   return (\n-    <WalletContext.Provider value={{ connected, setConnected, wallets, addWallet }}>\n+    <WalletContext.Provider value={{ connected, walletAddresses, setConnected, addWalletAddress}}>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1728950349383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,15 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n \n interface WalletContextProps {\n   connected: boolean;\n-  walletAddresses: string[];\n   setConnected: (value: boolean) => void;\n-  addWalletAddress: (address: string) => void;\n }\n-const WalletContext = createContext<WalletContextProps>({\n-  connected: false,\n-  walletAddresses: [],\n-  setConnected: () => {},\n-  addWalletAddress: () => {},\n-});\n+const WalletContext = createContext<WalletContextProps | undefined>(undefined);\n \n export const WalletProvider = ({ children }: { children: ReactNode }) => {\n   const [connected, setConnected] = useState<boolean>(false);\n-  const [walletAddresses, setWalletAddresses] = useState<string[]>([]);\n \n-  const addWalletAddress = (address: string) => {\n-    if (!walletAddresses.includes(address)) {\n-      setWalletAddresses([...walletAddresses, address]);;\n-    }\n-  };\n-\n   useEffect(() => {\n     const checkWalletConnection = async () => {\n       // Verifica si estamos en el lado del cliente\n       if (typeof window !== 'undefined') {\n@@ -61,9 +47,9 @@\n     }\n   }, [connected]);\n \n   return (\n-    <WalletContext.Provider value={{ connected, walletAddresses, setConnected, addWalletAddress}}>\n+    <WalletContext.Provider value={{ connected, setConnected }}>\n       {children}\n     </WalletContext.Provider>\n   );\n };\n"
                }
            ],
            "date": 1728429760384,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface WalletContextProps {\n  connected: boolean;\n  setConnected: (value: boolean) => void;\n}\n\nconst WalletContext = createContext<WalletContextProps | undefined>(undefined);\n\nexport const WalletProvider = ({ children }: { children: ReactNode }) => {\n  const [connected, setConnected] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Solo acceder a localStorage en el cliente\n    if (typeof window !== 'undefined') {\n      const storedConnected = localStorage.getItem('walletConnected');\n      if (storedConnected) {\n        setConnected(storedConnected === 'true');\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    // Guardar el estado de conexión en localStorage cuando cambie\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('walletConnected', connected.toString());\n    }\n  }, [connected]);\n\n  return (\n    <WalletContext.Provider value={{ connected, setConnected }}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWalletContext = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWalletContext must be used within a WalletProvider');\n  }\n  return context;\n};\n"
        }
    ]
}