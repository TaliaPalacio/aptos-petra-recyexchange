{
    "sourceFile": "src/components/tablebuy.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1728969819170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1728969819170,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\nimport { useWallet } from \"@aptos-labs/wallet-adapter-react\";\nimport ADDRESS from \"@/utils/data\";\n\ninterface Recycling {\nid: number;\n  type: string;\n  ubication: string;\n  weight: number;\n  pricePound: number;\n  observations: string;\n  chats: [];\n  available: boolean;\n}\n\nexport const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n//const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n\nconst Table = () => {\n  const { account } = useWallet();\n  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n  const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n\n  useEffect(() => {\n    if (account) {\n      getRecycling();\n    }\n  }, [account]);\n\n  const getRecycling = async () => {\n    const payload = {\n      function:\n        `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n      functionArguments: [`${account?.address}`],\n    };\n    try {\n      const result: any = await aptos.view({ payload });\n      console.log(\"Resultado de reciclajes:\", result[0]);\n\n      if (Array.isArray(result) && result.length > 0) {\n        const extractedRecyclings: Recycling[][] = result.map(\n          (recyclingArray: any[]) =>\n            recyclingArray.map((recycling: any) => ({\n              owner: recycling.owner,\n              type: recycling.type || \"N/A\",\n              ubication: recycling.ubication || \"N/A\",\n              weight: recycling.weight || 0,\n              pricePound: recycling.pricePound || 0,\n              observations: recycling.observations || \"N/A\",\n              chats: recycling.chats || [],\n              available: recycling.available || false,\n            }))\n        );\n\n        setRecyclings(extractedRecyclings);\n      } else {\n        console.error(\"No se encontraron reciclajes\");\n      }\n    } catch (error) {\n      console.error(\"Error al obtener reciclajes:\", error);\n    }\n  };\n\n  const handleRowClick = (recycling: Recycling) => {\n    setSelectedRecycling(recycling);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedRecycling(null);\n  };\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"w-full max-w-3xl\">\n        {recyclings.length > 0 && (\n          <table className=\"min-w-full bg-white border border-gray-200\">\n            <thead className=\"bg-blue-500 text-white\">\n              <tr>\n                <th className=\"px-4 py-2 border\">Type</th>\n                <th className=\"px-4 py-2 border\">Ubication</th>\n                <th className=\"px-4 py-2 border\">Weight</th>\n                <th className=\"px-4 py-2 border\">Price Per Pound</th>\n                <th className=\"px-4 py-2 border\">Observations</th>\n                <th className=\"px-4 py-2 border\">Available</th>\n              </tr>\n            </thead>\n            <tbody>\n              {recyclings.flatMap((recyclingArray, index) =>\n                recyclingArray.map((recycling, subIndex) => (\n                  <tr \n                    key={`${index}-${subIndex}`} \n                    onClick={() => handleRowClick(recycling)} \n                    className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n                  >\n                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n                  </tr>\n                ))\n              )}\n              {recyclings.length === 0 && (\n                <tr>\n                  <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        )}\n        \n        {selectedRecycling && (\n          <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n            <div className=\" bg-white rounded-lg p-6 w-96 max-w-lg md:max-w-xl lg:max-w-2xl\">\n              <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n              <p><strong>Type:</strong> {selectedRecycling.type}</p>\n              <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n              <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n              <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n              <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n              <div className=\"flex justify-center mt-4 space-x-4\">\n              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n"
        }
    ]
}