{
    "sourceFile": "src/components/buy.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1728957843458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728957932425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n const CONTRACT_ADDRESS = \"0x1\";\n const ADDRESS =\n   \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n   \n-const index = (({ totalPrice })) => {\n+const index = () => {\n   const { signAndSubmitTransaction, account } = useWallet();\n \n   const transfer = async () => {\n     if (!account) {\n"
                },
                {
                    "date": 1728957940090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n         function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n         typeArguments: [], // Si tu función usa argumentos de tipo\n         functionArguments: [\n           ADDRESS, // Dirección del destinatario\n-          totalPrice, // Cantidad de monedas a transferir\n         ],\n       },\n     });\n     try {\n"
                },
                {
                    "date": 1728958178106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,15 @@\n \n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n-const ADDRESS =\n-  \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n+const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n+\n+interface BuyProps {\n+    totalPrice: number; // Define el tipo de totalPrice\n+  }\n   \n-const index = () => {\n+  const buy: React.FC<BuyProps> = ({ totalPrice }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n \n   const transfer = async () => {\n     if (!account) {\n@@ -27,8 +30,9 @@\n         function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n         typeArguments: [], // Si tu función usa argumentos de tipo\n         functionArguments: [\n           ADDRESS, // Dirección del destinatario\n+          totalPrice, // Monto a transferir\n         ],\n       },\n     });\n     try {\n@@ -48,5 +52,5 @@\n     </div>\n   );\n };\n \n-export default index;\n+export default buy;\n"
                },
                {
                    "date": 1728958936815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React from \"react\";\n import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+import { useState } from \"react\";\n \n //Crear la direccion de los recursos, mediante contrato inteligente, en esta direccion estan los recursos de aptos la moneda\n const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n //Donde se almacenan los recursos de la moneda\n@@ -17,8 +18,9 @@\n   }\n   \n   const buy: React.FC<BuyProps> = ({ totalPrice }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n+  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n \n   const transfer = async () => {\n     if (!account) {\n       console.error(\"No se ha conectado una cuenta\");\n@@ -36,12 +38,16 @@\n       },\n     });\n     try {\n       await aptos.waitForTransaction({ transactionHash: response.hash });\n+      setSuccessMessage(\"La compra y el pago se realizaron con éxito!\");\n     } catch (error) {\n       console.error(\"Error al esperar la transacción:\", error);\n     }\n   };\n+  const closeMessage = () => {\n+    setSuccessMessage(null);\n+  };\n \n   return (\n     <div>\n        <button onClick={transfer}\n"
                },
                {
                    "date": 1728959025990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,20 @@\n         className=\"bg-orange-500 text-white px-4 py-2 rounded-md flex items-center space-x-1 text-sm hover:bg-blue-600 transition-colors\"\n       >\n         Buy\n       </button>\n+      {successMessage && (\n+        <div className=\"fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50\">\n+          <div className=\"bg-white rounded-lg shadow-lg w-full max-w-sm p-6 relative\">\n+            <h2 className=\"text-xl font-bold text-center\">{successMessage}</h2>\n+            <button\n+              onClick={closeMessage}\n+              className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-600\"\n+            >\n+              ✖\n+            </button>\n+          </div>\n+          </div>\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1728959227942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,63 @@\n-import React from \"react\";\n-import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n+import React, { useState } from \"react\";\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n-import { useState } from \"react\";\n \n-//Crear la direccion de los recursos, mediante contrato inteligente, en esta direccion estan los recursos de aptos la moneda\n+// Crear la dirección de los recursos, mediante contrato inteligente\n const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n-//Donde se almacenan los recursos de la moneda\n const COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n \n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n-    totalPrice: number; // Define el tipo de totalPrice\n-  }\n-  \n-  const buy: React.FC<BuyProps> = ({ totalPrice }) => {\n+  totalPrice: number; // Define el tipo de totalPrice\n+}\n+\n+const Buy: React.FC<BuyProps> = ({ totalPrice }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n   const [successMessage, setSuccessMessage] = useState<string | null>(null);\n \n   const transfer = async () => {\n     if (!account) {\n       console.error(\"No se ha conectado una cuenta\");\n       return;\n     }\n-    const response = await signAndSubmitTransaction({\n-      sender: account?.address, // Tu wallet que firma la transacción\n-      data: {\n-        function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n-        typeArguments: [], // Si tu función usa argumentos de tipo\n-        functionArguments: [\n-          ADDRESS, // Dirección del destinatario\n-          totalPrice, // Monto a transferir\n-        ],\n-      },\n-    });\n     try {\n+      const response = await signAndSubmitTransaction({\n+        sender: account?.address, // Tu wallet que firma la transacción\n+        data: {\n+          function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n+          typeArguments: [], // Si tu función usa argumentos de tipo\n+          functionArguments: [\n+            ADDRESS, // Dirección del destinatario\n+            totalPrice, // Monto a transferir\n+          ],\n+        },\n+      });\n+\n       await aptos.waitForTransaction({ transactionHash: response.hash });\n       setSuccessMessage(\"La compra y el pago se realizaron con éxito!\");\n     } catch (error) {\n-      console.error(\"Error al esperar la transacción:\", error);\n+      console.error(\"Error al realizar la transacción:\", error);\n     }\n   };\n+\n   const closeMessage = () => {\n     setSuccessMessage(null);\n   };\n \n   return (\n     <div>\n-       <button onClick={transfer}\n+      <button\n+        onClick={transfer}\n         className=\"bg-orange-500 text-white px-4 py-2 rounded-md flex items-center space-x-1 text-sm hover:bg-blue-600 transition-colors\"\n       >\n         Buy\n       </button>\n+\n       {successMessage && (\n         <div className=\"fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50\">\n           <div className=\"bg-white rounded-lg shadow-lg w-full max-w-sm p-6 relative\">\n             <h2 className=\"text-xl font-bold text-center\">{successMessage}</h2>\n@@ -65,10 +67,12 @@\n             >\n               ✖\n             </button>\n           </div>\n-          </div>\n+        </div>\n+      )}\n     </div>\n   );\n };\n \n-export default buy;\n+export default Buy;\n+\n"
                },
                {
                    "date": 1728959246122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,8 @@\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n // Crear la dirección de los recursos, mediante contrato inteligente\n-const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n-const COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n \n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n"
                },
                {
                    "date": 1728961958539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,18 @@\n const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n   totalPrice: number; // Define el tipo de totalPrice\n+  recycling: {\n+    type: string;\n+    ubication: string;\n+    weight: number;\n+    pricePound: number;\n+    totalPrice: number;\n+    available: boolean;\n }\n+onBuySuccess: (recycling: any) => Promise<void>;\n+}\n \n const Buy: React.FC<BuyProps> = ({ totalPrice }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n   const [successMessage, setSuccessMessage] = useState<string | null>(null);\n"
                },
                {
                    "date": 1728962105435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n \n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n-const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n+const ADDRESS =\n+  \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n   totalPrice: number; // Define el tipo de totalPrice\n   recycling: {\n@@ -17,13 +18,13 @@\n     weight: number;\n     pricePound: number;\n     totalPrice: number;\n     available: boolean;\n+  };\n+  onBuySuccess: (recycling: any) => Promise<void>;\n }\n-onBuySuccess: (recycling: any) => Promise<void>;\n-}\n \n-const Buy: React.FC<BuyProps> = ({ totalPrice }) => {\n+const Buy: React.FC<BuyProps> = ({ totalPrice, recycling, onBuySuccess }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n   const [successMessage, setSuccessMessage] = useState<string | null>(null);\n \n   const transfer = async () => {\n@@ -39,14 +40,16 @@\n           typeArguments: [], // Si tu función usa argumentos de tipo\n           functionArguments: [\n             ADDRESS, // Dirección del destinatario\n             totalPrice, // Monto a transferir\n+            recycling.ubication\n           ],\n         },\n       });\n \n       await aptos.waitForTransaction({ transactionHash: response.hash });\n       setSuccessMessage(\"La compra y el pago se realizaron con éxito!\");\n+      await onBuySuccess(recycling); // Llama a la función onBuySuccess\n     } catch (error) {\n       console.error(\"Error al realizar la transacción:\", error);\n     }\n   };\n@@ -81,5 +84,4 @@\n   );\n };\n \n export default Buy;\n-\n"
                },
                {
                    "date": 1728962254026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,28 @@\n import React, { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n-// Crear la dirección de los recursos, mediante contrato inteligente\n-\n+// Configuración del contrato inteligente\n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n const ADDRESS =\n   \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n-  totalPrice: number; // Define el tipo de totalPrice\n   recycling: {\n     type: string;\n     ubication: string;\n     weight: number;\n     pricePound: number;\n-    totalPrice: number;\n+    totalPrice: number; // Se utiliza directamente de recycling\n     available: boolean;\n   };\n   onBuySuccess: (recycling: any) => Promise<void>;\n }\n \n-const Buy: React.FC<BuyProps> = ({ totalPrice, recycling, onBuySuccess }) => {\n+const Buy: React.FC<BuyProps> = ({ recycling, onBuySuccess }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n   const [successMessage, setSuccessMessage] = useState<string | null>(null);\n \n   const transfer = async () => {\n@@ -39,16 +37,16 @@\n           function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n           typeArguments: [], // Si tu función usa argumentos de tipo\n           functionArguments: [\n             ADDRESS, // Dirección del destinatario\n-            totalPrice, // Monto a transferir\n-            recycling.ubication\n+            recycling.totalPrice, // Monto a transferir\n+            recycling.ubication, // Argumento adicional de reciclaje\n           ],\n         },\n       });\n \n       await aptos.waitForTransaction({ transactionHash: response.hash });\n-      setSuccessMessage(\"La compra y el pago se realizaron con éxito!\");\n+      setSuccessMessage(\"¡La compra y el pago se realizaron con éxito!\");\n       await onBuySuccess(recycling); // Llama a la función onBuySuccess\n     } catch (error) {\n       console.error(\"Error al realizar la transacción:\", error);\n     }\n"
                },
                {
                    "date": 1728962721166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n           typeArguments: [], // Si tu función usa argumentos de tipo\n           functionArguments: [\n             ADDRESS, // Dirección del destinatario\n             recycling.totalPrice, // Monto a transferir\n-            recycling.ubication, // Argumento adicional de reciclaje\n+            //recycling.ubication, // Argumento adicional de reciclaje\n           ],\n         },\n       });\n \n"
                },
                {
                    "date": 1728963421232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n   recycling: {\n+    id: number;\n     type: string;\n     ubication: string;\n     weight: number;\n     pricePound: number;\n"
                },
                {
                    "date": 1728964711530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \n interface BuyProps {\n   recycling: {\n     id: number;\n+    owner: string;\n     type: string;\n     ubication: string;\n     weight: number;\n     pricePound: number;\n"
                },
                {
                    "date": 1728965073559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,9 @@\n // Configuración del contrato inteligente\n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n-const ADDRESS =\n-  \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n+const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n   recycling: {\n     id: number;\n@@ -19,9 +18,9 @@\n     pricePound: number;\n     totalPrice: number; // Se utiliza directamente de recycling\n     available: boolean;\n   };\n-  onBuySuccess: (recycling: any) => Promise<void>;\n+  onBuySuccess: (recyclingId: number) => Promise<void>;\n }\n \n const Buy: React.FC<BuyProps> = ({ recycling, onBuySuccess }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n@@ -47,9 +46,9 @@\n       });\n \n       await aptos.waitForTransaction({ transactionHash: response.hash });\n       setSuccessMessage(\"¡La compra y el pago se realizaron con éxito!\");\n-      await onBuySuccess(recycling); // Llama a la función onBuySuccess\n+      await onBuySuccess(recycling.id); // Llama a la función onBuySuccess\n     } catch (error) {\n       console.error(\"Error al realizar la transacción:\", error);\n     }\n   };\n"
                },
                {
                    "date": 1728966217136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n   };\n   onBuySuccess: (recyclingId: number) => Promise<void>;\n }\n \n+\n const Buy: React.FC<BuyProps> = ({ recycling, onBuySuccess }) => {\n   const { signAndSubmitTransaction, account } = useWallet();\n   const [successMessage, setSuccessMessage] = useState<string | null>(null);\n \n@@ -44,8 +45,10 @@\n           ],\n         },\n       });\n \n+      \n+\n       await aptos.waitForTransaction({ transactionHash: response.hash });\n       setSuccessMessage(\"¡La compra y el pago se realizaron con éxito!\");\n       await onBuySuccess(recycling.id); // Llama a la función onBuySuccess\n     } catch (error) {\n@@ -56,16 +59,44 @@\n   const closeMessage = () => {\n     setSuccessMessage(null);\n   };\n \n+  const handleBuySuccess = async (recyclingId: number) => {\n+    try {\n+      // Realiza la transacción\n+      const response = await signAndSubmitTransaction({\n+        sender: account?.address,\n+        data: {\n+          function: `${ADDRESS}::recicly::change_available`,\n+          typeArguments: [],\n+          functionArguments: [account?.address, recyclingId, false],\n+        },\n+      });\n+\n+      await aptos.waitForTransaction({ transactionHash: response.hash });\n+      alert(\"Compra exitosa!\");\n+\n+      // Marca el reciclaje como no disponible y actualiza el estado\n+     setRecyclings((prevRecyclings) =>\n+        prevRecyclings.map((r) =>\n+          r.id === recyclingId ? { ...r, available: false } : r\n+        )\n+      );\n+      setSelectedRecycling(null); // Cierra el modal después de la compra\n+    } catch (error) {\n+      console.error(\"Error en la transacción:\", error);\n+    }\n+  };\n   return (\n     <div>\n       <button\n         onClick={transfer}\n+        onBuySuccess={handleBuySuccess}\n         className=\"bg-orange-500 text-white px-4 py-2 rounded-md flex items-center space-x-1 text-sm hover:bg-blue-600 transition-colors\"\n       >\n         Buy\n       </button>\n+      \n \n       {successMessage && (\n         <div className=\"fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50\">\n           <div className=\"bg-white rounded-lg shadow-lg w-full max-w-sm p-6 relative\">\n"
                },
                {
                    "date": 1728966460459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,8 @@\n           ],\n         },\n       });\n \n-      \n-\n       await aptos.waitForTransaction({ transactionHash: response.hash });\n       setSuccessMessage(\"¡La compra y el pago se realizaron con éxito!\");\n       await onBuySuccess(recycling.id); // Llama a la función onBuySuccess\n     } catch (error) {\n@@ -59,44 +57,17 @@\n   const closeMessage = () => {\n     setSuccessMessage(null);\n   };\n \n-  const handleBuySuccess = async (recyclingId: number) => {\n-    try {\n-      // Realiza la transacción\n-      const response = await signAndSubmitTransaction({\n-        sender: account?.address,\n-        data: {\n-          function: `${ADDRESS}::recicly::change_available`,\n-          typeArguments: [],\n-          functionArguments: [account?.address, recyclingId, false],\n-        },\n-      });\n \n-      await aptos.waitForTransaction({ transactionHash: response.hash });\n-      alert(\"Compra exitosa!\");\n-\n-      // Marca el reciclaje como no disponible y actualiza el estado\n-     setRecyclings((prevRecyclings) =>\n-        prevRecyclings.map((r) =>\n-          r.id === recyclingId ? { ...r, available: false } : r\n-        )\n-      );\n-      setSelectedRecycling(null); // Cierra el modal después de la compra\n-    } catch (error) {\n-      console.error(\"Error en la transacción:\", error);\n-    }\n-  };\n   return (\n     <div>\n       <button\n         onClick={transfer}\n-        onBuySuccess={handleBuySuccess}\n         className=\"bg-orange-500 text-white px-4 py-2 rounded-md flex items-center space-x-1 text-sm hover:bg-blue-600 transition-colors\"\n       >\n         Buy\n       </button>\n-      \n \n       {successMessage && (\n         <div className=\"fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50\">\n           <div className=\"bg-white rounded-lg shadow-lg w-full max-w-sm p-6 relative\">\n"
                },
                {
                    "date": 1729047561216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n // Configuración del contrato inteligente\n const config = new AptosConfig({ network: Network.TESTNET });\n const aptos = new Aptos(config);\n const CONTRACT_ADDRESS = \"0x1\";\n-const ADDRESS = \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n \n interface BuyProps {\n   recycling: {\n     id: number;\n@@ -38,9 +37,9 @@\n         data: {\n           function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n           typeArguments: [], // Si tu función usa argumentos de tipo\n           functionArguments: [\n-            ADDRESS, // Dirección del destinatario\n+            recycling.owner, // Dirección del destinatario\n             recycling.totalPrice, // Monto a transferir\n             //recycling.ubication, // Argumento adicional de reciclaje\n           ],\n         },\n"
                }
            ],
            "date": 1728957843458,
            "name": "Commit-0",
            "content": "import React from \"react\";\nimport { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\nimport { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n\n//Crear la direccion de los recursos, mediante contrato inteligente, en esta direccion estan los recursos de aptos la moneda\nconst APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n//Donde se almacenan los recursos de la moneda\nconst COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n\nconst config = new AptosConfig({ network: Network.TESTNET });\nconst aptos = new Aptos(config);\nconst CONTRACT_ADDRESS = \"0x1\";\nconst ADDRESS =\n  \"0xf6dedb75631e78abc7efaf29ded3a5c5d44f0c017168aa9155e41ee3c271cb8c\";\n  \nconst index = (({ totalPrice })) => {\n  const { signAndSubmitTransaction, account } = useWallet();\n\n  const transfer = async () => {\n    if (!account) {\n      console.error(\"No se ha conectado una cuenta\");\n      return;\n    }\n    const response = await signAndSubmitTransaction({\n      sender: account?.address, // Tu wallet que firma la transacción\n      data: {\n        function: `${CONTRACT_ADDRESS}::aptos_account::transfer`, // Función de tu contrato inteligente\n        typeArguments: [], // Si tu función usa argumentos de tipo\n        functionArguments: [\n          ADDRESS, // Dirección del destinatario\n          totalPrice, // Cantidad de monedas a transferir\n        ],\n      },\n    });\n    try {\n      await aptos.waitForTransaction({ transactionHash: response.hash });\n    } catch (error) {\n      console.error(\"Error al esperar la transacción:\", error);\n    }\n  };\n\n  return (\n    <div>\n       <button onClick={transfer}\n        className=\"bg-orange-500 text-white px-4 py-2 rounded-md flex items-center space-x-1 text-sm hover:bg-blue-600 transition-colors\"\n      >\n        Buy\n      </button>\n    </div>\n  );\n};\n\nexport default index;\n"
        }
    ]
}