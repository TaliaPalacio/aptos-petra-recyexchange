{
    "sourceFile": "src/components/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 81,
            "patches": [
                {
                    "date": 1728535723510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728536378721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,5 +310,5 @@\n     );\n   }\n };\n \n-export default table;\n+export default table, DataTableDemo, Payment, columns;\n"
                },
                {
                    "date": 1728536576041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n       },\n     },\n   ];\n \n-  export function DataTableDemo() {\n+  const DataTableDemo =() {\n     const [sorting, setSorting] = React.useState<SortingState>([]);\n     const [columnFilters, setColumnFilters] =\n       React.useState<ColumnFiltersState>([]);\n     const [columnVisibility, setColumnVisibility] =\n@@ -310,5 +310,5 @@\n     );\n   }\n };\n \n-export default table, DataTableDemo, Payment, columns;\n+export default table;\n"
                },
                {
                    "date": 1728536586836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n       },\n     },\n   ];\n \n-  const DataTableDemo =() {\n+  const DataTableDemo =() => {\n     const [sorting, setSorting] = React.useState<SortingState>([]);\n     const [columnFilters, setColumnFilters] =\n       React.useState<ColumnFiltersState>([]);\n     const [columnVisibility, setColumnVisibility] =\n"
                },
                {
                    "date": 1728536600807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n     email: string;\n   };\n \n-  export const columns: ColumnDef<Payment>[] = [\n+  const columns: ColumnDef<Payment>[] = [\n     {\n       id: \"select\",\n       header: ({ table }) => (\n         <Checkbox\n"
                },
                {
                    "date": 1728536934303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,15 @@\n     TableHead,\n     TableHeader,\n     TableRow,\n   } from \"@/components/ui/table\";\n+export type Payment = {\n+  id: string;\n+  amount: number;\n+  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n+  email: string;\n+};\n+\n const table = () => {\n   const data: Payment[] = [\n     {\n       id: \"m5gr84i9\",\n@@ -66,15 +73,8 @@\n       email: \"carmella@hotmail.com\",\n     },\n   ];\n \n-  export type Payment = {\n-    id: string;\n-    amount: number;\n-    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n-    email: string;\n-  };\n-\n   const columns: ColumnDef<Payment>[] = [\n     {\n       id: \"select\",\n       header: ({ table }) => (\n"
                },
                {
                    "date": 1728537631029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,314 +1,312 @@\n+\"use client\"\n \n-import * as React from \"react\";\n+import * as React from \"react\"\n import {\n-    ColumnDef,\n-    ColumnFiltersState,\n-    SortingState,\n-    VisibilityState,\n-    flexRender,\n-    getCoreRowModel,\n-    getFilteredRowModel,\n-    getPaginationRowModel,\n-    getSortedRowModel,\n-    useReactTable,\n-  } from \"@tanstack/react-table\";\n-  import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n-  import { Button } from \"@/components/ui/button\";\n-  import { Checkbox } from \"@/components/ui/checkbox\";\n-  import {\n-    DropdownMenu,\n-    DropdownMenuCheckboxItem,\n-    DropdownMenuContent,\n-    DropdownMenuItem,\n-    DropdownMenuLabel,\n-    DropdownMenuSeparator,\n-    DropdownMenuTrigger,\n-  } from \"@/components/ui/dropdown-menu\";\n-  import { Input } from \"@/components/ui/input\";\n-  import {\n-    Table,\n-    TableBody,\n-    TableCell,\n-    TableHead,\n-    TableHeader,\n-    TableRow,\n-  } from \"@/components/ui/table\";\n+  ColumnDef,\n+  ColumnFiltersState,\n+  SortingState,\n+  VisibilityState,\n+  flexRender,\n+  getCoreRowModel,\n+  getFilteredRowModel,\n+  getPaginationRowModel,\n+  getSortedRowModel,\n+  useReactTable,\n+} from \"@tanstack/react-table\"\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n+\n+import { Button } from \"@/components/ui/button\"\n+import { Checkbox } from \"@/components/ui/checkbox\"\n+import {\n+  DropdownMenu,\n+  DropdownMenuCheckboxItem,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuLabel,\n+  DropdownMenuSeparator,\n+  DropdownMenuTrigger,\n+} from \"@/components/ui/dropdown-menu\"\n+import { Input } from \"@/components/ui/input\"\n+import {\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableHeader,\n+  TableRow,\n+} from \"@/components/ui/table\"\n+\n+const data: Payment[] = [\n+  {\n+    id: \"m5gr84i9\",\n+    amount: 316,\n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n+  },\n+  {\n+    id: \"3u1reuv4\",\n+    amount: 242,\n+    status: \"success\",\n+    email: \"Abe45@gmail.com\",\n+  },\n+  {\n+    id: \"derv1ws0\",\n+    amount: 837,\n+    status: \"processing\",\n+    email: \"Monserrat44@gmail.com\",\n+  },\n+  {\n+    id: \"5kma53ae\",\n+    amount: 874,\n+    status: \"success\",\n+    email: \"Silas22@gmail.com\",\n+  },\n+  {\n+    id: \"bhqecj4p\",\n+    amount: 721,\n+    status: \"failed\",\n+    email: \"carmella@hotmail.com\",\n+  },\n+]\n+\n export type Payment = {\n-  id: string;\n-  amount: number;\n-  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n-  email: string;\n-};\n+  id: string\n+  amount: number\n+  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n+  email: string\n+}\n \n-const table = () => {\n-  const data: Payment[] = [\n-    {\n-      id: \"m5gr84i9\",\n-      amount: 316,\n-      status: \"success\",\n-      email: \"ken99@yahoo.com\",\n+export const columns: ColumnDef<Payment>[] = [\n+  {\n+    id: \"select\",\n+    header: ({ table }) => (\n+      <Checkbox\n+        checked={\n+          table.getIsAllPageRowsSelected() ||\n+          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n+        }\n+        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n+        aria-label=\"Select all\"\n+      />\n+    ),\n+    cell: ({ row }) => (\n+      <Checkbox\n+        checked={row.getIsSelected()}\n+        onCheckedChange={(value) => row.toggleSelected(!!value)}\n+        aria-label=\"Select row\"\n+      />\n+    ),\n+    enableSorting: false,\n+    enableHiding: false,\n+  },\n+  {\n+    accessorKey: \"status\",\n+    header: \"Status\",\n+    cell: ({ row }) => (\n+      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n+    ),\n+  },\n+  {\n+    accessorKey: \"email\",\n+    header: ({ column }) => {\n+      return (\n+        <Button\n+          variant=\"ghost\"\n+          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n+        >\n+          Email\n+          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n+        </Button>\n+      )\n     },\n-    {\n-      id: \"3u1reuv4\",\n-      amount: 242,\n-      status: \"success\",\n-      email: \"Abe45@gmail.com\",\n-    },\n-    {\n-      id: \"derv1ws0\",\n-      amount: 837,\n-      status: \"processing\",\n-      email: \"Monserrat44@gmail.com\",\n-    },\n-    {\n-      id: \"5kma53ae\",\n-      amount: 874,\n-      status: \"success\",\n-      email: \"Silas22@gmail.com\",\n-    },\n-    {\n-      id: \"bhqecj4p\",\n-      amount: 721,\n-      status: \"failed\",\n-      email: \"carmella@hotmail.com\",\n-    },\n-  ];\n+    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n+  },\n+  {\n+    accessorKey: \"amount\",\n+    header: () => <div className=\"text-right\">Amount</div>,\n+    cell: ({ row }) => {\n+      const amount = parseFloat(row.getValue(\"amount\"))\n \n-  const columns: ColumnDef<Payment>[] = [\n-    {\n-      id: \"select\",\n-      header: ({ table }) => (\n-        <Checkbox\n-          checked={\n-            table.getIsAllPageRowsSelected() ||\n-            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n-          }\n-          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n-          aria-label=\"Select all\"\n-        />\n-      ),\n-      cell: ({ row }) => (\n-        <Checkbox\n-          checked={row.getIsSelected()}\n-          onCheckedChange={(value) => row.toggleSelected(!!value)}\n-          aria-label=\"Select row\"\n-        />\n-      ),\n-      enableSorting: false,\n-      enableHiding: false,\n-    },\n-    {\n-      accessorKey: \"status\",\n-      header: \"Status\",\n-      cell: ({ row }) => (\n-        <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n-      ),\n-    },\n-    {\n-      accessorKey: \"email\",\n-      header: ({ column }) => {\n-        return (\n-          <Button\n-            variant=\"ghost\"\n-            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n-          >\n-            Email\n-            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n-          </Button>\n-        );\n-      },\n-      cell: ({ row }) => (\n-        <div className=\"lowercase\">{row.getValue(\"email\")}</div>\n-      ),\n-    },\n-    {\n-      accessorKey: \"amount\",\n-      header: () => <div className=\"text-right\">Amount</div>,\n-      cell: ({ row }) => {\n-        const amount = parseFloat(row.getValue(\"amount\"));\n+      // Format the amount as a dollar amount\n+      const formatted = new Intl.NumberFormat(\"en-US\", {\n+        style: \"currency\",\n+        currency: \"USD\",\n+      }).format(amount)\n \n-        // Format the amount as a dollar amount\n-        const formatted = new Intl.NumberFormat(\"en-US\", {\n-          style: \"currency\",\n-          currency: \"USD\",\n-        }).format(amount);\n-\n-        return <div className=\"text-right font-medium\">{formatted}</div>;\n-      },\n+      return <div className=\"text-right font-medium\">{formatted}</div>\n     },\n-    {\n-      id: \"actions\",\n-      enableHiding: false,\n-      cell: ({ row }) => {\n-        const payment = row.original;\n+  },\n+  {\n+    id: \"actions\",\n+    enableHiding: false,\n+    cell: ({ row }) => {\n+      const payment = row.original\n \n-        return (\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-                <span className=\"sr-only\">Open menu</span>\n-                <MoreHorizontal className=\"h-4 w-4\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-            <DropdownMenuContent align=\"end\">\n-              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-              <DropdownMenuItem\n-                onClick={() => navigator.clipboard.writeText(payment.id)}\n-              >\n-                Copy payment ID\n-              </DropdownMenuItem>\n-              <DropdownMenuSeparator />\n-              <DropdownMenuItem>View customer</DropdownMenuItem>\n-              <DropdownMenuItem>View payment details</DropdownMenuItem>\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        );\n-      },\n+      return (\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n+              <span className=\"sr-only\">Open menu</span>\n+              <MoreHorizontal className=\"h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n+            <DropdownMenuItem\n+              onClick={() => navigator.clipboard.writeText(payment.id)}\n+            >\n+              Copy payment ID\n+            </DropdownMenuItem>\n+            <DropdownMenuSeparator />\n+            <DropdownMenuItem>View customer</DropdownMenuItem>\n+            <DropdownMenuItem>View payment details</DropdownMenuItem>\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      )\n     },\n-  ];\n+  },\n+]\n \n-  const DataTableDemo =() => {\n-    const [sorting, setSorting] = React.useState<SortingState>([]);\n-    const [columnFilters, setColumnFilters] =\n-      React.useState<ColumnFiltersState>([]);\n-    const [columnVisibility, setColumnVisibility] =\n-      React.useState<VisibilityState>({});\n-    const [rowSelection, setRowSelection] = React.useState({});\n+export function DataTableDemo() {\n+  const [sorting, setSorting] = React.useState<SortingState>([])\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n+    []\n+  )\n+  const [columnVisibility, setColumnVisibility] =\n+    React.useState<VisibilityState>({})\n+  const [rowSelection, setRowSelection] = React.useState({})\n \n-    const table = useReactTable({\n-      data,\n-      columns,\n-      onSortingChange: setSorting,\n-      onColumnFiltersChange: setColumnFilters,\n-      getCoreRowModel: getCoreRowModel(),\n-      getPaginationRowModel: getPaginationRowModel(),\n-      getSortedRowModel: getSortedRowModel(),\n-      getFilteredRowModel: getFilteredRowModel(),\n-      onColumnVisibilityChange: setColumnVisibility,\n-      onRowSelectionChange: setRowSelection,\n-      state: {\n-        sorting,\n-        columnFilters,\n-        columnVisibility,\n-        rowSelection,\n-      },\n-    });\n+  const table = useReactTable({\n+    data,\n+    columns,\n+    onSortingChange: setSorting,\n+    onColumnFiltersChange: setColumnFilters,\n+    getCoreRowModel: getCoreRowModel(),\n+    getPaginationRowModel: getPaginationRowModel(),\n+    getSortedRowModel: getSortedRowModel(),\n+    getFilteredRowModel: getFilteredRowModel(),\n+    onColumnVisibilityChange: setColumnVisibility,\n+    onRowSelectionChange: setRowSelection,\n+    state: {\n+      sorting,\n+      columnFilters,\n+      columnVisibility,\n+      rowSelection,\n+    },\n+  })\n \n-    return (\n-      <div className=\"w-full\">\n-        <div className=\"flex items-center py-4\">\n-          <Input\n-            placeholder=\"Filter emails...\"\n-            value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n-            onChange={(event) =>\n-              table.getColumn(\"email\")?.setFilterValue(event.target.value)\n-            }\n-            className=\"max-w-sm\"\n-          />\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-              <Button variant=\"outline\" className=\"ml-auto\">\n-                Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-            <DropdownMenuContent align=\"end\">\n-              {table\n-                .getAllColumns()\n-                .filter((column) => column.getCanHide())\n-                .map((column) => {\n+  return (\n+    <div className=\"w-full\">\n+      <div className=\"flex items-center py-4\">\n+        <Input\n+          placeholder=\"Filter emails...\"\n+          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n+          onChange={(event) =>\n+            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n+          }\n+          className=\"max-w-sm\"\n+        />\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"outline\" className=\"ml-auto\">\n+              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            {table\n+              .getAllColumns()\n+              .filter((column) => column.getCanHide())\n+              .map((column) => {\n+                return (\n+                  <DropdownMenuCheckboxItem\n+                    key={column.id}\n+                    className=\"capitalize\"\n+                    checked={column.getIsVisible()}\n+                    onCheckedChange={(value) =>\n+                      column.toggleVisibility(!!value)\n+                    }\n+                  >\n+                    {column.id}\n+                  </DropdownMenuCheckboxItem>\n+                )\n+              })}\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      </div>\n+      <div className=\"rounded-md border\">\n+        <Table>\n+          <TableHeader>\n+            {table.getHeaderGroups().map((headerGroup) => (\n+              <TableRow key={headerGroup.id}>\n+                {headerGroup.headers.map((header) => {\n                   return (\n-                    <DropdownMenuCheckboxItem\n-                      key={column.id}\n-                      className=\"capitalize\"\n-                      checked={column.getIsVisible()}\n-                      onCheckedChange={(value) =>\n-                        column.toggleVisibility(!!value)\n-                      }\n-                    >\n-                      {column.id}\n-                    </DropdownMenuCheckboxItem>\n-                  );\n+                    <TableHead key={header.id}>\n+                      {header.isPlaceholder\n+                        ? null\n+                        : flexRender(\n+                            header.column.columnDef.header,\n+                            header.getContext()\n+                          )}\n+                    </TableHead>\n+                  )\n                 })}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-        <div className=\"rounded-md border\">\n-          <Table>\n-            <TableHeader>\n-              {table.getHeaderGroups().map((headerGroup) => (\n-                <TableRow key={headerGroup.id}>\n-                  {headerGroup.headers.map((header) => {\n-                    return (\n-                      <TableHead key={header.id}>\n-                        {header.isPlaceholder\n-                          ? null\n-                          : flexRender(\n-                              header.column.columnDef.header,\n-                              header.getContext()\n-                            )}\n-                      </TableHead>\n-                    );\n-                  })}\n+              </TableRow>\n+            ))}\n+          </TableHeader>\n+          <TableBody>\n+            {table.getRowModel().rows?.length ? (\n+              table.getRowModel().rows.map((row) => (\n+                <TableRow\n+                  key={row.id}\n+                  data-state={row.getIsSelected() && \"selected\"}\n+                >\n+                  {row.getVisibleCells().map((cell) => (\n+                    <TableCell key={cell.id}>\n+                      {flexRender(\n+                        cell.column.columnDef.cell,\n+                        cell.getContext()\n+                      )}\n+                    </TableCell>\n+                  ))}\n                 </TableRow>\n-              ))}\n-            </TableHeader>\n-            <TableBody>\n-              {table.getRowModel().rows?.length ? (\n-                table.getRowModel().rows.map((row) => (\n-                  <TableRow\n-                    key={row.id}\n-                    data-state={row.getIsSelected() && \"selected\"}\n-                  >\n-                    {row.getVisibleCells().map((cell) => (\n-                      <TableCell key={cell.id}>\n-                        {flexRender(\n-                          cell.column.columnDef.cell,\n-                          cell.getContext()\n-                        )}\n-                      </TableCell>\n-                    ))}\n-                  </TableRow>\n-                ))\n-              ) : (\n-                <TableRow>\n-                  <TableCell\n-                    colSpan={columns.length}\n-                    className=\"h-24 text-center\"\n-                  >\n-                    No results.\n-                  </TableCell>\n-                </TableRow>\n-              )}\n-            </TableBody>\n-          </Table>\n+              ))\n+            ) : (\n+              <TableRow>\n+                <TableCell\n+                  colSpan={columns.length}\n+                  className=\"h-24 text-center\"\n+                >\n+                  No results.\n+                </TableCell>\n+              </TableRow>\n+            )}\n+          </TableBody>\n+        </Table>\n+      </div>\n+      <div className=\"flex items-center justify-end space-x-2 py-4\">\n+        <div className=\"flex-1 text-sm text-muted-foreground\">\n+          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n+          {table.getFilteredRowModel().rows.length} row(s) selected.\n         </div>\n-        <div className=\"flex items-center justify-end space-x-2 py-4\">\n-          <div className=\"flex-1 text-sm text-muted-foreground\">\n-            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n-            {table.getFilteredRowModel().rows.length} row(s) selected.\n-          </div>\n-          <div className=\"space-x-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => table.previousPage()}\n-              disabled={!table.getCanPreviousPage()}\n-            >\n-              Previous\n-            </Button>\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => table.nextPage()}\n-              disabled={!table.getCanNextPage()}\n-            >\n-              Next\n-            </Button>\n-          </div>\n+        <div className=\"space-x-2\">\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.previousPage()}\n+            disabled={!table.getCanPreviousPage()}\n+          >\n+            Previous\n+          </Button>\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.nextPage()}\n+            disabled={!table.getCanNextPage()}\n+          >\n+            Next\n+          </Button>\n         </div>\n       </div>\n-    );\n-  }\n-};\n-\n-export default table;\n+    </div>\n+  )\n+}\n"
                },
                {
                    "date": 1728539781428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,32 +42,9 @@\n     amount: 316,\n     status: \"success\",\n     email: \"ken99@yahoo.com\",\n   },\n-  {\n-    id: \"3u1reuv4\",\n-    amount: 242,\n-    status: \"success\",\n-    email: \"Abe45@gmail.com\",\n-  },\n-  {\n-    id: \"derv1ws0\",\n-    amount: 837,\n-    status: \"processing\",\n-    email: \"Monserrat44@gmail.com\",\n-  },\n-  {\n-    id: \"5kma53ae\",\n-    amount: 874,\n-    status: \"success\",\n-    email: \"Silas22@gmail.com\",\n-  },\n-  {\n-    id: \"bhqecj4p\",\n-    amount: 721,\n-    status: \"failed\",\n-    email: \"carmella@hotmail.com\",\n-  },\n+  \n ]\n \n export type Payment = {\n   id: string\n"
                },
                {
                    "date": 1728539897688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n+  status: \"Available\" | \"Not available\" |\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728540060359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,13 @@\n \n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n+    type: \"cardboard\",\n+    weigth: 12,\n     amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n+    status: \"Available\",\n+    \n   },\n   \n ]\n \n"
                },
                {
                    "date": 1728540170432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,13 @@\n ]\n \n export type Payment = {\n   id: string\n+  type: string\n+  weigth: number\n   amount: number\n   status: \"Available\" | \"Not available\" |\n-  email: string\n+  \n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n"
                },
                {
                    "date": 1728540400031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,24 +38,20 @@\n \n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n-    type: \"cardboard\",\n-    weigth: 12,\n     amount: 316,\n-    status: \"Available\",\n-    \n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n-  type: string\n-  weigth: number\n   amount: number\n-  status: \"Available\" | \"Not available\" |\n-  \n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n"
                },
                {
                    "date": 1728682656282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\"\n \n import * as React from \"react\"\n import {\n   ColumnDef,\n"
                },
                {
                    "date": 1728774073446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,18 +38,18 @@\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n-    status: \"success\",\n+    status: \"Available\",\n     email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  status: \"Available\" | \"Not available\"\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728774191263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,18 +38,18 @@\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n-    status: \"Available\",\n+    status: \"success\",\n     email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"Available\" | \"Not available\"\n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728776060424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,27 +118,9 @@\n     cell: ({ row }) => {\n       const payment = row.original\n \n       return (\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-              <span className=\"sr-only\">Open menu</span>\n-              <MoreHorizontal className=\"h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-            <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(payment.id)}\n-            >\n-              Copy payment ID\n-            </DropdownMenuItem>\n-            <DropdownMenuSeparator />\n-            <DropdownMenuItem>View customer</DropdownMenuItem>\n-            <DropdownMenuItem>View payment details</DropdownMenuItem>\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n+       <></>\n       )\n     },\n   },\n ]\n"
                },
                {
                    "date": 1728777458298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,15 @@\n   TableHeader,\n   TableRow,\n } from \"@/components/ui/table\"\n \n+import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+\n+\n+export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n+\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n@@ -45,12 +52,15 @@\n   \n ]\n \n export type Payment = {\n-  id: string\n-  amount: number\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n-  email: string\n+  Type: string // Tipo de reciclaje\n+  ubication: string, // Dirección de recolección\n+  weight: number,        // Peso\n+  pricePound : number,         // Precio por libra o lo que sea\n+  observations : string,        // Mensaje opcional del usuario\n+  chats : [],        // Mensajes de chat\n+  available: \"available\"| \"not available\",        // Disponibilidad\n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n@@ -152,8 +162,20 @@\n       rowSelection,\n     },\n   })\n \n+  const {connect, account, connected, disconnect, signAndSubmitTransaction,\n+    signTransaction, signMessage, \n+        signMessageAndVerify} = useWallet();\n+\n+    const getRecycling = async () =>{\n+        const payload = {\n+            function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+            functionArguments: [`${account?.address}`]\n+        }\n+        let result = await aptos.view({payload});\n+        console.log(result[0]);\n+    }\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n"
                },
                {
                    "date": 1728777523810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,19 +41,12 @@\n \n export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n \n-const data: Payment[] = [\n-  {\n-    id: \"m5gr84i9\",\n-    amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n-  },\n-  \n-]\n \n+\n export type Payment = {\n+  id: number,        // ID\n   Type: string // Tipo de reciclaje\n   ubication: string, // Dirección de recolección\n   weight: number,        // Peso\n   pricePound : number,         // Precio por libra o lo que sea\n"
                },
                {
                    "date": 1728777847310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,26 +34,23 @@\n   TableHeader,\n   TableRow,\n } from \"@/components/ui/table\"\n \n-import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+const data: Payment[] = [\n+  {\n+    id: \"m5gr84i9\",\n+    amount: 316,\n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n+  },\n+  \n+]\n \n-\n-export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n-\n-\n-\n export type Payment = {\n-  id: number,        // ID\n-  Type: string // Tipo de reciclaje\n-  ubication: string, // Dirección de recolección\n-  weight: number,        // Peso\n-  pricePound : number,         // Precio por libra o lo que sea\n-  observations : string,        // Mensaje opcional del usuario\n-  chats : [],        // Mensajes de chat\n-  available: \"available\"| \"not available\",        // Disponibilidad\n+  id: string\n+  amount: number\n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n@@ -121,9 +118,27 @@\n     cell: ({ row }) => {\n       const payment = row.original\n \n       return (\n-       <></>\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n+              <span className=\"sr-only\">Open menu</span>\n+              <MoreHorizontal className=\"h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n+            <DropdownMenuItem\n+              onClick={() => navigator.clipboard.writeText(payment.id)}\n+            >\n+              Copy payment ID\n+            </DropdownMenuItem>\n+            <DropdownMenuSeparator />\n+            <DropdownMenuItem>View customer</DropdownMenuItem>\n+            <DropdownMenuItem>View payment details</DropdownMenuItem>\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n       )\n     },\n   },\n ]\n@@ -155,20 +170,8 @@\n       rowSelection,\n     },\n   })\n \n-  const {connect, account, connected, disconnect, signAndSubmitTransaction,\n-    signTransaction, signMessage, \n-        signMessageAndVerify} = useWallet();\n-\n-    const getRecycling = async () =>{\n-        const payload = {\n-            function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n-            functionArguments: [`${account?.address}`]\n-        }\n-        let result = await aptos.view({payload});\n-        console.log(result[0]);\n-    }\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n"
                },
                {
                    "date": 1728777892833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-\n-import * as React from \"react\"\n+import * as React from \"react\";\n import {\n   ColumnDef,\n   ColumnFiltersState,\n   SortingState,\n@@ -10,148 +9,69 @@\n   getFilteredRowModel,\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n-} from \"@tanstack/react-table\"\n-import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n+} from \"@tanstack/react-table\";\n+import { Button } from \"@/components/ui/button\";\n+import { Checkbox } from \"@/components/ui/checkbox\";\n+import { Input } from \"@/components/ui/input\";\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n \n-import { Button } from \"@/components/ui/button\"\n-import { Checkbox } from \"@/components/ui/checkbox\"\n-import {\n-  DropdownMenu,\n-  DropdownMenuCheckboxItem,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuLabel,\n-  DropdownMenuSeparator,\n-  DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\"\n-import { Input } from \"@/components/ui/input\"\n-import {\n-  Table,\n-  TableBody,\n-  TableCell,\n-  TableHead,\n-  TableHeader,\n-  TableRow,\n-} from \"@/components/ui/table\"\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n-const data: Payment[] = [\n-  {\n-    id: \"m5gr84i9\",\n-    amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n-  },\n-  \n-]\n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n-export type Payment = {\n-  id: string\n-  amount: number\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n-  email: string\n-}\n+export type Recycling = {\n+  id: number;\n+  type: string;\n+  ubication: string;\n+  weight: number;\n+  pricePound: number;\n+  observations: string;\n+  available: \"available\" | \"not available\";\n+};\n \n-export const columns: ColumnDef<Payment>[] = [\n+export const columns: ColumnDef<Recycling>[] = [\n   {\n-    id: \"select\",\n-    header: ({ table }) => (\n-      <Checkbox\n-        checked={\n-          table.getIsAllPageRowsSelected() ||\n-          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n-        }\n-        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n-        aria-label=\"Select all\"\n-      />\n-    ),\n-    cell: ({ row }) => (\n-      <Checkbox\n-        checked={row.getIsSelected()}\n-        onCheckedChange={(value) => row.toggleSelected(!!value)}\n-        aria-label=\"Select row\"\n-      />\n-    ),\n-    enableSorting: false,\n-    enableHiding: false,\n+    accessorKey: \"type\",\n+    header: \"Tipo de reciclaje\",\n+    cell: ({ row }) => <div>{row.getValue(\"type\")}</div>,\n   },\n   {\n-    accessorKey: \"status\",\n-    header: \"Status\",\n-    cell: ({ row }) => (\n-      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n-    ),\n+    accessorKey: \"ubication\",\n+    header: \"Ubicación\",\n+    cell: ({ row }) => <div>{row.getValue(\"ubication\")}</div>,\n   },\n   {\n-    accessorKey: \"email\",\n-    header: ({ column }) => {\n-      return (\n-        <Button\n-          variant=\"ghost\"\n-          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n-        >\n-          Email\n-          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n-        </Button>\n-      )\n-    },\n-    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n+    accessorKey: \"weight\",\n+    header: \"Peso\",\n+    cell: ({ row }) => <div>{row.getValue(\"weight\")} kg</div>,\n   },\n   {\n-    accessorKey: \"amount\",\n-    header: () => <div className=\"text-right\">Amount</div>,\n-    cell: ({ row }) => {\n-      const amount = parseFloat(row.getValue(\"amount\"))\n-\n-      // Format the amount as a dollar amount\n-      const formatted = new Intl.NumberFormat(\"en-US\", {\n-        style: \"currency\",\n-        currency: \"USD\",\n-      }).format(amount)\n-\n-      return <div className=\"text-right font-medium\">{formatted}</div>\n-    },\n+    accessorKey: \"pricePound\",\n+    header: \"Precio por libra\",\n+    cell: ({ row }) => <div>${row.getValue(\"pricePound\")}</div>,\n   },\n   {\n-    id: \"actions\",\n-    enableHiding: false,\n-    cell: ({ row }) => {\n-      const payment = row.original\n-\n-      return (\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-              <span className=\"sr-only\">Open menu</span>\n-              <MoreHorizontal className=\"h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-            <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(payment.id)}\n-            >\n-              Copy payment ID\n-            </DropdownMenuItem>\n-            <DropdownMenuSeparator />\n-            <DropdownMenuItem>View customer</DropdownMenuItem>\n-            <DropdownMenuItem>View payment details</DropdownMenuItem>\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n-      )\n-    },\n+    accessorKey: \"observations\",\n+    header: \"Observaciones\",\n+    cell: ({ row }) => <div>{row.getValue(\"observations\")}</div>,\n   },\n-]\n+  {\n+    accessorKey: \"available\",\n+    header: \"Disponibilidad\",\n+    cell: ({ row }) => <div>{row.getValue(\"available\") === \"available\" ? \"Disponible\" : \"No disponible\"}</div>,\n+  },\n+];\n \n-export function DataTableDemo() {\n-  const [sorting, setSorting] = React.useState<SortingState>([])\n-  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n-    []\n-  )\n-  const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({})\n-  const [rowSelection, setRowSelection] = React.useState({})\n+export function RecyclingTable() {\n+  const [data, setData] = React.useState<Recycling[]>([]);\n+  const [sorting, setSorting] = React.useState<SortingState>([]);\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n+  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n+  const [rowSelection, setRowSelection] = React.useState({});\n \n   const table = useReactTable({\n     data,\n     columns,\n@@ -168,47 +88,47 @@\n       columnFilters,\n       columnVisibility,\n       rowSelection,\n     },\n-  })\n+  });\n \n+  const { account } = useWallet();\n+\n+  const getRecycling = async () => {\n+    if (!account?.address) return;\n+\n+    const payload = {\n+      function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+      functionArguments: [`${account?.address}`],\n+    };\n+    \n+    try {\n+      const result = await aptos.view({ payload });\n+      if (result) {\n+        // Assuming result is an array of recyclings\n+        const recyclings = result[0] as Recycling[];\n+        setData(recyclings);\n+      }\n+    } catch (error) {\n+      console.error(\"Error fetching recyclings: \", error);\n+    }\n+  };\n+\n+  React.useEffect(() => {\n+    getRecycling();\n+  }, [account]);\n+\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n-          placeholder=\"Filter emails...\"\n-          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n+          placeholder=\"Filtrar por tipo...\"\n+          value={(table.getColumn(\"type\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n-            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n+            table.getColumn(\"type\")?.setFilterValue(event.target.value)\n           }\n           className=\"max-w-sm\"\n         />\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"outline\" className=\"ml-auto\">\n-              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            {table\n-              .getAllColumns()\n-              .filter((column) => column.getCanHide())\n-              .map((column) => {\n-                return (\n-                  <DropdownMenuCheckboxItem\n-                    key={column.id}\n-                    className=\"capitalize\"\n-                    checked={column.getIsVisible()}\n-                    onCheckedChange={(value) =>\n-                      column.toggleVisibility(!!value)\n-                    }\n-                  >\n-                    {column.id}\n-                  </DropdownMenuCheckboxItem>\n-                )\n-              })}\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n       </div>\n       <div className=\"rounded-md border\">\n         <Table>\n           <TableHeader>\n@@ -218,71 +138,35 @@\n                   return (\n                     <TableHead key={header.id}>\n                       {header.isPlaceholder\n                         ? null\n-                        : flexRender(\n-                            header.column.columnDef.header,\n-                            header.getContext()\n-                          )}\n+                        : flexRender(header.column.columnDef.header, header.getContext())}\n                     </TableHead>\n-                  )\n+                  );\n                 })}\n               </TableRow>\n             ))}\n           </TableHeader>\n           <TableBody>\n             {table.getRowModel().rows?.length ? (\n               table.getRowModel().rows.map((row) => (\n-                <TableRow\n-                  key={row.id}\n-                  data-state={row.getIsSelected() && \"selected\"}\n-                >\n+                <TableRow key={row.id}>\n                   {row.getVisibleCells().map((cell) => (\n                     <TableCell key={cell.id}>\n-                      {flexRender(\n-                        cell.column.columnDef.cell,\n-                        cell.getContext()\n-                      )}\n+                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                     </TableCell>\n                   ))}\n                 </TableRow>\n               ))\n             ) : (\n               <TableRow>\n-                <TableCell\n-                  colSpan={columns.length}\n-                  className=\"h-24 text-center\"\n-                >\n+                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                   No results.\n                 </TableCell>\n               </TableRow>\n             )}\n           </TableBody>\n         </Table>\n       </div>\n-      <div className=\"flex items-center justify-end space-x-2 py-4\">\n-        <div className=\"flex-1 text-sm text-muted-foreground\">\n-          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n-          {table.getFilteredRowModel().rows.length} row(s) selected.\n-        </div>\n-        <div className=\"space-x-2\">\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.previousPage()}\n-            disabled={!table.getCanPreviousPage()}\n-          >\n-            Previous\n-          </Button>\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.nextPage()}\n-            disabled={!table.getCanNextPage()}\n-          >\n-            Next\n-          </Button>\n-        </div>\n-      </div>\n     </div>\n-  )\n+  );\n }\n"
                },
                {
                    "date": 1728778222032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,31 +10,87 @@\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n } from \"@tanstack/react-table\";\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n+\n import { Button } from \"@/components/ui/button\";\n import { Checkbox } from \"@/components/ui/checkbox\";\n+import {\n+  DropdownMenu,\n+  DropdownMenuCheckboxItem,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuLabel,\n+  DropdownMenuSeparator,\n+  DropdownMenuTrigger,\n+} from \"@/components/ui/dropdown-menu\";\n import { Input } from \"@/components/ui/input\";\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n+import {\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableHeader,\n+  TableRow,\n+} from \"@/components/ui/table\";\n \n-import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+const data: Recycling[] = [\n+  {\n+    id: \"1\",\n+    type: \"Plástico\",\n+    ubication: \"Medellín\",\n+    weight: 10,\n+    pricePound: 0.5,\n+    observations: \"Botellas PET\",\n+    available: \"Available\",\n+  },\n+  {\n+    id: \"2\",\n+    type: \"Cartón\",\n+    ubication: \"Bogotá\",\n+    weight: 15,\n+    pricePound: 0.3,\n+    observations: \"Cajas usadas\",\n+    available: \"Not available\",\n+  },\n+  // Otros datos que necesites\n+];\n \n-export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n-\n export type Recycling = {\n-  id: number;\n+  id: string;\n   type: string;\n   ubication: string;\n   weight: number;\n   pricePound: number;\n   observations: string;\n-  available: \"available\" | \"not available\";\n+  available: \"Available\" | \"Not available\";\n };\n \n export const columns: ColumnDef<Recycling>[] = [\n   {\n+    id: \"select\",\n+    header: ({ table }) => (\n+      <Checkbox\n+        checked={\n+          table.getIsAllPageRowsSelected() ||\n+          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n+        }\n+        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n+        aria-label=\"Select all\"\n+      />\n+    ),\n+    cell: ({ row }) => (\n+      <Checkbox\n+        checked={row.getIsSelected()}\n+        onCheckedChange={(value) => row.toggleSelected(!!value)}\n+        aria-label=\"Select row\"\n+      />\n+    ),\n+    enableSorting: false,\n+    enableHiding: false,\n+  },\n+  {\n     accessorKey: \"type\",\n     header: \"Tipo de reciclaje\",\n     cell: ({ row }) => <div>{row.getValue(\"type\")}</div>,\n   },\n@@ -44,15 +100,24 @@\n     cell: ({ row }) => <div>{row.getValue(\"ubication\")}</div>,\n   },\n   {\n     accessorKey: \"weight\",\n-    header: \"Peso\",\n-    cell: ({ row }) => <div>{row.getValue(\"weight\")} kg</div>,\n+    header: \"Peso (kg)\",\n+    cell: ({ row }) => <div>{row.getValue(\"weight\")}</div>,\n   },\n   {\n     accessorKey: \"pricePound\",\n     header: \"Precio por libra\",\n-    cell: ({ row }) => <div>${row.getValue(\"pricePound\")}</div>,\n+    cell: ({ row }) => {\n+      const price = parseFloat(row.getValue(\"pricePound\"));\n+\n+      const formatted = new Intl.NumberFormat(\"en-US\", {\n+        style: \"currency\",\n+        currency: \"USD\",\n+      }).format(price);\n+\n+      return <div className=\"text-right font-medium\">{formatted}</div>;\n+    },\n   },\n   {\n     accessorKey: \"observations\",\n     header: \"Observaciones\",\n@@ -60,17 +125,49 @@\n   },\n   {\n     accessorKey: \"available\",\n     header: \"Disponibilidad\",\n-    cell: ({ row }) => <div>{row.getValue(\"available\") === \"available\" ? \"Disponible\" : \"No disponible\"}</div>,\n+    cell: ({ row }) => (\n+      <div>{row.getValue(\"available\") === \"Available\" ? \"Disponible\" : \"No disponible\"}</div>\n+    ),\n   },\n+  {\n+    id: \"actions\",\n+    enableHiding: false,\n+    cell: ({ row }) => {\n+      const recycling = row.original;\n+\n+      return (\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n+              <span className=\"sr-only\">Open menu</span>\n+              <MoreHorizontal className=\"h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n+            <DropdownMenuItem\n+              onClick={() => navigator.clipboard.writeText(recycling.id)}\n+            >\n+              Copy recycling ID\n+            </DropdownMenuItem>\n+            <DropdownMenuSeparator />\n+            <DropdownMenuItem>View details</DropdownMenuItem>\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      );\n+    },\n+  },\n ];\n \n-export function RecyclingTable() {\n-  const [data, setData] = React.useState<Recycling[]>([]);\n+export function DataTableDemo() {\n   const [sorting, setSorting] = React.useState<SortingState>([]);\n-  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n-  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n+    []\n+  );\n+  const [columnVisibility, setColumnVisibility] =\n+    React.useState<VisibilityState>({});\n   const [rowSelection, setRowSelection] = React.useState({});\n \n   const table = useReactTable({\n     data,\n@@ -90,45 +187,45 @@\n       rowSelection,\n     },\n   });\n \n-  const { account } = useWallet();\n-\n-  const getRecycling = async () => {\n-    if (!account?.address) return;\n-\n-    const payload = {\n-      function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n-      functionArguments: [`${account?.address}`],\n-    };\n-    \n-    try {\n-      const result = await aptos.view({ payload });\n-      if (result) {\n-        // Assuming result is an array of recyclings\n-        const recyclings = result[0] as Recycling[];\n-        setData(recyclings);\n-      }\n-    } catch (error) {\n-      console.error(\"Error fetching recyclings: \", error);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    getRecycling();\n-  }, [account]);\n-\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n-          placeholder=\"Filtrar por tipo...\"\n+          placeholder=\"Filter reciclajes...\"\n           value={(table.getColumn(\"type\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n             table.getColumn(\"type\")?.setFilterValue(event.target.value)\n           }\n           className=\"max-w-sm\"\n         />\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"outline\" className=\"ml-auto\">\n+              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            {table\n+              .getAllColumns()\n+              .filter((column) => column.getCanHide())\n+              .map((column) => {\n+                return (\n+                  <DropdownMenuCheckboxItem\n+                    key={column.id}\n+                    className=\"capitalize\"\n+                    checked={column.getIsVisible()}\n+                    onCheckedChange={(value) =>\n+                      column.toggleVisibility(!!value)\n+                    }\n+                  >\n+                    {column.id}\n+                  </DropdownMenuCheckboxItem>\n+                );\n+              })}\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n       </div>\n       <div className=\"rounded-md border\">\n         <Table>\n           <TableHeader>\n@@ -138,9 +235,12 @@\n                   return (\n                     <TableHead key={header.id}>\n                       {header.isPlaceholder\n                         ? null\n-                        : flexRender(header.column.columnDef.header, header.getContext())}\n+                        : flexRender(\n+                            header.column.columnDef.header,\n+                            header.getContext()\n+                          )}\n                     </TableHead>\n                   );\n                 })}\n               </TableRow>\n@@ -148,25 +248,58 @@\n           </TableHeader>\n           <TableBody>\n             {table.getRowModel().rows?.length ? (\n               table.getRowModel().rows.map((row) => (\n-                <TableRow key={row.id}>\n+                <TableRow\n+                  key={row.id}\n+                  data-state={row.getIsSelected() && \"selected\"}\n+                >\n                   {row.getVisibleCells().map((cell) => (\n                     <TableCell key={cell.id}>\n-                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n+                      {flexRender(\n+                        cell.column.columnDef.cell,\n+                        cell.getContext()\n+                      )}\n                     </TableCell>\n                   ))}\n                 </TableRow>\n               ))\n             ) : (\n               <TableRow>\n-                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n+                <TableCell\n+                  colSpan={columns.length}\n+                  className=\"h-24 text-center\"\n+                >\n                   No results.\n                 </TableCell>\n               </TableRow>\n             )}\n           </TableBody>\n         </Table>\n       </div>\n+      <div className=\"flex items-center justify-end space-x-2 py-4\">\n+        <div className=\"flex-1 text-sm text-muted-foreground\">\n+          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n+          {table.getFilteredRowModel().rows.length} row(s) selected.\n+        </div>\n+        <div className=\"space-x-2\">\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.previousPage()}\n+            disabled={!table.getCanPreviousPage()}\n+          >\n+            Previous\n+          </Button>\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.nextPage()}\n+            disabled={!table.getCanNextPage()}\n+          >\n+            Next\n+          </Button>\n+        </div>\n+      </div>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1728778777410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import * as React from \"react\";\n+import * as React from \"react\"\n import {\n   ColumnDef,\n   ColumnFiltersState,\n   SortingState,\n@@ -9,65 +9,40 @@\n   getFilteredRowModel,\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n-} from \"@tanstack/react-table\";\n-import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n+} from \"@tanstack/react-table\"\n+import { ArrowUpDown, ChevronDown } from \"lucide-react\"\n \n-import { Button } from \"@/components/ui/button\";\n-import { Checkbox } from \"@/components/ui/checkbox\";\n+import { Button } from \"@/components/ui/button\"\n+import { Checkbox } from \"@/components/ui/checkbox\"\n+import { Input } from \"@/components/ui/input\"\n import {\n-  DropdownMenu,\n-  DropdownMenuCheckboxItem,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuLabel,\n-  DropdownMenuSeparator,\n-  DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\";\n-import { Input } from \"@/components/ui/input\";\n-import {\n   Table,\n   TableBody,\n   TableCell,\n   TableHead,\n   TableHeader,\n   TableRow,\n-} from \"@/components/ui/table\";\n+} from \"@/components/ui/table\"\n \n-const data: Recycling[] = [\n-  {\n-    id: \"1\",\n-    type: \"Plástico\",\n-    ubication: \"Medellín\",\n-    weight: 10,\n-    pricePound: 0.5,\n-    observations: \"Botellas PET\",\n-    available: \"Available\",\n-  },\n-  {\n-    id: \"2\",\n-    type: \"Cartón\",\n-    ubication: \"Bogotá\",\n-    weight: 15,\n-    pricePound: 0.3,\n-    observations: \"Cajas usadas\",\n-    available: \"Not available\",\n-  },\n-  // Otros datos que necesites\n-];\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from '@aptos-labs/wallet-adapter-react';\n \n-export type Recycling = {\n-  id: string;\n-  type: string;\n-  ubication: string;\n-  weight: number;\n-  pricePound: number;\n-  observations: string;\n-  available: \"Available\" | \"Not available\";\n-};\n+export const aptos = new Aptos(new AptosConfig({network: Network.TESTNET}));\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n \n-export const columns: ColumnDef<Recycling>[] = [\n+export type Payment = {\n+  id: number,\n+  Type: string,\n+  ubication: string,\n+  weight: number,\n+  pricePound: number,\n+  observations: string,\n+  available: \"available\" | \"not available\",\n+}\n+\n+export const columns: ColumnDef<Payment>[] = [\n   {\n     id: \"select\",\n     header: ({ table }) => (\n       <Checkbox\n@@ -89,87 +64,51 @@\n     enableSorting: false,\n     enableHiding: false,\n   },\n   {\n-    accessorKey: \"type\",\n-    header: \"Tipo de reciclaje\",\n-    cell: ({ row }) => <div>{row.getValue(\"type\")}</div>,\n+    accessorKey: \"Type\",\n+    header: \"Type\",\n+    cell: ({ row }) => <div>{row.getValue(\"Type\")}</div>,\n   },\n   {\n     accessorKey: \"ubication\",\n-    header: \"Ubicación\",\n+    header: \"Ubication\",\n     cell: ({ row }) => <div>{row.getValue(\"ubication\")}</div>,\n   },\n   {\n     accessorKey: \"weight\",\n-    header: \"Peso (kg)\",\n-    cell: ({ row }) => <div>{row.getValue(\"weight\")}</div>,\n+    header: \"Weight\",\n+    cell: ({ row }) => <div>{row.getValue(\"weight\")} kg</div>,\n   },\n   {\n     accessorKey: \"pricePound\",\n-    header: \"Precio por libra\",\n-    cell: ({ row }) => {\n-      const price = parseFloat(row.getValue(\"pricePound\"));\n-\n-      const formatted = new Intl.NumberFormat(\"en-US\", {\n-        style: \"currency\",\n-        currency: \"USD\",\n-      }).format(price);\n-\n-      return <div className=\"text-right font-medium\">{formatted}</div>;\n-    },\n+    header: \"Price per Pound\",\n+    cell: ({ row }) => <div>${row.getValue(\"pricePound\")}</div>,\n   },\n   {\n     accessorKey: \"observations\",\n-    header: \"Observaciones\",\n+    header: \"Observations\",\n     cell: ({ row }) => <div>{row.getValue(\"observations\")}</div>,\n   },\n   {\n     accessorKey: \"available\",\n-    header: \"Disponibilidad\",\n-    cell: ({ row }) => (\n-      <div>{row.getValue(\"available\") === \"Available\" ? \"Disponible\" : \"No disponible\"}</div>\n-    ),\n+    header: \"Available\",\n+    cell: ({ row }) => <div>{row.getValue(\"available\")}</div>,\n   },\n-  {\n-    id: \"actions\",\n-    enableHiding: false,\n-    cell: ({ row }) => {\n-      const recycling = row.original;\n+]\n \n-      return (\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-              <span className=\"sr-only\">Open menu</span>\n-              <MoreHorizontal className=\"h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-            <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(recycling.id)}\n-            >\n-              Copy recycling ID\n-            </DropdownMenuItem>\n-            <DropdownMenuSeparator />\n-            <DropdownMenuItem>View details</DropdownMenuItem>\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n-      );\n-    },\n-  },\n-];\n-\n export function DataTableDemo() {\n-  const [sorting, setSorting] = React.useState<SortingState>([]);\n+  const [sorting, setSorting] = React.useState<SortingState>([])\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n     []\n-  );\n+  )\n   const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({});\n-  const [rowSelection, setRowSelection] = React.useState({});\n+    React.useState<VisibilityState>({})\n+  const [rowSelection, setRowSelection] = React.useState({})\n+  const [data, setData] = React.useState<Payment[]>([])\n \n+  const { account } = useWallet();\n+\n   const table = useReactTable({\n     data,\n     columns,\n     onSortingChange: setSorting,\n@@ -185,65 +124,69 @@\n       columnFilters,\n       columnVisibility,\n       rowSelection,\n     },\n-  });\n+  })\n \n+  const getRecycling = async () => {\n+    const payload = {\n+      function: `${ADDRESS}::recicly::get_all_recyclings`,\n+      functionArguments: [`${account?.address}`],\n+    }\n+\n+    try {\n+      let result = await aptos.view({ payload });\n+      // Asume que los datos devueltos son un array de reciclajes en el formato correcto\n+      const recyclingData = result.map((item: any, index: number) => ({\n+        id: index,\n+        Type: item.type,\n+        ubication: item.ubication,\n+        weight: item.weight,\n+        pricePound: item.price_pound,\n+        observations: item.observations,\n+        available: item.available ? \"available\" : \"not available\",\n+      }));\n+      setData(recyclingData);\n+    } catch (error) {\n+      console.error(\"Error fetching recycling data:\", error);\n+    }\n+  };\n+\n+  // Llama a la función para obtener los reciclajes cuando el componente se monta\n+  React.useEffect(() => {\n+    getRecycling();\n+  }, []);\n+\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n-          placeholder=\"Filter reciclajes...\"\n-          value={(table.getColumn(\"type\")?.getFilterValue() as string) ?? \"\"}\n+          placeholder=\"Filter Type...\"\n+          value={(table.getColumn(\"Type\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n-            table.getColumn(\"type\")?.setFilterValue(event.target.value)\n+            table.getColumn(\"Type\")?.setFilterValue(event.target.value)\n           }\n           className=\"max-w-sm\"\n         />\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"outline\" className=\"ml-auto\">\n-              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            {table\n-              .getAllColumns()\n-              .filter((column) => column.getCanHide())\n-              .map((column) => {\n-                return (\n-                  <DropdownMenuCheckboxItem\n-                    key={column.id}\n-                    className=\"capitalize\"\n-                    checked={column.getIsVisible()}\n-                    onCheckedChange={(value) =>\n-                      column.toggleVisibility(!!value)\n-                    }\n-                  >\n-                    {column.id}\n-                  </DropdownMenuCheckboxItem>\n-                );\n-              })}\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n+        <Button onClick={getRecycling} className=\"ml-auto\">\n+          Refresh Data\n+        </Button>\n       </div>\n       <div className=\"rounded-md border\">\n         <Table>\n           <TableHeader>\n             {table.getHeaderGroups().map((headerGroup) => (\n               <TableRow key={headerGroup.id}>\n-                {headerGroup.headers.map((header) => {\n-                  return (\n-                    <TableHead key={header.id}>\n-                      {header.isPlaceholder\n-                        ? null\n-                        : flexRender(\n-                            header.column.columnDef.header,\n-                            header.getContext()\n-                          )}\n-                    </TableHead>\n-                  );\n-                })}\n+                {headerGroup.headers.map((header) => (\n+                  <TableHead key={header.id}>\n+                    {header.isPlaceholder\n+                      ? null\n+                      : flexRender(\n+                          header.column.columnDef.header,\n+                          header.getContext()\n+                        )}\n+                  </TableHead>\n+                ))}\n               </TableRow>\n             ))}\n           </TableHeader>\n           <TableBody>\n@@ -264,12 +207,9 @@\n                 </TableRow>\n               ))\n             ) : (\n               <TableRow>\n-                <TableCell\n-                  colSpan={columns.length}\n-                  className=\"h-24 text-center\"\n-                >\n+                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                   No results.\n                 </TableCell>\n               </TableRow>\n             )}\n@@ -300,6 +240,6 @@\n           </Button>\n         </div>\n       </div>\n     </div>\n-  );\n+  )\n }\n"
                },
                {
                    "date": 1728779091085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n   })\n \n   const getRecycling = async () => {\n     const payload = {\n-      function: `${ADDRESS}::recicly::get_all_recyclings`,\n+      function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n       functionArguments: [`${account?.address}`],\n     }\n \n     try {\n@@ -143,10 +143,10 @@\n         weight: item.weight,\n         pricePound: item.price_pound,\n         observations: item.observations,\n         available: item.available ? \"available\" : \"not available\",\n-      }));\n-      setData(recyclingData);\n+      }));[]\n+      setData ([recyclingData]);\n     } catch (error) {\n       console.error(\"Error fetching recycling data:\", error);\n     }\n   };\n"
                },
                {
                    "date": 1728779131462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         weight: item.weight,\n         pricePound: item.price_pound,\n         observations: item.observations,\n         available: item.available ? \"available\" : \"not available\",\n-      }));[]\n+      }));\n       setData ([recyclingData]);\n     } catch (error) {\n       console.error(\"Error fetching recycling data:\", error);\n     }\n"
                },
                {
                    "date": 1728779399369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import * as React from \"react\"\n+import * as React from \"react\";\n import {\n   ColumnDef,\n   ColumnFiltersState,\n   SortingState,\n@@ -9,38 +9,44 @@\n   getFilteredRowModel,\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n-} from \"@tanstack/react-table\"\n-import { ArrowUpDown, ChevronDown } from \"lucide-react\"\n-\n-import { Button } from \"@/components/ui/button\"\n-import { Checkbox } from \"@/components/ui/checkbox\"\n-import { Input } from \"@/components/ui/input\"\n+} from \"@tanstack/react-table\";\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n+import { Button } from \"@/components/ui/button\";\n+import { Checkbox } from \"@/components/ui/checkbox\";\n import {\n+  DropdownMenu,\n+  DropdownMenuCheckboxItem,\n+  DropdownMenuContent,\n+  DropdownMenuTrigger,\n+} from \"@/components/ui/dropdown-menu\";\n+import { Input } from \"@/components/ui/input\";\n+import {\n   Table,\n   TableBody,\n   TableCell,\n   TableHead,\n   TableHeader,\n   TableRow,\n-} from \"@/components/ui/table\"\n-\n+} from \"@/components/ui/table\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n-export const aptos = new Aptos(new AptosConfig({network: Network.TESTNET}));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\"\n+const aptos = new Aptos(\n+  new AptosConfig({ network: Network.TESTNET })\n+);\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n export type Payment = {\n-  id: number,\n-  Type: string,\n-  ubication: string,\n-  weight: number,\n-  pricePound: number,\n-  observations: string,\n-  available: \"available\" | \"not available\",\n-}\n+  id: number; // ID\n+  Type: string; // Tipo de reciclaje\n+  ubication: string; // Dirección de recolección\n+  weight: number; // Peso\n+  pricePound: number; // Precio por libra\n+  observations: string; // Mensaje opcional del usuario\n+  available: \"available\" | \"not available\"; // Disponibilidad\n+};\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n     id: \"select\",\n@@ -65,47 +71,74 @@\n     enableHiding: false,\n   },\n   {\n     accessorKey: \"Type\",\n-    header: \"Type\",\n-    cell: ({ row }) => <div>{row.getValue(\"Type\")}</div>,\n+    header: \"Tipo\",\n+    cell: ({ row }) => (\n+      <div className=\"capitalize\">{row.getValue(\"Type\")}</div>\n+    ),\n   },\n   {\n     accessorKey: \"ubication\",\n-    header: \"Ubication\",\n-    cell: ({ row }) => <div>{row.getValue(\"ubication\")}</div>,\n+    header: \"Ubicación\",\n+    cell: ({ row }) => (\n+      <div className=\"capitalize\">{row.getValue(\"ubication\")}</div>\n+    ),\n   },\n   {\n     accessorKey: \"weight\",\n-    header: \"Weight\",\n-    cell: ({ row }) => <div>{row.getValue(\"weight\")} kg</div>,\n+    header: \"Peso (lbs)\",\n+    cell: ({ row }) => (\n+      <div>{row.getValue(\"weight\")} lbs</div>\n+    ),\n   },\n   {\n     accessorKey: \"pricePound\",\n-    header: \"Price per Pound\",\n-    cell: ({ row }) => <div>${row.getValue(\"pricePound\")}</div>,\n+    header: \"Precio por libra\",\n+    cell: ({ row }) => {\n+      const pricePound = parseFloat(row.getValue(\"pricePound\"));\n+\n+      const formatted = new Intl.NumberFormat(\"en-US\", {\n+        style: \"currency\",\n+        currency: \"USD\",\n+      }).format(pricePound);\n+\n+      return <div className=\"text-right font-medium\">{formatted}</div>;\n+    },\n   },\n   {\n     accessorKey: \"observations\",\n-    header: \"Observations\",\n-    cell: ({ row }) => <div>{row.getValue(\"observations\")}</div>,\n+    header: \"Observaciones\",\n+    cell: ({ row }) => (\n+      <div>{row.getValue(\"observations\")}</div>\n+    ),\n   },\n   {\n     accessorKey: \"available\",\n-    header: \"Available\",\n-    cell: ({ row }) => <div>{row.getValue(\"available\")}</div>,\n+    header: \"Disponibilidad\",\n+    cell: ({ row }) => (\n+      <div>{row.getValue(\"available\") === \"available\" ? \"Disponible\" : \"No disponible\"}</div>\n+    ),\n   },\n-]\n+  {\n+    id: \"actions\",\n+    enableHiding: false,\n+    cell: ({ row }) => {\n+      const payment = row.original;\n+      return <></>; // Aquí puedes agregar botones u otras acciones\n+    },\n+  },\n+];\n \n export function DataTableDemo() {\n-  const [sorting, setSorting] = React.useState<SortingState>([])\n+  const [data, setData] = React.useState<Payment[]>([]);\n+  const [sorting, setSorting] = React.useState<SortingState>([]);\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n     []\n-  )\n+  );\n   const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({})\n-  const [rowSelection, setRowSelection] = React.useState({})\n-  const [data, setData] = React.useState<Payment[]>([])\n+    React.useState<VisibilityState>({});\n+  const [rowSelection, setRowSelection] = React.useState({});\n \n   const { account } = useWallet();\n \n   const table = useReactTable({\n@@ -124,74 +157,100 @@\n       columnFilters,\n       columnVisibility,\n       rowSelection,\n     },\n-  })\n+  });\n \n   const getRecycling = async () => {\n     const payload = {\n       function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n       functionArguments: [`${account?.address}`],\n-    }\n+    };\n \n     try {\n-      let result = await aptos.view({ payload });\n-      // Asume que los datos devueltos son un array de reciclajes en el formato correcto\n+      const result = await aptos.view({ payload });\n+\n+      // Mapeo de datos al formato `Payment`\n       const recyclingData = result.map((item: any, index: number) => ({\n-        id: index,\n-        Type: item.type,\n+        id: index, // Utiliza un índice como ID temporal\n+        Type: item.Type,\n         ubication: item.ubication,\n         weight: item.weight,\n-        pricePound: item.price_pound,\n+        pricePound: item.pricePound,\n         observations: item.observations,\n         available: item.available ? \"available\" : \"not available\",\n       }));\n-      setData ([recyclingData]);\n+\n+      setData(recyclingData); // Asignamos el array de reciclajes\n     } catch (error) {\n-      console.error(\"Error fetching recycling data:\", error);\n+      console.error(\"Error al obtener reciclajes: \", error);\n     }\n   };\n \n-  // Llama a la función para obtener los reciclajes cuando el componente se monta\n   React.useEffect(() => {\n-    getRecycling();\n-  }, []);\n+    getRecycling(); // Llamamos a la función para obtener datos al cargar el componente\n+  }, [account]);\n \n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n-          placeholder=\"Filter Type...\"\n-          value={(table.getColumn(\"Type\")?.getFilterValue() as string) ?? \"\"}\n+          placeholder=\"Filtrar por ubicación...\"\n+          value={(table.getColumn(\"ubication\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n-            table.getColumn(\"Type\")?.setFilterValue(event.target.value)\n+            table.getColumn(\"ubication\")?.setFilterValue(event.target.value)\n           }\n           className=\"max-w-sm\"\n         />\n-        <Button onClick={getRecycling} className=\"ml-auto\">\n-          Refresh Data\n-        </Button>\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"outline\" className=\"ml-auto\">\n+              Columnas <ChevronDown className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            {table\n+              .getAllColumns()\n+              .filter((column) => column.getCanHide())\n+              .map((column) => {\n+                return (\n+                  <DropdownMenuCheckboxItem\n+                    key={column.id}\n+                    className=\"capitalize\"\n+                    checked={column.getIsVisible()}\n+                    onCheckedChange={(value) =>\n+                      column.toggleVisibility(!!value)\n+                    }\n+                  >\n+                    {column.id}\n+                  </DropdownMenuCheckboxItem>\n+                );\n+              })}\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n       </div>\n       <div className=\"rounded-md border\">\n         <Table>\n           <TableHeader>\n             {table.getHeaderGroups().map((headerGroup) => (\n               <TableRow key={headerGroup.id}>\n-                {headerGroup.headers.map((header) => (\n-                  <TableHead key={header.id}>\n-                    {header.isPlaceholder\n-                      ? null\n-                      : flexRender(\n-                          header.column.columnDef.header,\n-                          header.getContext()\n-                        )}\n-                  </TableHead>\n-                ))}\n+                {headerGroup.headers.map((header) => {\n+                  return (\n+                    <TableHead key={header.id}>\n+                      {header.isPlaceholder\n+                        ? null\n+                        : flexRender(\n+                            header.column.columnDef.header,\n+                            header.getContext()\n+                          )}\n+                    </TableHead>\n+                  );\n+                })}\n               </TableRow>\n             ))}\n           </TableHeader>\n           <TableBody>\n-            {table.getRowModel().rows?.length ? (\n+            {table.getRowModel().rows.length ? (\n               table.getRowModel().rows.map((row) => (\n                 <TableRow\n                   key={row.id}\n                   data-state={row.getIsSelected() && \"selected\"}\n@@ -208,38 +267,34 @@\n               ))\n             ) : (\n               <TableRow>\n                 <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n-                  No results.\n+                  No hay resultados.\n                 </TableCell>\n               </TableRow>\n             )}\n           </TableBody>\n         </Table>\n       </div>\n       <div className=\"flex items-center justify-end space-x-2 py-4\">\n         <div className=\"flex-1 text-sm text-muted-foreground\">\n-          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n-          {table.getFilteredRowModel().rows.length} row(s) selected.\n+          {table.getFilteredSelectedRowModel().rows.length} de{\" \"}\n+          {table.getRowModel().rows.length} resultados\n         </div>\n-        <div className=\"space-x-2\">\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.previousPage()}\n-            disabled={!table.getCanPreviousPage()}\n-          >\n-            Previous\n-          </Button>\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.nextPage()}\n-            disabled={!table.getCanNextPage()}\n-          >\n-            Next\n-          </Button>\n-        </div>\n+        <Button\n+          variant=\"outline\"\n+          onClick={() => table.setPageIndex(0)}\n+          disabled={!table.getCanPreviousPage()}\n+        >\n+          Anterior\n+        </Button>\n+        <Button\n+          variant=\"outline\"\n+          onClick={() => table.nextPage()}\n+          disabled={!table.getCanNextPage()}\n+        >\n+          Siguiente\n+        </Button>\n       </div>\n     </div>\n-  )\n+  );\n }\n"
                },
                {
                    "date": 1728779706462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n );\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n export type Payment = {\n-  id: number; // ID\n+  id: string; // Cambia a string si el ID es un string\n   Type: string; // Tipo de reciclaje\n   ubication: string; // Dirección de recolección\n   weight: number; // Peso\n   pricePound: number; // Precio por libra\n@@ -168,17 +168,17 @@\n \n     try {\n       const result = await aptos.view({ payload });\n \n-      // Mapeo de datos al formato `Payment`\n-      const recyclingData = result.map((item: any, index: number) => ({\n-        id: index, // Utiliza un índice como ID temporal\n-        Type: item.Type,\n-        ubication: item.ubication,\n-        weight: item.weight,\n-        pricePound: item.pricePound,\n-        observations: item.observations,\n-        available: item.available ? \"available\" : \"not available\",\n+      // Aplanar el array de arrays y mapear al formato `Payment`\n+      const recyclingData = result.flat().map((item: any) => ({\n+        id: item[0], // Asignar el ID proporcionado por el backend\n+        Type: item[1], // Ajusta según la estructura interna de los arrays\n+        ubication: item[2], // Ajusta según la estructura interna de los arrays\n+        weight: item[3], // Ajusta según la estructura interna de los arrays\n+        pricePound: item[4], // Ajusta según la estructura interna de los arrays\n+        observations: item[5], // Ajusta según la estructura interna de los arrays\n+        available: item[6], // Ajusta según la estructura interna de los arrays\n       }));\n \n       setData(recyclingData); // Asignamos el array de reciclajes\n     } catch (error) {\n@@ -198,103 +198,47 @@\n           value={(table.getColumn(\"ubication\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n             table.getColumn(\"ubication\")?.setFilterValue(event.target.value)\n           }\n-          className=\"max-w-sm\"\n         />\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"outline\" className=\"ml-auto\">\n-              Columnas <ChevronDown className=\"ml-2 h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            {table\n-              .getAllColumns()\n-              .filter((column) => column.getCanHide())\n-              .map((column) => {\n-                return (\n-                  <DropdownMenuCheckboxItem\n-                    key={column.id}\n-                    className=\"capitalize\"\n-                    checked={column.getIsVisible()}\n-                    onCheckedChange={(value) =>\n-                      column.toggleVisibility(!!value)\n-                    }\n-                  >\n-                    {column.id}\n-                  </DropdownMenuCheckboxItem>\n-                );\n-              })}\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n       </div>\n-      <div className=\"rounded-md border\">\n-        <Table>\n-          <TableHeader>\n-            {table.getHeaderGroups().map((headerGroup) => (\n-              <TableRow key={headerGroup.id}>\n-                {headerGroup.headers.map((header) => {\n-                  return (\n-                    <TableHead key={header.id}>\n-                      {header.isPlaceholder\n-                        ? null\n-                        : flexRender(\n-                            header.column.columnDef.header,\n-                            header.getContext()\n-                          )}\n-                    </TableHead>\n-                  );\n-                })}\n-              </TableRow>\n-            ))}\n-          </TableHeader>\n-          <TableBody>\n-            {table.getRowModel().rows.length ? (\n-              table.getRowModel().rows.map((row) => (\n-                <TableRow\n-                  key={row.id}\n-                  data-state={row.getIsSelected() && \"selected\"}\n-                >\n-                  {row.getVisibleCells().map((cell) => (\n-                    <TableCell key={cell.id}>\n-                      {flexRender(\n-                        cell.column.columnDef.cell,\n-                        cell.getContext()\n-                      )}\n-                    </TableCell>\n-                  ))}\n-                </TableRow>\n-              ))\n-            ) : (\n-              <TableRow>\n-                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n-                  No hay resultados.\n+      <Table>\n+        <TableHeader>\n+          {table.getHeaderGroups().map((headerGroup) => (\n+            <TableRow key={headerGroup.id}>\n+              {headerGroup.headers.map((header) => (\n+                <TableHead key={header.id}>\n+                  {header.isPlaceholder ? null : (\n+                    <div\n+                      className={`flex items-center space-x-2 ${\n+                        header.column.getIsSorted() ? \"opacity-100\" : \"opacity-50\"\n+                      }`}\n+                    >\n+                      <div>{flexRender(header.column.columnDef.header, header.getContext())}</div>\n+                      <div>\n+                        {{\n+                          asc: <ArrowUpDown className=\"h-4 w-4\" />,\n+                          desc: <ArrowUpDown className=\"h-4 w-4 rotate-180\" />,\n+                        }[header.column.getIsSorted() as string] ?? null}\n+                      </div>\n+                    </div>\n+                  )}\n+                </TableHead>\n+              ))}\n+            </TableRow>\n+          ))}\n+        </TableHeader>\n+        <TableBody>\n+          {table.getRowModel().rows.map((row) => (\n+            <TableRow key={row.id}>\n+              {row.getVisibleCells().map((cell) => (\n+                <TableCell key={cell.id}>\n+                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                 </TableCell>\n-              </TableRow>\n-            )}\n-          </TableBody>\n-        </Table>\n-      </div>\n-      <div className=\"flex items-center justify-end space-x-2 py-4\">\n-        <div className=\"flex-1 text-sm text-muted-foreground\">\n-          {table.getFilteredSelectedRowModel().rows.length} de{\" \"}\n-          {table.getRowModel().rows.length} resultados\n-        </div>\n-        <Button\n-          variant=\"outline\"\n-          onClick={() => table.setPageIndex(0)}\n-          disabled={!table.getCanPreviousPage()}\n-        >\n-          Anterior\n-        </Button>\n-        <Button\n-          variant=\"outline\"\n-          onClick={() => table.nextPage()}\n-          disabled={!table.getCanNextPage()}\n-        >\n-          Siguiente\n-        </Button>\n-      </div>\n+              ))}\n+            </TableRow>\n+          ))}\n+        </TableBody>\n+      </Table>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1728784036016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import * as React from \"react\";\n+import * as React from \"react\"\n import {\n   ColumnDef,\n   ColumnFiltersState,\n   SortingState,\n@@ -9,44 +9,48 @@\n   getFilteredRowModel,\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n-} from \"@tanstack/react-table\";\n-import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n-import { Button } from \"@/components/ui/button\";\n-import { Checkbox } from \"@/components/ui/checkbox\";\n+} from \"@tanstack/react-table\"\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n+\n+import { Button } from \"@/components/ui/button\"\n+import { Checkbox } from \"@/components/ui/checkbox\"\n import {\n   DropdownMenu,\n   DropdownMenuCheckboxItem,\n   DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuLabel,\n+  DropdownMenuSeparator,\n   DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\";\n-import { Input } from \"@/components/ui/input\";\n+} from \"@/components/ui/dropdown-menu\"\n+import { Input } from \"@/components/ui/input\"\n import {\n   Table,\n   TableBody,\n   TableCell,\n   TableHead,\n   TableHeader,\n   TableRow,\n-} from \"@/components/ui/table\";\n-import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+} from \"@/components/ui/table\"\n \n-const aptos = new Aptos(\n-  new AptosConfig({ network: Network.TESTNET })\n-);\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+const data: Payment[] = [\n+  {\n+    id: \"m5gr84i9\",\n+    amount: 316,\n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n+  },\n+  \n+]\n \n export type Payment = {\n-  id: string; // Cambia a string si el ID es un string\n-  Type: string; // Tipo de reciclaje\n-  ubication: string; // Dirección de recolección\n-  weight: number; // Peso\n-  pricePound: number; // Precio por libra\n-  observations: string; // Mensaje opcional del usuario\n-  available: \"available\" | \"not available\"; // Disponibilidad\n-};\n+  id: string\n+  amount: number\n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  email: string\n+}\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n     id: \"select\",\n@@ -70,78 +74,84 @@\n     enableSorting: false,\n     enableHiding: false,\n   },\n   {\n-    accessorKey: \"Type\",\n-    header: \"Tipo\",\n+    accessorKey: \"status\",\n+    header: \"Status\",\n     cell: ({ row }) => (\n-      <div className=\"capitalize\">{row.getValue(\"Type\")}</div>\n+      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n     ),\n   },\n   {\n-    accessorKey: \"ubication\",\n-    header: \"Ubicación\",\n-    cell: ({ row }) => (\n-      <div className=\"capitalize\">{row.getValue(\"ubication\")}</div>\n-    ),\n+    accessorKey: \"email\",\n+    header: ({ column }) => {\n+      return (\n+        <Button\n+          variant=\"ghost\"\n+          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n+        >\n+          Email\n+          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n+        </Button>\n+      )\n+    },\n+    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n   },\n   {\n-    accessorKey: \"weight\",\n-    header: \"Peso (lbs)\",\n-    cell: ({ row }) => (\n-      <div>{row.getValue(\"weight\")} lbs</div>\n-    ),\n-  },\n-  {\n-    accessorKey: \"pricePound\",\n-    header: \"Precio por libra\",\n+    accessorKey: \"amount\",\n+    header: () => <div className=\"text-right\">Amount</div>,\n     cell: ({ row }) => {\n-      const pricePound = parseFloat(row.getValue(\"pricePound\"));\n+      const amount = parseFloat(row.getValue(\"amount\"))\n \n+      // Format the amount as a dollar amount\n       const formatted = new Intl.NumberFormat(\"en-US\", {\n         style: \"currency\",\n         currency: \"USD\",\n-      }).format(pricePound);\n+      }).format(amount)\n \n-      return <div className=\"text-right font-medium\">{formatted}</div>;\n+      return <div className=\"text-right font-medium\">{formatted}</div>\n     },\n   },\n   {\n-    accessorKey: \"observations\",\n-    header: \"Observaciones\",\n-    cell: ({ row }) => (\n-      <div>{row.getValue(\"observations\")}</div>\n-    ),\n-  },\n-  {\n-    accessorKey: \"available\",\n-    header: \"Disponibilidad\",\n-    cell: ({ row }) => (\n-      <div>{row.getValue(\"available\") === \"available\" ? \"Disponible\" : \"No disponible\"}</div>\n-    ),\n-  },\n-  {\n     id: \"actions\",\n     enableHiding: false,\n     cell: ({ row }) => {\n-      const payment = row.original;\n-      return <></>; // Aquí puedes agregar botones u otras acciones\n+      const payment = row.original\n+\n+      return (\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n+              <span className=\"sr-only\">Open menu</span>\n+              <MoreHorizontal className=\"h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n+            <DropdownMenuItem\n+              onClick={() => navigator.clipboard.writeText(payment.id)}\n+            >\n+              Copy payment ID\n+            </DropdownMenuItem>\n+            <DropdownMenuSeparator />\n+            <DropdownMenuItem>View customer</DropdownMenuItem>\n+            <DropdownMenuItem>View payment details</DropdownMenuItem>\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      )\n     },\n   },\n-];\n+]\n \n export function DataTableDemo() {\n-  const [data, setData] = React.useState<Payment[]>([]);\n-  const [sorting, setSorting] = React.useState<SortingState>([]);\n+  const [sorting, setSorting] = React.useState<SortingState>([])\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n     []\n-  );\n+  )\n   const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({});\n-  const [rowSelection, setRowSelection] = React.useState({});\n+    React.useState<VisibilityState>({})\n+  const [rowSelection, setRowSelection] = React.useState({})\n \n-  const { account } = useWallet();\n-\n   const table = useReactTable({\n     data,\n     columns,\n     onSortingChange: setSorting,\n@@ -157,88 +167,123 @@\n       columnFilters,\n       columnVisibility,\n       rowSelection,\n     },\n-  });\n+  })\n \n-  const getRecycling = async () => {\n-    const payload = {\n-      function: `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n-      functionArguments: [`${account?.address}`],\n-    };\n-\n-    try {\n-      const result = await aptos.view({ payload });\n-\n-      // Aplanar el array de arrays y mapear al formato `Payment`\n-      const recyclingData = result.flat().map((item: any) => ({\n-        id: item[0], // Asignar el ID proporcionado por el backend\n-        Type: item[1], // Ajusta según la estructura interna de los arrays\n-        ubication: item[2], // Ajusta según la estructura interna de los arrays\n-        weight: item[3], // Ajusta según la estructura interna de los arrays\n-        pricePound: item[4], // Ajusta según la estructura interna de los arrays\n-        observations: item[5], // Ajusta según la estructura interna de los arrays\n-        available: item[6], // Ajusta según la estructura interna de los arrays\n-      }));\n-\n-      setData(recyclingData); // Asignamos el array de reciclajes\n-    } catch (error) {\n-      console.error(\"Error al obtener reciclajes: \", error);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    getRecycling(); // Llamamos a la función para obtener datos al cargar el componente\n-  }, [account]);\n-\n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n         <Input\n-          placeholder=\"Filtrar por ubicación...\"\n-          value={(table.getColumn(\"ubication\")?.getFilterValue() as string) ?? \"\"}\n+          placeholder=\"Filter emails...\"\n+          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n           onChange={(event) =>\n-            table.getColumn(\"ubication\")?.setFilterValue(event.target.value)\n+            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n           }\n+          className=\"max-w-sm\"\n         />\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"outline\" className=\"ml-auto\">\n+              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            {table\n+              .getAllColumns()\n+              .filter((column) => column.getCanHide())\n+              .map((column) => {\n+                return (\n+                  <DropdownMenuCheckboxItem\n+                    key={column.id}\n+                    className=\"capitalize\"\n+                    checked={column.getIsVisible()}\n+                    onCheckedChange={(value) =>\n+                      column.toggleVisibility(!!value)\n+                    }\n+                  >\n+                    {column.id}\n+                  </DropdownMenuCheckboxItem>\n+                )\n+              })}\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n       </div>\n-      <Table>\n-        <TableHeader>\n-          {table.getHeaderGroups().map((headerGroup) => (\n-            <TableRow key={headerGroup.id}>\n-              {headerGroup.headers.map((header) => (\n-                <TableHead key={header.id}>\n-                  {header.isPlaceholder ? null : (\n-                    <div\n-                      className={`flex items-center space-x-2 ${\n-                        header.column.getIsSorted() ? \"opacity-100\" : \"opacity-50\"\n-                      }`}\n-                    >\n-                      <div>{flexRender(header.column.columnDef.header, header.getContext())}</div>\n-                      <div>\n-                        {{\n-                          asc: <ArrowUpDown className=\"h-4 w-4\" />,\n-                          desc: <ArrowUpDown className=\"h-4 w-4 rotate-180\" />,\n-                        }[header.column.getIsSorted() as string] ?? null}\n-                      </div>\n-                    </div>\n-                  )}\n-                </TableHead>\n-              ))}\n-            </TableRow>\n-          ))}\n-        </TableHeader>\n-        <TableBody>\n-          {table.getRowModel().rows.map((row) => (\n-            <TableRow key={row.id}>\n-              {row.getVisibleCells().map((cell) => (\n-                <TableCell key={cell.id}>\n-                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n+      <div className=\"rounded-md border\">\n+        <Table>\n+          <TableHeader>\n+            {table.getHeaderGroups().map((headerGroup) => (\n+              <TableRow key={headerGroup.id}>\n+                {headerGroup.headers.map((header) => {\n+                  return (\n+                    <TableHead key={header.id}>\n+                      {header.isPlaceholder\n+                        ? null\n+                        : flexRender(\n+                            header.column.columnDef.header,\n+                            header.getContext()\n+                          )}\n+                    </TableHead>\n+                  )\n+                })}\n+              </TableRow>\n+            ))}\n+          </TableHeader>\n+          <TableBody>\n+            {table.getRowModel().rows?.length ? (\n+              table.getRowModel().rows.map((row) => (\n+                <TableRow\n+                  key={row.id}\n+                  data-state={row.getIsSelected() && \"selected\"}\n+                >\n+                  {row.getVisibleCells().map((cell) => (\n+                    <TableCell key={cell.id}>\n+                      {flexRender(\n+                        cell.column.columnDef.cell,\n+                        cell.getContext()\n+                      )}\n+                    </TableCell>\n+                  ))}\n+                </TableRow>\n+              ))\n+            ) : (\n+              <TableRow>\n+                <TableCell\n+                  colSpan={columns.length}\n+                  className=\"h-24 text-center\"\n+                >\n+                  No results.\n                 </TableCell>\n-              ))}\n-            </TableRow>\n-          ))}\n-        </TableBody>\n-      </Table>\n+              </TableRow>\n+            )}\n+          </TableBody>\n+        </Table>\n+      </div>\n+      <div className=\"flex items-center justify-end space-x-2 py-4\">\n+        <div className=\"flex-1 text-sm text-muted-foreground\">\n+          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n+          {table.getFilteredRowModel().rows.length} row(s) selected.\n+        </div>\n+        <div className=\"space-x-2\">\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.previousPage()}\n+            disabled={!table.getCanPreviousPage()}\n+          >\n+            Previous\n+          </Button>\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.nextPage()}\n+            disabled={!table.getCanNextPage()}\n+          >\n+            Next\n+          </Button>\n+        </div>\n+      </div>\n     </div>\n-  );\n+  )\n }\n+\n+\n"
                },
                {
                    "date": 1728784204674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n import * as React from \"react\"\n+import { useState } from \"react\";\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n import {\n   ColumnDef,\n   ColumnFiltersState,\n   SortingState,\n@@ -33,17 +36,17 @@\n   TableHeader,\n   TableRow,\n } from \"@/components/ui/table\"\n \n-const data: Payment[] = [\n-  {\n-    id: \"m5gr84i9\",\n-    amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n-  },\n-  \n-]\n+interface Recycling {\n+  type: string;\n+  ubication: string;\n+  weight: number;\n+  pricePound: number;\n+  observations: string;\n+  chats: [];\n+  available: boolean;\n+}\n \n export type Payment = {\n   id: string\n   amount: number\n"
                },
                {
                    "date": 1728785402922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import * as React from \"react\"\n+import * as React from \"react\";\n import { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n import {\n@@ -12,49 +12,103 @@\n   getFilteredRowModel,\n   getPaginationRowModel,\n   getSortedRowModel,\n   useReactTable,\n-} from \"@tanstack/react-table\"\n-import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n+} from \"@tanstack/react-table\";\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n \n-import { Button } from \"@/components/ui/button\"\n-import { Checkbox } from \"@/components/ui/checkbox\"\n+import { Button } from \"@/components/ui/button\";\n+import { Checkbox } from \"@/components/ui/checkbox\";\n import {\n   DropdownMenu,\n   DropdownMenuCheckboxItem,\n   DropdownMenuContent,\n   DropdownMenuItem,\n   DropdownMenuLabel,\n   DropdownMenuSeparator,\n   DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\"\n-import { Input } from \"@/components/ui/input\"\n+} from \"@/components/ui/dropdown-menu\";\n+import { Input } from \"@/components/ui/input\";\n import {\n   Table,\n   TableBody,\n   TableCell,\n   TableHead,\n   TableHeader,\n   TableRow,\n-} from \"@/components/ui/table\"\n+} from \"@/components/ui/table\";\n \n-interface Recycling {\n+const data: Payment[] = [\n+  {\n+    id: \"m5gr84i9\",\n+    amount: 316,\n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n+  },\n+];\n+\n+export type Recycling = {\n+  owner: string;\n   type: string;\n   ubication: string;\n   weight: number;\n   pricePound: number;\n   observations: string;\n-  chats: [];\n   available: boolean;\n-}\n+  chats?: any[]; // Si tienes un tipo específico para `chats`, deberías definirlo también.\n+};\n \n export type Payment = {\n-  id: string\n-  amount: number\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n-  email: string\n-}\n+  id: string;\n+  amount: number;\n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\";\n+  email: string;\n+};\n \n+///////////////////////////////////////////\n+\n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS =\n+  \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+\n+const { account } = useWallet();\n+const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+const getRecycling = async () => {\n+  const payload = {\n+    function:\n+      `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+    functionArguments: [`${account?.address}`],\n+  };\n+  try {\n+    const result: any = await aptos.view({ payload });\n+    console.log(\"Resultado de reciclajes:\", result[0]);\n+\n+    if (Array.isArray(result) && result.length > 0) {\n+      const extractedRecyclings: Recycling[][] = result.map(\n+        (recyclingArray: any[]) =>\n+          recyclingArray.map((recycling: any) => ({\n+            owner: recycling.owner,\n+            type: recycling.type || \"N/A\",\n+            ubication: recycling.ubication || \"N/A\",\n+            weight: recycling.weight || 0,\n+            pricePound: recycling.pricePound || 0,\n+            observations: recycling.observations || \"N/A\",\n+            chats: recycling.chats || [],\n+            available: recycling.available || false,\n+          }))\n+      );\n+\n+      setRecyclings(extractedRecyclings);\n+    } else {\n+      console.error(\"No se encontraron reciclajes\");\n+    }\n+  } catch (error) {\n+    console.error(\"Error al obtener reciclajes:\", error);\n+  }\n+};\n+\n+///////////////////////////////\n+\n export const columns: ColumnDef<Payment>[] = [\n   {\n     id: \"select\",\n     header: ({ table }) => (\n@@ -94,32 +148,32 @@\n         >\n           Email\n           <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n         </Button>\n-      )\n+      );\n     },\n     cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n   },\n   {\n     accessorKey: \"amount\",\n     header: () => <div className=\"text-right\">Amount</div>,\n     cell: ({ row }) => {\n-      const amount = parseFloat(row.getValue(\"amount\"))\n+      const amount = parseFloat(row.getValue(\"amount\"));\n \n       // Format the amount as a dollar amount\n       const formatted = new Intl.NumberFormat(\"en-US\", {\n         style: \"currency\",\n         currency: \"USD\",\n-      }).format(amount)\n+      }).format(amount);\n \n-      return <div className=\"text-right font-medium\">{formatted}</div>\n+      return <div className=\"text-right font-medium\">{formatted}</div>;\n     },\n   },\n   {\n     id: \"actions\",\n     enableHiding: false,\n     cell: ({ row }) => {\n-      const payment = row.original\n+      const payment = row.original;\n \n       return (\n         <DropdownMenu>\n           <DropdownMenuTrigger asChild>\n@@ -139,21 +193,21 @@\n             <DropdownMenuItem>View customer</DropdownMenuItem>\n             <DropdownMenuItem>View payment details</DropdownMenuItem>\n           </DropdownMenuContent>\n         </DropdownMenu>\n-      )\n+      );\n     },\n   },\n-]\n+];\n \n export function DataTableDemo() {\n-  const [sorting, setSorting] = React.useState<SortingState>([])\n+  const [sorting, setSorting] = React.useState<SortingState>([]);\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n     []\n-  )\n+  );\n   const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({})\n-  const [rowSelection, setRowSelection] = React.useState({})\n+    React.useState<VisibilityState>({});\n+  const [rowSelection, setRowSelection] = React.useState({});\n \n   const table = useReactTable({\n     data,\n     columns,\n@@ -170,9 +224,9 @@\n       columnFilters,\n       columnVisibility,\n       rowSelection,\n     },\n-  })\n+  });\n \n   return (\n     <div className=\"w-full\">\n       <div className=\"flex items-center py-4\">\n@@ -205,9 +259,9 @@\n                     }\n                   >\n                     {column.id}\n                   </DropdownMenuCheckboxItem>\n-                )\n+                );\n               })}\n           </DropdownMenuContent>\n         </DropdownMenu>\n       </div>\n@@ -225,9 +279,9 @@\n                             header.column.columnDef.header,\n                             header.getContext()\n                           )}\n                     </TableHead>\n-                  )\n+                  );\n                 })}\n               </TableRow>\n             ))}\n           </TableHeader>\n@@ -285,8 +339,6 @@\n           </Button>\n         </div>\n       </div>\n     </div>\n-  )\n+  );\n }\n-\n-\n"
                },
                {
                    "date": 1728785428107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,16 +55,13 @@\n   observations: string;\n   available: boolean;\n   chats?: any[]; // Si tienes un tipo específico para `chats`, deberías definirlo también.\n };\n-\n export type Payment = {\n-  id: string;\n-  amount: number;\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\";\n-  email: string;\n+  recyclings: Recycling[][];\n };\n \n+\n ///////////////////////////////////////////\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS =\n"
                },
                {
                    "date": 1728785596994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,16 +60,19 @@\n   recyclings: Recycling[][];\n };\n \n \n+  const [recyclings, setRecyclings] = useState<Payment>({ recyclings: [] });\n+\n+\n ///////////////////////////////////////////\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS =\n   \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const { account } = useWallet();\n-const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+//const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n const getRecycling = async () => {\n   const payload = {\n     function:\n       `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n"
                },
                {
                    "date": 1728785623414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,18 @@\n   TableHeader,\n   TableRow,\n } from \"@/components/ui/table\";\n \n+/*\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n     status: \"success\",\n     email: \"ken99@yahoo.com\",\n   },\n ];\n+*/\n \n export type Recycling = {\n   owner: string;\n   type: string;\n"
                },
                {
                    "date": 1728785775637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n             available: recycling.available || false,\n           }))\n       );\n \n-      setRecyclings(extractedRecyclings);\n+      setRecyclings({ recyclings: extractedRecyclings });\n     } else {\n       console.error(\"No se encontraron reciclajes\");\n     }\n   } catch (error) {\n"
                },
                {
                    "date": 1728785838731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   recyclings: Recycling[][];\n };\n \n \n-  const [recyclings, setRecyclings] = useState<Payment>({ recyclings: [] });\n+  const [data, setRecyclings] = useState<Payment>({ recyclings: [] });\n \n \n ///////////////////////////////////////////\n \n"
                },
                {
                    "date": 1728785879724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   recyclings: Recycling[][];\n };\n \n \n-  const [data, setRecyclings] = useState<Payment>({ recyclings: [] });\n+  const [data, setRecyclings] = useState<Payment[]>({ recyclings: [] });\n \n \n ///////////////////////////////////////////\n \n"
                },
                {
                    "date": 1728785891093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   recyclings: Recycling[][];\n };\n \n \n-  const [data, setRecyclings] = useState<Payment[]>({ recyclings: [] });\n+  const [data, setRecyclings] = useState<Payment>({ recyclings: [] });\n \n \n ///////////////////////////////////////////\n \n"
                },
                {
                    "date": 1728785988689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,13 +58,13 @@\n   available: boolean;\n   chats?: any[]; // Si tienes un tipo específico para `chats`, deberías definirlo también.\n };\n export type Payment = {\n-  recyclings: Recycling[][];\n+  recyclings: Recycling[];\n };\n \n \n-  const [data, setRecyclings] = useState<Payment>({ recyclings: [] });\n+  const [data, setRecyclings] = useState<Payment[]>([]);\n \n \n ///////////////////////////////////////////\n \n@@ -98,9 +98,9 @@\n             available: recycling.available || false,\n           }))\n       );\n \n-      setRecyclings({ recyclings: extractedRecyclings });\n+      setRecyclings(extractedRecyclings);\n     } else {\n       console.error(\"No se encontraron reciclajes\");\n     }\n   } catch (error) {\n"
                },
                {
                    "date": 1728786072719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,12 @@\n             available: recycling.available || false,\n           }))\n       );\n \n-      setRecyclings(extractedRecyclings);\n+      const payments: Payment[] = extractedRecyclings.map(recyclingArray => ({\n+        recyclings: recyclingArray,\n+      }));\n+      setRecyclings(payments);\n     } else {\n       console.error(\"No se encontraron reciclajes\");\n     }\n   } catch (error) {\n@@ -186,9 +189,9 @@\n           </DropdownMenuTrigger>\n           <DropdownMenuContent align=\"end\">\n             <DropdownMenuLabel>Actions</DropdownMenuLabel>\n             <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(payment.id)}\n+              onClick={() => navigator.clipboard.writeText(payment.recyclings[0].owner)}\n             >\n               Copy payment ID\n             </DropdownMenuItem>\n             <DropdownMenuSeparator />\n"
                },
                {
                    "date": 1728786143010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n     functionArguments: [`${account?.address}`],\n   };\n   try {\n     const result: any = await aptos.view({ payload });\n+    const resutlv1= result[0];\n     console.log(\"Resultado de reciclajes:\", result[0]);\n \n     if (Array.isArray(result) && result.length > 0) {\n       const extractedRecyclings: Recycling[][] = result.map(\n"
                },
                {
                    "date": 1728786235302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,11 +80,11 @@\n       `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n     functionArguments: [`${account?.address}`],\n   };\n   try {\n-    const result: any = await aptos.view({ payload });\n-    const resutlv1= result[0];\n-    console.log(\"Resultado de reciclajes:\", result[0]);\n+    const resultv1: any = await aptos.view({ payload });\n+    const result= resultv1[0];\n+    console.log(\"Resultado de reciclajes:\", result);\n \n     if (Array.isArray(result) && result.length > 0) {\n       const extractedRecyclings: Recycling[][] = result.map(\n         (recyclingArray: any[]) =>\n"
                },
                {
                    "date": 1728786273802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   recyclings: Recycling[];\n };\n \n \n-  const [data, setRecyclings] = useState<Payment[]>([]);\n+  const [data, setRecyclings] = useState<Payment[]>();\n \n \n ///////////////////////////////////////////\n \n"
                },
                {
                    "date": 1728786293867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   recyclings: Recycling[];\n };\n \n \n-  const [data, setRecyclings] = useState<Payment[]>();\n+  const [data, setRecyclings] = useState<Payment[]>([]);\n \n \n ///////////////////////////////////////////\n \n"
                },
                {
                    "date": 1728790008813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,350 +1,127 @@\n-import * as React from \"react\";\n-import { useState } from \"react\";\n+import React, { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n-import {\n-  ColumnDef,\n-  ColumnFiltersState,\n-  SortingState,\n-  VisibilityState,\n-  flexRender,\n-  getCoreRowModel,\n-  getFilteredRowModel,\n-  getPaginationRowModel,\n-  getSortedRowModel,\n-  useReactTable,\n-} from \"@tanstack/react-table\";\n-import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n \n-import { Button } from \"@/components/ui/button\";\n-import { Checkbox } from \"@/components/ui/checkbox\";\n-import {\n-  DropdownMenu,\n-  DropdownMenuCheckboxItem,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuLabel,\n-  DropdownMenuSeparator,\n-  DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\";\n-import { Input } from \"@/components/ui/input\";\n-import {\n-  Table,\n-  TableBody,\n-  TableCell,\n-  TableHead,\n-  TableHeader,\n-  TableRow,\n-} from \"@/components/ui/table\";\n-\n-/*\n-const data: Payment[] = [\n-  {\n-    id: \"m5gr84i9\",\n-    amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n-  },\n-];\n-*/\n-\n-export type Recycling = {\n-  owner: string;\n+interface Recycling {\n   type: string;\n   ubication: string;\n   weight: number;\n   pricePound: number;\n   observations: string;\n+  chats: [];\n   available: boolean;\n-  chats?: any[]; // Si tienes un tipo específico para `chats`, deberías definirlo también.\n-};\n-export type Payment = {\n-  recyclings: Recycling[];\n-};\n+}\n \n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n-  const [data, setRecyclings] = useState<Payment[]>([]);\n+const Table = () => {\n+  const { account } = useWallet();\n+  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+  const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n+  const getRecycling = async () => {\n+    const payload = {\n+      function:\n+        `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+      functionArguments: [`${account?.address}`],\n+    };\n+    try {\n+      const result: any = await aptos.view({ payload });\n+      console.log(\"Resultado de reciclajes:\", result[0]);\n \n-///////////////////////////////////////////\n+      if (Array.isArray(result) && result.length > 0) {\n+        const extractedRecyclings: Recycling[][] = result.map(\n+          (recyclingArray: any[]) =>\n+            recyclingArray.map((recycling: any) => ({\n+              owner: recycling.owner,\n+              type: recycling.type || \"N/A\",\n+              ubication: recycling.ubication || \"N/A\",\n+              weight: recycling.weight || 0,\n+              pricePound: recycling.pricePound || 0,\n+              observations: recycling.observations || \"N/A\",\n+              chats: recycling.chats || [],\n+              available: recycling.available || false,\n+            }))\n+        );\n \n-export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-const ADDRESS =\n-  \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+        setRecyclings(extractedRecyclings);\n+      } else {\n+        console.error(\"No se encontraron reciclajes\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error al obtener reciclajes:\", error);\n+    }\n+  };\n \n-const { account } = useWallet();\n-//const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n-const getRecycling = async () => {\n-  const payload = {\n-    function:\n-      `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n-    functionArguments: [`${account?.address}`],\n+  const handleRowClick = (recycling: Recycling) => {\n+    setSelectedRecycling(recycling);\n   };\n-  try {\n-    const resultv1: any = await aptos.view({ payload });\n-    const result= resultv1[0];\n-    console.log(\"Resultado de reciclajes:\", result);\n \n-    if (Array.isArray(result) && result.length > 0) {\n-      const extractedRecyclings: Recycling[][] = result.map(\n-        (recyclingArray: any[]) =>\n-          recyclingArray.map((recycling: any) => ({\n-            owner: recycling.owner,\n-            type: recycling.type || \"N/A\",\n-            ubication: recycling.ubication || \"N/A\",\n-            weight: recycling.weight || 0,\n-            pricePound: recycling.pricePound || 0,\n-            observations: recycling.observations || \"N/A\",\n-            chats: recycling.chats || [],\n-            available: recycling.available || false,\n-          }))\n-      );\n+  const handleCloseModal = () => {\n+    setSelectedRecycling(null);\n+  };\n \n-      const payments: Payment[] = extractedRecyclings.map(recyclingArray => ({\n-        recyclings: recyclingArray,\n-      }));\n-      setRecyclings(payments);\n-    } else {\n-      console.error(\"No se encontraron reciclajes\");\n-    }\n-  } catch (error) {\n-    console.error(\"Error al obtener reciclajes:\", error);\n-  }\n-};\n-\n-///////////////////////////////\n-\n-export const columns: ColumnDef<Payment>[] = [\n-  {\n-    id: \"select\",\n-    header: ({ table }) => (\n-      <Checkbox\n-        checked={\n-          table.getIsAllPageRowsSelected() ||\n-          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n-        }\n-        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n-        aria-label=\"Select all\"\n-      />\n-    ),\n-    cell: ({ row }) => (\n-      <Checkbox\n-        checked={row.getIsSelected()}\n-        onCheckedChange={(value) => row.toggleSelected(!!value)}\n-        aria-label=\"Select row\"\n-      />\n-    ),\n-    enableSorting: false,\n-    enableHiding: false,\n-  },\n-  {\n-    accessorKey: \"status\",\n-    header: \"Status\",\n-    cell: ({ row }) => (\n-      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n-    ),\n-  },\n-  {\n-    accessorKey: \"email\",\n-    header: ({ column }) => {\n-      return (\n-        <Button\n-          variant=\"ghost\"\n-          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n-        >\n-          Email\n-          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n-        </Button>\n-      );\n-    },\n-    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n-  },\n-  {\n-    accessorKey: \"amount\",\n-    header: () => <div className=\"text-right\">Amount</div>,\n-    cell: ({ row }) => {\n-      const amount = parseFloat(row.getValue(\"amount\"));\n-\n-      // Format the amount as a dollar amount\n-      const formatted = new Intl.NumberFormat(\"en-US\", {\n-        style: \"currency\",\n-        currency: \"USD\",\n-      }).format(amount);\n-\n-      return <div className=\"text-right font-medium\">{formatted}</div>;\n-    },\n-  },\n-  {\n-    id: \"actions\",\n-    enableHiding: false,\n-    cell: ({ row }) => {\n-      const payment = row.original;\n-\n-      return (\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-              <span className=\"sr-only\">Open menu</span>\n-              <MoreHorizontal className=\"h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-            <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(payment.recyclings[0].owner)}\n-            >\n-              Copy payment ID\n-            </DropdownMenuItem>\n-            <DropdownMenuSeparator />\n-            <DropdownMenuItem>View customer</DropdownMenuItem>\n-            <DropdownMenuItem>View payment details</DropdownMenuItem>\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n-      );\n-    },\n-  },\n-];\n-\n-export function DataTableDemo() {\n-  const [sorting, setSorting] = React.useState<SortingState>([]);\n-  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n-    []\n-  );\n-  const [columnVisibility, setColumnVisibility] =\n-    React.useState<VisibilityState>({});\n-  const [rowSelection, setRowSelection] = React.useState({});\n-\n-  const table = useReactTable({\n-    data,\n-    columns,\n-    onSortingChange: setSorting,\n-    onColumnFiltersChange: setColumnFilters,\n-    getCoreRowModel: getCoreRowModel(),\n-    getPaginationRowModel: getPaginationRowModel(),\n-    getSortedRowModel: getSortedRowModel(),\n-    getFilteredRowModel: getFilteredRowModel(),\n-    onColumnVisibilityChange: setColumnVisibility,\n-    onRowSelectionChange: setRowSelection,\n-    state: {\n-      sorting,\n-      columnFilters,\n-      columnVisibility,\n-      rowSelection,\n-    },\n-  });\n-\n   return (\n-    <div className=\"w-full\">\n-      <div className=\"flex items-center py-4\">\n-        <Input\n-          placeholder=\"Filter emails...\"\n-          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n-          onChange={(event) =>\n-            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n-          }\n-          className=\"max-w-sm\"\n-        />\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"outline\" className=\"ml-auto\">\n-              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            {table\n-              .getAllColumns()\n-              .filter((column) => column.getCanHide())\n-              .map((column) => {\n-                return (\n-                  <DropdownMenuCheckboxItem\n-                    key={column.id}\n-                    className=\"capitalize\"\n-                    checked={column.getIsVisible()}\n-                    onCheckedChange={(value) =>\n-                      column.toggleVisibility(!!value)\n-                    }\n-                  >\n-                    {column.id}\n-                  </DropdownMenuCheckboxItem>\n-                );\n-              })}\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n+    <div className=\"flex justify-center\">\n+      <div className=\"w-full max-w-3xl\">\n+        {recyclings.length > 0 && (\n+          <table className=\"min-w-full bg-white border border-gray-200\">\n+            <thead className=\"bg-blue-500 text-white\">\n+              <tr>\n+                <th className=\"px-4 py-2 border\">Type</th>\n+                <th className=\"px-4 py-2 border\">Ubication</th>\n+                <th className=\"px-4 py-2 border\">Weight</th>\n+                <th className=\"px-4 py-2 border\">Price Per Pound</th>\n+                <th className=\"px-4 py-2 border\">Observations</th>\n+                <th className=\"px-4 py-2 border\">Available</th>\n+              </tr>\n+            </thead>\n+            <tbody>\n+              {recyclings.length > 0 ? (\n+                recyclings.flatMap((recyclingArray, index) =>\n+                  recyclingArray.map((recycling, subIndex) => (\n+                    <tr \n+                      key={`${index}-${subIndex}`} \n+                      onClick={() => handleRowClick(recycling)} \n+                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                    >\n+                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                    </tr>\n+                  ))\n+                )\n+              ) : (\n+                <tr>\n+                  <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n+                </tr>\n+              )}\n+            </tbody>\n+          </table>\n+        )}\n+        \n+        {selectedRecycling && (\n+          <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n+            <div className=\"bg-white rounded-lg p-6\">\n+              <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n+              <p><strong>Type:</strong> {selectedRecycling.type}</p>\n+              <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n+              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n+              <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n+              <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">See Chat</button>\n+            </div>\n+          </div>\n+        )}\n       </div>\n-      <div className=\"rounded-md border\">\n-        <Table>\n-          <TableHeader>\n-            {table.getHeaderGroups().map((headerGroup) => (\n-              <TableRow key={headerGroup.id}>\n-                {headerGroup.headers.map((header) => {\n-                  return (\n-                    <TableHead key={header.id}>\n-                      {header.isPlaceholder\n-                        ? null\n-                        : flexRender(\n-                            header.column.columnDef.header,\n-                            header.getContext()\n-                          )}\n-                    </TableHead>\n-                  );\n-                })}\n-              </TableRow>\n-            ))}\n-          </TableHeader>\n-          <TableBody>\n-            {table.getRowModel().rows?.length ? (\n-              table.getRowModel().rows.map((row) => (\n-                <TableRow\n-                  key={row.id}\n-                  data-state={row.getIsSelected() && \"selected\"}\n-                >\n-                  {row.getVisibleCells().map((cell) => (\n-                    <TableCell key={cell.id}>\n-                      {flexRender(\n-                        cell.column.columnDef.cell,\n-                        cell.getContext()\n-                      )}\n-                    </TableCell>\n-                  ))}\n-                </TableRow>\n-              ))\n-            ) : (\n-              <TableRow>\n-                <TableCell\n-                  colSpan={columns.length}\n-                  className=\"h-24 text-center\"\n-                >\n-                  No results.\n-                </TableCell>\n-              </TableRow>\n-            )}\n-          </TableBody>\n-        </Table>\n-      </div>\n-      <div className=\"flex items-center justify-end space-x-2 py-4\">\n-        <div className=\"flex-1 text-sm text-muted-foreground\">\n-          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n-          {table.getFilteredRowModel().rows.length} row(s) selected.\n-        </div>\n-        <div className=\"space-x-2\">\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.previousPage()}\n-            disabled={!table.getCanPreviousPage()}\n-          >\n-            Previous\n-          </Button>\n-          <Button\n-            variant=\"outline\"\n-            size=\"sm\"\n-            onClick={() => table.nextPage()}\n-            disabled={!table.getCanNextPage()}\n-          >\n-            Next\n-          </Button>\n-        </div>\n-      </div>\n     </div>\n   );\n-}\n+};\n+\n+export default Table;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728790557078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n interface Recycling {\n@@ -19,8 +19,14 @@\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n   const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n+  useEffect(() => {\n+    if (account) {\n+      getRecycling();\n+    }\n+  }, [account]);\n+\n   const getRecycling = async () => {\n     const payload = {\n       function:\n         `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n@@ -77,26 +83,25 @@\n                 <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n-              {recyclings.length > 0 ? (\n-                recyclings.flatMap((recyclingArray, index) =>\n-                  recyclingArray.map((recycling, subIndex) => (\n-                    <tr \n-                      key={`${index}-${subIndex}`} \n-                      onClick={() => handleRowClick(recycling)} \n-                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n-                    >\n-                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    </tr>\n-                  ))\n-                )\n-              ) : (\n+              {recyclings.flatMap((recyclingArray, index) =>\n+                recyclingArray.map((recycling, subIndex) => (\n+                  <tr \n+                    key={`${index}-${subIndex}`} \n+                    onClick={() => handleRowClick(recycling)} \n+                    className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                  >\n+                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                  </tr>\n+                ))\n+              )}\n+              {recyclings.length === 0 && (\n                 <tr>\n                   <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n                 </tr>\n               )}\n@@ -109,9 +114,9 @@\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n@@ -123,5 +128,5 @@\n     </div>\n   );\n };\n \n-export default Table;\n\\ No newline at end of file\n+export default Table;\n"
                },
                {
                    "date": 1728790674665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   };\n \n   return (\n     <div className=\"flex justify-center\">\n-      <div className=\"w-full max-w-3xl\">\n+      <div className=\"w-full max-w-4xl p-4\">\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n"
                },
                {
                    "date": 1728790744560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   };\n \n   return (\n     <div className=\"flex justify-center\">\n-      <div className=\"w-full max-w-4xl p-4\">\n+      <div className=\"w-full max-w-4xl p-4w-full max-w-5xl p-4\">\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n"
                },
                {
                    "date": 1728790766850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   };\n \n   return (\n     <div className=\"flex justify-center\">\n-      <div className=\"w-full max-w-4xl p-4w-full max-w-5xl p-4\">\n+      <div className=\"w-full\">\n         {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n"
                },
                {
                    "date": 1728790793431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full\">\n         {recyclings.length > 0 && (\n-          <table className=\"min-w-full bg-white border border-gray-200\">\n+          <table className=\"w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n                 <th className=\"px-4 py-2 border\">Type</th>\n                 <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728790866626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,11 +69,11 @@\n   };\n \n   return (\n     <div className=\"flex justify-center\">\n-      <div className=\"w-full\">\n+      <div className=\"w-full max-w-3xl\">\n         {recyclings.length > 0 && (\n-          <table className=\"w-full bg-white border border-gray-200\">\n+          <table className=\"w-4/5 mx-auto bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n                 <th className=\"px-4 py-2 border\">Type</th>\n                 <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728790884707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full max-w-3xl\">\n         {recyclings.length > 0 && (\n-          <table className=\"w-4/5 mx-auto bg-white border border-gray-200\">\n+          <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n                 <th className=\"px-4 py-2 border\">Type</th>\n                 <th className=\"px-4 py-2 border\">Ubication</th>\n"
                },
                {
                    "date": 1728790892739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from \"react\";\n+import React, { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n interface Recycling {\n@@ -19,14 +19,8 @@\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n   const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n-  useEffect(() => {\n-    if (account) {\n-      getRecycling();\n-    }\n-  }, [account]);\n-\n   const getRecycling = async () => {\n     const payload = {\n       function:\n         `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n@@ -83,25 +77,26 @@\n                 <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n-              {recyclings.flatMap((recyclingArray, index) =>\n-                recyclingArray.map((recycling, subIndex) => (\n-                  <tr \n-                    key={`${index}-${subIndex}`} \n-                    onClick={() => handleRowClick(recycling)} \n-                    className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n-                  >\n-                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                  </tr>\n-                ))\n-              )}\n-              {recyclings.length === 0 && (\n+              {recyclings.length > 0 ? (\n+                recyclings.flatMap((recyclingArray, index) =>\n+                  recyclingArray.map((recycling, subIndex) => (\n+                    <tr \n+                      key={`${index}-${subIndex}`} \n+                      onClick={() => handleRowClick(recycling)} \n+                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                    >\n+                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                    </tr>\n+                  ))\n+                )\n+              ) : (\n                 <tr>\n                   <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n                 </tr>\n               )}\n@@ -114,9 +109,9 @@\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n@@ -128,5 +123,5 @@\n     </div>\n   );\n };\n \n-export default Table;\n+export default Table;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728791007072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n-import React, { useState } from \"react\";\n+import React, { useEffect, useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n+// Define la interfaz Recycling\n interface Recycling {\n   type: string;\n   ubication: string;\n   weight: number;\n@@ -11,40 +12,43 @@\n   chats: [];\n   available: boolean;\n }\n \n+// Inicializa Aptos\n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Table = () => {\n   const { account } = useWallet();\n-  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n+  const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n   const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n+  useEffect(() => {\n+    if (account?.address) {\n+      getRecycling(); // Llama a la función al montar el componente\n+    }\n+  }, [account]);\n+\n   const getRecycling = async () => {\n     const payload = {\n-      function:\n-        `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n+      function: `${ADDRESS}::recicly::get_all_recyclings`,\n       functionArguments: [`${account?.address}`],\n     };\n     try {\n       const result: any = await aptos.view({ payload });\n-      console.log(\"Resultado de reciclajes:\", result[0]);\n+      console.log(\"Resultado de reciclajes:\", result);\n \n       if (Array.isArray(result) && result.length > 0) {\n-        const extractedRecyclings: Recycling[][] = result.map(\n-          (recyclingArray: any[]) =>\n-            recyclingArray.map((recycling: any) => ({\n-              owner: recycling.owner,\n-              type: recycling.type || \"N/A\",\n-              ubication: recycling.ubication || \"N/A\",\n-              weight: recycling.weight || 0,\n-              pricePound: recycling.pricePound || 0,\n-              observations: recycling.observations || \"N/A\",\n-              chats: recycling.chats || [],\n-              available: recycling.available || false,\n-            }))\n-        );\n+        const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n+          owner: recycling.owner,\n+          type: recycling.type || \"N/A\",\n+          ubication: recycling.ubication || \"N/A\",\n+          weight: recycling.weight || 0,\n+          pricePound: recycling.pricePound || 0,\n+          observations: recycling.observations || \"N/A\",\n+          chats: recycling.chats || [],\n+          available: recycling.available || false,\n+        }));\n \n         setRecyclings(extractedRecyclings);\n       } else {\n         console.error(\"No se encontraron reciclajes\");\n@@ -64,9 +68,9 @@\n \n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full max-w-3xl\">\n-        {recyclings.length > 0 && (\n+        {recyclings.length > 0 ? (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n                 <th className=\"px-4 py-2 border\">Type</th>\n@@ -77,41 +81,35 @@\n                 <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n-              {recyclings.length > 0 ? (\n-                recyclings.flatMap((recyclingArray, index) =>\n-                  recyclingArray.map((recycling, subIndex) => (\n-                    <tr \n-                      key={`${index}-${subIndex}`} \n-                      onClick={() => handleRowClick(recycling)} \n-                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n-                    >\n-                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    </tr>\n-                  ))\n-                )\n-              ) : (\n-                <tr>\n-                  <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n+              {recyclings.map((recycling, index) => (\n+                <tr \n+                  key={index} \n+                  onClick={() => handleRowClick(recycling)} \n+                  className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                >\n+                  <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                  <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                  <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                  <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                  <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                  <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n                 </tr>\n-              )}\n+              ))}\n             </tbody>\n           </table>\n+        ) : (\n+          <p>No hay reciclajes disponibles</p>\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n@@ -123,5 +121,5 @@\n     </div>\n   );\n };\n \n-export default Table;\n\\ No newline at end of file\n+export default Table;\n"
                },
                {
                    "date": 1728791076440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n-import React, { useEffect, useState } from \"react\";\n+import React, { useState } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n-// Define la interfaz Recycling\n interface Recycling {\n   type: string;\n   ubication: string;\n   weight: number;\n@@ -12,43 +11,40 @@\n   chats: [];\n   available: boolean;\n }\n \n-// Inicializa Aptos\n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Table = () => {\n   const { account } = useWallet();\n-  const [recyclings, setRecyclings] = useState<Recycling[]>([]);\n+  const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n   const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n-  useEffect(() => {\n-    if (account?.address) {\n-      getRecycling(); // Llama a la función al montar el componente\n-    }\n-  }, [account]);\n-\n   const getRecycling = async () => {\n     const payload = {\n-      function: `${ADDRESS}::recicly::get_all_recyclings`,\n+      function:\n+        `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n       functionArguments: [`${account?.address}`],\n     };\n     try {\n       const result: any = await aptos.view({ payload });\n-      console.log(\"Resultado de reciclajes:\", result);\n+      console.log(\"Resultado de reciclajes:\", result[0]);\n \n       if (Array.isArray(result) && result.length > 0) {\n-        const extractedRecyclings: Recycling[] = result.map((recycling: any) => ({\n-          owner: recycling.owner,\n-          type: recycling.type || \"N/A\",\n-          ubication: recycling.ubication || \"N/A\",\n-          weight: recycling.weight || 0,\n-          pricePound: recycling.pricePound || 0,\n-          observations: recycling.observations || \"N/A\",\n-          chats: recycling.chats || [],\n-          available: recycling.available || false,\n-        }));\n+        const extractedRecyclings: Recycling[][] = result.map(\n+          (recyclingArray: any[]) =>\n+            recyclingArray.map((recycling: any) => ({\n+              owner: recycling.owner,\n+              type: recycling.type || \"N/A\",\n+              ubication: recycling.ubication || \"N/A\",\n+              weight: recycling.weight || 0,\n+              pricePound: recycling.pricePound || 0,\n+              observations: recycling.observations || \"N/A\",\n+              chats: recycling.chats || [],\n+              available: recycling.available || false,\n+            }))\n+        );\n \n         setRecyclings(extractedRecyclings);\n       } else {\n         console.error(\"No se encontraron reciclajes\");\n@@ -68,9 +64,9 @@\n \n   return (\n     <div className=\"flex justify-center\">\n       <div className=\"w-full max-w-3xl\">\n-        {recyclings.length > 0 ? (\n+        {recyclings.length > 0 && (\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead className=\"bg-blue-500 text-white\">\n               <tr>\n                 <th className=\"px-4 py-2 border\">Type</th>\n@@ -81,35 +77,41 @@\n                 <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n-              {recyclings.map((recycling, index) => (\n-                <tr \n-                  key={index} \n-                  onClick={() => handleRowClick(recycling)} \n-                  className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n-                >\n-                  <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                  <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                  <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                  <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                  <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                  <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+              {recyclings.length > 0 ? (\n+                recyclings.flatMap((recyclingArray, index) =>\n+                  recyclingArray.map((recycling, subIndex) => (\n+                    <tr \n+                      key={`${index}-${subIndex}`} \n+                      onClick={() => handleRowClick(recycling)} \n+                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                    >\n+                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                    </tr>\n+                  ))\n+                )\n+              ) : (\n+                <tr>\n+                  <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n                 </tr>\n-              ))}\n+              )}\n             </tbody>\n           </table>\n-        ) : (\n-          <p>No hay reciclajes disponibles</p>\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n@@ -122,4 +124,5 @@\n   );\n };\n \n export default Table;\n+\n"
                },
                {
                    "date": 1728791131607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,5 +124,4 @@\n   );\n };\n \n export default Table;\n-\n"
                },
                {
                    "date": 1728791160480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n interface Recycling {\n@@ -19,8 +19,14 @@\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n   const [selectedRecycling, setSelectedRecycling] = useState<Recycling | null>(null);\n \n+  useEffect(() => {\n+    if (account) {\n+      getRecycling();\n+    }\n+  }, [account]);\n+\n   const getRecycling = async () => {\n     const payload = {\n       function:\n         `${ADDRESS}::recicly::get_all_recyclings` as `${string}::${string}::${string}`,\n@@ -77,26 +83,25 @@\n                 <th className=\"px-4 py-2 border\">Available</th>\n               </tr>\n             </thead>\n             <tbody>\n-              {recyclings.length > 0 ? (\n-                recyclings.flatMap((recyclingArray, index) =>\n-                  recyclingArray.map((recycling, subIndex) => (\n-                    <tr \n-                      key={`${index}-${subIndex}`} \n-                      onClick={() => handleRowClick(recycling)} \n-                      className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n-                    >\n-                      <td className=\"px-4 py-2 border\">{recycling.type}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n-                      <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    </tr>\n-                  ))\n-                )\n-              ) : (\n+              {recyclings.flatMap((recyclingArray, index) =>\n+                recyclingArray.map((recycling, subIndex) => (\n+                  <tr \n+                    key={`${index}-${subIndex}`} \n+                    onClick={() => handleRowClick(recycling)} \n+                    className=\"hover:bg-blue-200 cursor-pointer transition-colors duration-200\"\n+                  >\n+                    <td className=\"px-4 py-2 border\">{recycling.type}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                  </tr>\n+                ))\n+              )}\n+              {recyclings.length === 0 && (\n                 <tr>\n                   <td colSpan={6} className=\"text-center\">No hay reciclajes disponibles</td>\n                 </tr>\n               )}\n@@ -109,9 +114,9 @@\n             <div className=\"bg-white rounded-lg p-6\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n-              <p><strong>Weigth:</strong> {selectedRecycling.weight}</p>\n+              <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n"
                },
                {
                    "date": 1728791826155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,10 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">Close</button>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 bg-red-500 text-white rounded\">See Chat</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2block w-full rounded-md text-center bg-orange-600 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728791833210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2block w-full rounded-md text-center bg-orange-600 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728792422375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-            <div className=\"bg-white rounded-lg p-6\">\n+            <div className=\" bg-white rounded-lg p-6 w-11/12 max-w-lg md:max-w-xl lg:max-w-2xl\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n"
                },
                {
                    "date": 1728792480538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-            <div className=\" bg-white rounded-lg p-6 w-11/12 max-w-lg md:max-w-xl lg:max-w-2xl\">\n+            <div className=\" bg-white rounded-lg p-6 w-2/3 max-w-lg md:max-w-xl lg:max-w-2xl\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n"
                },
                {
                    "date": 1728792614100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2block w-full rounded-md text-center bg-orange-600 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-2 py-1 block w-full rounded-md text-center bg-orange-600 text-xs font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n"
                },
                {
                    "date": 1728792630608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-2 py-1 block w-full rounded-md text-center bg-orange-600 text-xs font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2block w-full rounded-md text-center bg-orange-600 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n"
                },
                {
                    "date": 1728792691891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2block w-full rounded-md text-center bg-orange-600 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n"
                },
                {
                    "date": 1728792710433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-full rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728792889144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,12 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <div>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n+              <div/>\n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728792903369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <div>\n+              <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               <div/>\n             </div>\n"
                },
                {
                    "date": 1728792926194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,12 +118,10 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n-              <div/>\n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728793001827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,13 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <div>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n+              </div>\n+              \n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728793022418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,13 +118,12 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <div>\n+              <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n-              \n             </div>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728793083988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-9 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n             </div>\n           </div>\n"
                },
                {
                    "date": 1728793114954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,10 @@\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-9 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n-              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-1/2 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n+              <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n             </div>\n           </div>\n         )}\n"
                },
                {
                    "date": 1728793134961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-            <div className=\" bg-white rounded-lg p-6 w-2/3 max-w-lg md:max-w-xl lg:max-w-2xl\">\n+            <div className=\" bg-white rounded-lg p-6 w-1 max-w-lg md:max-w-xl lg:max-w-2xl\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n"
                },
                {
                    "date": 1728793147883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-            <div className=\" bg-white rounded-lg p-6 w-1 max-w-lg md:max-w-xl lg:max-w-2xl\">\n+            <div className=\" bg-white rounded-lg p-6 w-32 max-w-lg md:max-w-xl lg:max-w-2xl\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n"
                },
                {
                    "date": 1728793165141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         )}\n         \n         {selectedRecycling && (\n           <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center\">\n-            <div className=\" bg-white rounded-lg p-6 w-32 max-w-lg md:max-w-xl lg:max-w-2xl\">\n+            <div className=\" bg-white rounded-lg p-6 w-96 max-w-lg md:max-w-xl lg:max-w-2xl\">\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n"
                },
                {
                    "date": 1728928547078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useEffect } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+import ADDRESS from \"@/utils/data\";\n \n interface Recycling {\n   type: string;\n   ubication: string;\n@@ -12,9 +13,9 @@\n   available: boolean;\n }\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n+//const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Table = () => {\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n"
                },
                {
                    "date": 1729018155729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,12 @@\n   pricePound: number;\n   observations: string;\n   chats: [];\n   available: boolean;\n+  totalPrice: number;\n }\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n-//const ADDRESS = \"0xfed39611e5ac476394ec5799b1e0ed2a577a47dcfa522ab92df24d5667bc4720\";\n \n const Table = () => {\n   const { account } = useWallet();\n   const [recyclings, setRecyclings] = useState<Recycling[][]>([]);\n@@ -48,8 +48,9 @@\n               pricePound: recycling.pricePound || 0,\n               observations: recycling.observations || \"N/A\",\n               chats: recycling.chats || [],\n               available: recycling.available || false,\n+              totalPrice: recycling.totalPrice || 0,\n             }))\n         );\n \n         setRecyclings(extractedRecyclings);\n"
                },
                {
                    "date": 1729018185670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,10 @@\n                 <th className=\"px-4 py-2 border\">Weight</th>\n                 <th className=\"px-4 py-2 border\">Price Per Pound</th>\n                 <th className=\"px-4 py-2 border\">Observations</th>\n                 <th className=\"px-4 py-2 border\">Available</th>\n+                <th className=\"px-4 py-2 border\">Total Price</th>\n+\n               </tr>\n             </thead>\n             <tbody>\n               {recyclings.flatMap((recyclingArray, index) =>\n"
                },
                {
                    "date": 1729018220099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n                     <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.totalPrice}</td>\n                   </tr>\n                 ))\n               )}\n               {recyclings.length === 0 && (\n"
                },
                {
                    "date": 1729018348830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n                     <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.totalPrice}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.totalPrice = recycling.pricePound*recycling.weight}</td>\n                   </tr>\n                 ))\n               )}\n               {recyclings.length === 0 && (\n@@ -123,8 +123,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n+              <p><strong>Price Total:</strong> {selectedRecycling.totalPrice}</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n"
                },
                {
                    "date": 1729018377538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n               <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <p><strong>Price Total:</strong> {selectedRecycling.totalPrice}</p>\n+              <p><strong>Price Total:</strong> {selectedRecycling.totalPrice = selectedRecycling.pricePound*selectedRecycling.weight}</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n"
                },
                {
                    "date": 1729043688424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n             }))\n         );\n \n         setRecyclings(extractedRecyclings);\n+\n+        \n       } else {\n         console.error(\"No se encontraron reciclajes\");\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1729045067810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         );\n \n         setRecyclings(extractedRecyclings);\n \n-        \n+\n       } else {\n         console.error(\"No se encontraron reciclajes\");\n       }\n     } catch (error) {\n@@ -99,12 +99,12 @@\n                   >\n                     <td className=\"px-4 py-2 border\">{recycling.type}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.pricePound}</td>\n+                    <td className=\"px-4 py-2 border\">octa {recycling.pricePound}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    <td className=\"px-4 py-2 border\">{recycling.totalPrice = recycling.pricePound*recycling.weight}</td>\n+                    <td className=\"px-4 py-2 border\">octa {recycling.totalPrice = recycling.pricePound*recycling.weight}</td>\n                   </tr>\n                 ))\n               )}\n               {recyclings.length === 0 && (\n@@ -122,12 +122,12 @@\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n-              <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound}</p>\n+              <p><strong>Price Per Pound:</strong> octa {selectedRecycling.pricePound}</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <p><strong>Price Total:</strong> {selectedRecycling.totalPrice = selectedRecycling.pricePound*selectedRecycling.weight}</p>\n+              <p><strong>Price Total:</strong> octa {selectedRecycling.totalPrice = selectedRecycling.pricePound*selectedRecycling.weight}</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n"
                },
                {
                    "date": 1729045150629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,12 +99,12 @@\n                   >\n                     <td className=\"px-4 py-2 border\">{recycling.type}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.ubication}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.weight}</td>\n-                    <td className=\"px-4 py-2 border\">octa {recycling.pricePound}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.pricePound}octa</td>\n                     <td className=\"px-4 py-2 border\">{recycling.observations}</td>\n                     <td className=\"px-4 py-2 border\">{recycling.available ? \"Sí\" : \"No\"}</td>\n-                    <td className=\"px-4 py-2 border\">octa {recycling.totalPrice = recycling.pricePound*recycling.weight}</td>\n+                    <td className=\"px-4 py-2 border\">{recycling.totalPrice = recycling.pricePound*recycling.weight}octa</td>\n                   </tr>\n                 ))\n               )}\n               {recyclings.length === 0 && (\n@@ -122,12 +122,12 @@\n               <h2 className=\"text-xl mb-4\">Recycling Overview</h2>\n               <p><strong>Type:</strong> {selectedRecycling.type}</p>\n               <p><strong>Ubication:</strong> {selectedRecycling.ubication}</p>\n               <p><strong>Weight:</strong> {selectedRecycling.weight}</p>\n-              <p><strong>Price Per Pound:</strong> octa {selectedRecycling.pricePound}</p>\n+              <p><strong>Price Per Pound:</strong> {selectedRecycling.pricePound} octa</p>\n               <p><strong>Observations:</strong> {selectedRecycling.observations}</p>\n               <p><strong>Available:</strong> {selectedRecycling.available ? \"Sí\" : \"No\"}</p>\n-              <p><strong>Price Total:</strong> octa {selectedRecycling.totalPrice = selectedRecycling.pricePound*selectedRecycling.weight}</p>\n+              <p><strong>Price Total:</strong>{selectedRecycling.totalPrice = selectedRecycling.pricePound*selectedRecycling.weight} octa</p>\n               <div className=\"flex justify-center mt-4 space-x-4\">\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">Close</button>\n               <button onClick={handleCloseModal} className=\"mt-4 px-4 py-2 block w-32 rounded-md text-center bg-orange-600 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition-transform transform hover:scale-105 duration-300\">See Chat</button>\n               </div>\n"
                }
            ],
            "date": 1728535723510,
            "name": "Commit-0",
            "content": "\nimport * as React from \"react\";\nimport {\n    ColumnDef,\n    ColumnFiltersState,\n    SortingState,\n    VisibilityState,\n    flexRender,\n    getCoreRowModel,\n    getFilteredRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    useReactTable,\n  } from \"@tanstack/react-table\";\n  import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n  import { Button } from \"@/components/ui/button\";\n  import { Checkbox } from \"@/components/ui/checkbox\";\n  import {\n    DropdownMenu,\n    DropdownMenuCheckboxItem,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n  } from \"@/components/ui/dropdown-menu\";\n  import { Input } from \"@/components/ui/input\";\n  import {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n  } from \"@/components/ui/table\";\nconst table = () => {\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    {\n      id: \"3u1reuv4\",\n      amount: 242,\n      status: \"success\",\n      email: \"Abe45@gmail.com\",\n    },\n    {\n      id: \"derv1ws0\",\n      amount: 837,\n      status: \"processing\",\n      email: \"Monserrat44@gmail.com\",\n    },\n    {\n      id: \"5kma53ae\",\n      amount: 874,\n      status: \"success\",\n      email: \"Silas22@gmail.com\",\n    },\n    {\n      id: \"bhqecj4p\",\n      amount: 721,\n      status: \"failed\",\n      email: \"carmella@hotmail.com\",\n    },\n  ];\n\n  export type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  export const columns: ColumnDef<Payment>[] = [\n    {\n      id: \"select\",\n      header: ({ table }) => (\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: \"status\",\n      header: \"Status\",\n      cell: ({ row }) => (\n        <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n      ),\n    },\n    {\n      accessorKey: \"email\",\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          >\n            Email\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n          </Button>\n        );\n      },\n      cell: ({ row }) => (\n        <div className=\"lowercase\">{row.getValue(\"email\")}</div>\n      ),\n    },\n    {\n      accessorKey: \"amount\",\n      header: () => <div className=\"text-right\">Amount</div>,\n      cell: ({ row }) => {\n        const amount = parseFloat(row.getValue(\"amount\"));\n\n        // Format the amount as a dollar amount\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(amount);\n\n        return <div className=\"text-right font-medium\">{formatted}</div>;\n      },\n    },\n    {\n      id: \"actions\",\n      enableHiding: false,\n      cell: ({ row }) => {\n        const payment = row.original;\n\n        return (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem\n                onClick={() => navigator.clipboard.writeText(payment.id)}\n              >\n                Copy payment ID\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>View customer</DropdownMenuItem>\n              <DropdownMenuItem>View payment details</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  export function DataTableDemo() {\n    const [sorting, setSorting] = React.useState<SortingState>([]);\n    const [columnFilters, setColumnFilters] =\n      React.useState<ColumnFiltersState>([]);\n    const [columnVisibility, setColumnVisibility] =\n      React.useState<VisibilityState>({});\n    const [rowSelection, setRowSelection] = React.useState({});\n\n    const table = useReactTable({\n      data,\n      columns,\n      onSortingChange: setSorting,\n      onColumnFiltersChange: setColumnFilters,\n      getCoreRowModel: getCoreRowModel(),\n      getPaginationRowModel: getPaginationRowModel(),\n      getSortedRowModel: getSortedRowModel(),\n      getFilteredRowModel: getFilteredRowModel(),\n      onColumnVisibilityChange: setColumnVisibility,\n      onRowSelectionChange: setRowSelection,\n      state: {\n        sorting,\n        columnFilters,\n        columnVisibility,\n        rowSelection,\n      },\n    });\n\n    return (\n      <div className=\"w-full\">\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter emails...\"\n            value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n            onChange={(event) =>\n              table.getColumn(\"email\")?.setFilterValue(event.target.value)\n            }\n            className=\"max-w-sm\"\n          />\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"ml-auto\">\n                Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      key={column.id}\n                      className=\"capitalize\"\n                      checked={column.getIsVisible()}\n                      onCheckedChange={(value) =>\n                        column.toggleVisibility(!!value)\n                      }\n                    >\n                      {column.id}\n                    </DropdownMenuCheckboxItem>\n                  );\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext()\n                            )}\n                      </TableHead>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && \"selected\"}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <div className=\"flex items-center justify-end space-x-2 py-4\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default table;\n"
        }
    ]
}