{
    "sourceFile": "src/components/chat.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 57,
            "patches": [
                {
                    "date": 1728682522730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728683058143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50\">\n+    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border-b-green-700\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n"
                },
                {
                    "date": 1728683174174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-gray-100 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-blue-400 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683187520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-blue-400 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683219696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-5 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683225509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-5 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683233360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-0 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683240318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-0 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683254444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md text-left\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683324208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border-b-green-700\">\n+    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-b-green-700\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n"
                },
                {
                    "date": 1728683356328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-b-green-700\">\n+    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-blue-800\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n         <h3>Chat</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n"
                },
                {
                    "date": 1728683651125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,46 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n \n-const ChatPopup: React.FC = () => {\n+interface ChatPopupProps {\n+  wallet: string;\n+  recyclingId: string; // Identificador único para cada reciclaje\n+}\n+\n+const ChatPopup: React.FC<ChatPopupProps> = ({ wallet, recyclingId }) => {\n   const [messages, setMessages] = useState<string[]>([]);\n   const [newMessage, setNewMessage] = useState<string>(\"\");\n \n+  // Crear una clave única para cada chat basado en la wallet y el recyclingId\n+  const chatKey = `chatMessages_${wallet}_${recyclingId}`;\n+\n+  // Cargar mensajes desde localStorage cuando el componente se monta\n+  useEffect(() => {\n+    const storedMessages = localStorage.getItem(chatKey);\n+    if (storedMessages) {\n+      setMessages(JSON.parse(storedMessages));\n+    }\n+  }, [chatKey]);\n+\n+  // Guardar mensajes en localStorage cuando cambien\n+  useEffect(() => {\n+    localStorage.setItem(chatKey, JSON.stringify(messages));\n+  }, [messages, chatKey]);\n+\n   const handleSendMessage = () => {\n     if (newMessage.trim() !== \"\") {\n       setMessages([...messages, newMessage]);\n       setNewMessage(\"\");\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-blue-800\">\n+    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n-        <h3>Chat</h3>\n+        <h3>Chat - {wallet}</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md text-left\">{message}</p>\n+          <p key={index} className=\"bg-gray-100 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683707064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n   return (\n     <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n-        <h3>Chat - {wallet}</h3>\n+        <h3>Chat - {recyclingId}</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n           <p key={index} className=\"bg-gray-100 p-2 my-2 rounded-md\">{message}</p>\n"
                },
                {
                    "date": 1728683762189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50\">\n+    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-blue-600\">\n       <div className=\"bg-blue-500 text-white p-3 text-center\">\n         <h3>Chat - {recyclingId}</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n"
                },
                {
                    "date": 1728683797037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         <h3>Chat - {recyclingId}</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-gray-100 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-300 p-2 my-2 rounded-md\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683817555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         <h3>Chat - {recyclingId}</h3>\n       </div>\n       <div className=\"p-4 h-64 overflow-y-auto\">\n         {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-300 p-2 my-2 rounded-md\">{message}</p>\n+          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md text-left\">{message}</p>\n         ))}\n       </div>\n       <div className=\"p-2 border-t\">\n         <input\n"
                },
                {
                    "date": 1728683847548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           className=\"w-full p-2 border rounded-md\"\n         />\n         <button\n           onClick={handleSendMessage}\n-          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md\"\n+          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md transition-shadow hover:shadow-md\"\n         >\n           Enviar\n         </button>\n       </div>\n"
                },
                {
                    "date": 1728683872135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           className=\"w-full p-2 border rounded-md\"\n         />\n         <button\n           onClick={handleSendMessage}\n-          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md transition-shadow hover:shadow-md\"\n+          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md transition-transform transform hover:scale-105 duration-300\"\n         >\n           Enviar\n         </button>\n       </div>\n"
                },
                {
                    "date": 1728687325724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+import React, { useEffect, useState } from \"react\";\n+\n+interface Message {\n+  sender: string;\n+  message: string;\n+  timestamp: Date;\n+}\n+\n+interface ChatProps {\n+  recyclingId: string; // ID del reciclaje\n+  publicadorWallet: string; // Wallet del publicador\n+}\n+\n+const ChatComponent: React.FC<ChatProps> = ({ recyclingId, publicadorWallet }) => {\n+  const [messages, setMessages] = useState<Message[]>([]);\n+  const [inputMessage, setInputMessage] = useState(\"\");\n+\n+  useEffect(() => {\n+    const fetchMessages = async () => {\n+      const response = await fetch(`/api/chats/recycling/${recyclingId}`);\n+      const data = await response.json();\n+      setMessages(data.messages || []); // Asegúrate de que esto coincida con la respuesta de tu API\n+    };\n+\n+    fetchMessages();\n+  }, [recyclingId]);\n+\n+  const handleSendMessage = async () => {\n+    if (inputMessage.trim()) {\n+      const sender = \"0xYourWalletAddress\"; // Wallet del reciclador\n+      const response = await fetch(`/api/chats/${recyclingId}/messages`, {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify({ sender, message: inputMessage }),\n+      });\n+\n+      const updatedChat = await response.json();\n+      setMessages(updatedChat.messages); // Actualiza los mensajes mostrados\n+      setInputMessage(\"\"); // Limpia el campo de entrada\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat-container\">\n+      <h2>Chat sobre reciclaje {recyclingId}</h2>\n+      <div className=\"messages\">\n+        {messages.map((msg, index) => (\n+          <div key={index} className={msg.sender === publicadorWallet ? \"sent\" : \"received\"}>\n+            <p>{msg.message}</p>\n+            <span>{new Date(msg.timestamp).toLocaleTimeString()}</span>\n+          </div>\n+        ))}\n+      </div>\n+      <input\n+        type=\"text\"\n+        value={inputMessage}\n+        onChange={(e) => setInputMessage(e.target.value)}\n+        placeholder=\"Escribe tu mensaje...\"\n+      />\n+      <button onClick={handleSendMessage}>Enviar</button>\n+    </div>\n+  );\n+};\n+\n+export default ChatComponent;\n"
                },
                {
                    "date": 1728687816886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,131 +1,73 @@\n-import React, { useEffect, useState } from \"react\";\n+import React, { useState } from \"react\";\n \n-interface Message {\n-  sender: string;\n-  message: string;\n-  timestamp: Date;\n-}\n-\n interface ChatProps {\n   recyclingId: string; // ID del reciclaje\n-  publicadorWallet: string; // Wallet del publicador\n+  onClose: () => void; // Función para manejar el cierre del chat\n }\n \n-const ChatComponent: React.FC<ChatProps> = ({ recyclingId, publicadorWallet }) => {\n-  const [messages, setMessages] = useState<Message[]>([]);\n-  const [inputMessage, setInputMessage] = useState(\"\");\n+const ChatComponent: React.FC<ChatProps> = ({ recyclingId, onClose }) => {\n+  const [topic, setTopic] = useState(\"\");\n+  const [message, setMessage] = useState(\"\");\n \n-  useEffect(() => {\n-    const fetchMessages = async () => {\n-      const response = await fetch(`/api/chats/recycling/${recyclingId}`);\n-      const data = await response.json();\n-      setMessages(data.messages || []); // Asegúrate de que esto coincida con la respuesta de tu API\n-    };\n-\n-    fetchMessages();\n-  }, [recyclingId]);\n-\n   const handleSendMessage = async () => {\n-    if (inputMessage.trim()) {\n-      const sender = \"0xYourWalletAddress\"; // Wallet del reciclador\n-      const response = await fetch(`/api/chats/${recyclingId}/messages`, {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        body: JSON.stringify({ sender, message: inputMessage }),\n-      });\n+    if (topic.trim() && message.trim()) {\n+      try {\n+        // Llama a tu API para crear un nuevo chat\n+        const response = await fetch(`/api/chats/${recyclingId}`, {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ topic, message }),\n+        });\n \n-      const updatedChat = await response.json();\n-      setMessages(updatedChat.messages); // Actualiza los mensajes mostrados\n-      setInputMessage(\"\"); // Limpia el campo de entrada\n+        if (response.ok) {\n+          // Limpia los campos de entrada\n+          setTopic(\"\");\n+          setMessage(\"\");\n+          // Aquí puedes manejar la lógica adicional si es necesario\n+        } else {\n+          // Manejo de errores\n+          console.error(\"Error al enviar el mensaje.\");\n+        }\n+      } catch (error) {\n+        console.error(\"Error en la comunicación con el servidor:\", error);\n+      }\n     }\n   };\n \n   return (\n     <div className=\"chat-container\">\n       <h2>Chat sobre reciclaje {recyclingId}</h2>\n-      <div className=\"messages\">\n-        {messages.map((msg, index) => (\n-          <div key={index} className={msg.sender === publicadorWallet ? \"sent\" : \"received\"}>\n-            <p>{msg.message}</p>\n-            <span>{new Date(msg.timestamp).toLocaleTimeString()}</span>\n-          </div>\n-        ))}\n-      </div>\n-      <input\n-        type=\"text\"\n-        value={inputMessage}\n-        onChange={(e) => setInputMessage(e.target.value)}\n-        placeholder=\"Escribe tu mensaje...\"\n-      />\n-      <button onClick={handleSendMessage}>Enviar</button>\n-    </div>\n-  );\n-};\n-\n-export default ChatComponent;\n-import React, { useState, useEffect } from 'react';\n-\n-interface ChatPopupProps {\n-  wallet: string;\n-  recyclingId: string; // Identificador único para cada reciclaje\n-}\n-\n-const ChatPopup: React.FC<ChatPopupProps> = ({ wallet, recyclingId }) => {\n-  const [messages, setMessages] = useState<string[]>([]);\n-  const [newMessage, setNewMessage] = useState<string>(\"\");\n-\n-  // Crear una clave única para cada chat basado en la wallet y el recyclingId\n-  const chatKey = `chatMessages_${wallet}_${recyclingId}`;\n-\n-  // Cargar mensajes desde localStorage cuando el componente se monta\n-  useEffect(() => {\n-    const storedMessages = localStorage.getItem(chatKey);\n-    if (storedMessages) {\n-      setMessages(JSON.parse(storedMessages));\n-    }\n-  }, [chatKey]);\n-\n-  // Guardar mensajes en localStorage cuando cambien\n-  useEffect(() => {\n-    localStorage.setItem(chatKey, JSON.stringify(messages));\n-  }, [messages, chatKey]);\n-\n-  const handleSendMessage = () => {\n-    if (newMessage.trim() !== \"\") {\n-      setMessages([...messages, newMessage]);\n-      setNewMessage(\"\");\n-    }\n-  };\n-\n-  return (\n-    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50 border border-blue-600\">\n-      <div className=\"bg-blue-500 text-white p-3 text-center\">\n-        <h3>Chat - {recyclingId}</h3>\n-      </div>\n-      <div className=\"p-4 h-64 overflow-y-auto\">\n-        {messages.map((message, index) => (\n-          <p key={index} className=\"bg-green-200 p-2 my-2 rounded-md text-left\">{message}</p>\n-        ))}\n-      </div>\n-      <div className=\"p-2 border-t\">\n+      <div>\n         <input\n           type=\"text\"\n-          value={newMessage}\n-          onChange={(e) => setNewMessage(e.target.value)}\n-          placeholder=\"Escribe un mensaje...\"\n-          className=\"w-full p-2 border rounded-md\"\n+          placeholder=\"Tema\"\n+          value={topic}\n+          onChange={(e) => setTopic(e.target.value)}\n+          className=\"border rounded p-2 w-full\"\n         />\n-        <button\n-          onClick={handleSendMessage}\n-          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md transition-transform transform hover:scale-105 duration-300\"\n-        >\n-          Enviar\n-        </button>\n+        <textarea\n+          placeholder=\"Mensaje\"\n+          value={message}\n+          onChange={(e) => setMessage(e.target.value)}\n+          className=\"border rounded p-2 w-full mt-2\"\n+        />\n       </div>\n+      <button\n+        onClick={handleSendMessage}\n+        className=\"bg-blue-500 text-white px-4 py-2 rounded mt-2\"\n+      >\n+        Enviar\n+      </button>\n+      <button\n+        onClick={onClose}\n+        className=\"bg-gray-500 text-white px-4 py-2 rounded mt-2 ml-2\"\n+      >\n+        Cerrar\n+      </button>\n     </div>\n   );\n };\n \n-export default ChatPopup;\n+export default ChatComponent;\n"
                },
                {
                    "date": 1728688006477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,93 @@\n import React, { useState } from \"react\";\n \n-interface ChatProps {\n-  recyclingId: string; // ID del reciclaje\n-  onClose: () => void; // Función para manejar el cierre del chat\n-}\n+const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n+  message,\n+  isUser,\n+}) => {\n+  return (\n+    <div\n+      className={`flex ${\n+        isUser ? \"justify-end\" : \"justify-start\"\n+      } mb-2`}\n+    >\n+      <div\n+        className={`p-2 rounded-lg max-w-xs text-white ${\n+          isUser ? \"bg-blue-500\" : \"bg-gray-500\"\n+        }`}\n+      >\n+        {message}\n+      </div>\n+    </div>\n+  );\n+};\n \n-const ChatComponent: React.FC<ChatProps> = ({ recyclingId, onClose }) => {\n+const ChatComponent: React.FC<{ recyclingId: string; onClose: () => void }> = ({\n+  recyclingId,\n+  onClose,\n+}) => {\n   const [topic, setTopic] = useState(\"\");\n   const [message, setMessage] = useState(\"\");\n+  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n \n   const handleSendMessage = async () => {\n     if (topic.trim() && message.trim()) {\n-      try {\n-        // Llama a tu API para crear un nuevo chat\n-        const response = await fetch(`/api/chats/${recyclingId}`, {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-          },\n-          body: JSON.stringify({ topic, message }),\n-        });\n+      const newMessage = { text: message, isUser: true };\n+      setMessages((prevMessages) => [...prevMessages, newMessage]);\n \n-        if (response.ok) {\n-          // Limpia los campos de entrada\n-          setTopic(\"\");\n-          setMessage(\"\");\n-          // Aquí puedes manejar la lógica adicional si es necesario\n-        } else {\n-          // Manejo de errores\n-          console.error(\"Error al enviar el mensaje.\");\n-        }\n-      } catch (error) {\n-        console.error(\"Error en la comunicación con el servidor:\", error);\n+      // Llama a tu API para crear un nuevo chat\n+      const response = await fetch(`/api/chats/${recyclingId}`, {\n+        method: \"POST\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify({ topic, message }),\n+      });\n+\n+      if (response.ok) {\n+        // Aquí podrías añadir la respuesta del servidor al chat si es necesario\n+        setMessage(\"\"); // Limpia el campo de mensaje\n+      } else {\n+        console.error(\"Error al enviar el mensaje.\");\n       }\n     }\n   };\n \n   return (\n-    <div className=\"chat-container\">\n-      <h2>Chat sobre reciclaje {recyclingId}</h2>\n-      <div>\n+    <div className=\"fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300\">\n+      <div className=\"p-4 border-b bg-gray-200 flex justify-between\">\n+        <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n+        <button onClick={onClose} className=\"text-gray-500 hover:text-red-500\">\n+          X\n+        </button>\n+      </div>\n+      <div className=\"p-4 h-64 overflow-y-auto\">\n+        {messages.map((msg, index) => (\n+          <ChatBubble key={index} message={msg.text} isUser={msg.isUser} />\n+        ))}\n+      </div>\n+      <div className=\"p-4 flex\">\n         <input\n           type=\"text\"\n           placeholder=\"Tema\"\n           value={topic}\n           onChange={(e) => setTopic(e.target.value)}\n-          className=\"border rounded p-2 w-full\"\n+          className=\"border rounded-l-md p-2 flex-1\"\n         />\n-        <textarea\n+        <input\n+          type=\"text\"\n           placeholder=\"Mensaje\"\n           value={message}\n           onChange={(e) => setMessage(e.target.value)}\n-          className=\"border rounded p-2 w-full mt-2\"\n+          className=\"border rounded-l-md p-2 flex-1 ml-2\"\n         />\n+        <button\n+          onClick={handleSendMessage}\n+          className=\"bg-blue-500 text-white px-4 rounded-md ml-2\"\n+        >\n+          Enviar\n+        </button>\n       </div>\n-      <button\n-        onClick={handleSendMessage}\n-        className=\"bg-blue-500 text-white px-4 py-2 rounded mt-2\"\n-      >\n-        Enviar\n-      </button>\n-      <button\n-        onClick={onClose}\n-        className=\"bg-gray-500 text-white px-4 py-2 rounded mt-2 ml-2\"\n-      >\n-        Cerrar\n-      </button>\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1728688149656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n           type=\"text\"\n           placeholder=\"Mensaje\"\n           value={message}\n           onChange={(e) => setMessage(e.target.value)}\n-          className=\"border rounded-l-md p-2 flex-1 ml-2\"\n+          className=\"border p-2 flex-1 ml-2\"\n         />\n         <button\n           onClick={handleSendMessage}\n           className=\"bg-blue-500 text-white px-4 rounded-md ml-2\"\n"
                },
                {
                    "date": 1728688278483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n }) => {\n   const [topic, setTopic] = useState(\"\");\n   const [message, setMessage] = useState(\"\");\n   const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n+  const [isMinimized, setIsMinimized] = useState(false);\n \n   const handleSendMessage = async () => {\n     if (topic.trim() && message.trim()) {\n       const newMessage = { text: message, isUser: true };\n@@ -43,51 +44,54 @@\n         body: JSON.stringify({ topic, message }),\n       });\n \n       if (response.ok) {\n-        // Aquí podrías añadir la respuesta del servidor al chat si es necesario\n         setMessage(\"\"); // Limpia el campo de mensaje\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n       }\n     }\n   };\n \n   return (\n-    <div className=\"fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300\">\n-      <div className=\"p-4 border-b bg-gray-200 flex justify-between\">\n+    <div className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${isMinimized ? \"transform translate-y-full\" : \"\"}`}>\n+      <div className=\"p-4 border-b bg-gray-200 flex justify-between items-center\">\n         <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n-        <button onClick={onClose} className=\"text-gray-500 hover:text-red-500\">\n-          X\n+        <button onClick={() => setIsMinimized(!isMinimized)} className=\"text-gray-500 hover:text-blue-500\">\n+          {isMinimized ? \"🡱\" : \"🡳\"}\n         </button>\n       </div>\n-      <div className=\"p-4 h-64 overflow-y-auto\">\n-        {messages.map((msg, index) => (\n-          <ChatBubble key={index} message={msg.text} isUser={msg.isUser} />\n-        ))}\n-      </div>\n-      <div className=\"p-4 flex\">\n-        <input\n-          type=\"text\"\n-          placeholder=\"Tema\"\n-          value={topic}\n-          onChange={(e) => setTopic(e.target.value)}\n-          className=\"border rounded-l-md p-2 flex-1\"\n-        />\n-        <input\n-          type=\"text\"\n-          placeholder=\"Mensaje\"\n-          value={message}\n-          onChange={(e) => setMessage(e.target.value)}\n-          className=\"border p-2 flex-1 ml-2\"\n-        />\n-        <button\n-          onClick={handleSendMessage}\n-          className=\"bg-blue-500 text-white px-4 rounded-md ml-2\"\n-        >\n-          Enviar\n-        </button>\n-      </div>\n+      {!isMinimized && (\n+        <>\n+          <div className=\"p-4 h-64 overflow-y-auto\">\n+            {messages.map((msg, index) => (\n+              <ChatBubble key={index} message={msg.text} isUser={msg.isUser} />\n+            ))}\n+          </div>\n+          <div className=\"p-4\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Tema\"\n+              value={topic}\n+              onChange={(e) => setTopic(e.target.value)}\n+              className=\"border rounded-md p-2 w-full mb-2\"\n+            />\n+            <input\n+              type=\"text\"\n+              placeholder=\"Mensaje\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              className=\"border rounded-md p-2 w-full mb-2\"\n+            />\n+            <button\n+              onClick={handleSendMessage}\n+              className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n+            >\n+              Enviar\n+            </button>\n+          </div>\n+        </>\n+      )}\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1728688378835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,14 @@\n         method: \"POST\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n         },\n-        body: JSON.stringify({ topic, message }),\n+        body: JSON.stringify({ topic, message }), // Enviar tanto el tema como el mensaje\n       });\n \n       if (response.ok) {\n         setMessage(\"\"); // Limpia el campo de mensaje\n+        setTopic(\"\");   // Limpia el campo de tema\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n       }\n     }\n"
                },
                {
                    "date": 1728688607915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n \n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n@@ -29,12 +29,21 @@\n   const [message, setMessage] = useState(\"\");\n   const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n   const [isMinimized, setIsMinimized] = useState(false);\n \n+  useEffect(() => {\n+    // Cargar el historial del chat desde localStorage al montar el componente\n+    const savedMessages = localStorage.getItem(`chat_${recyclingId}`);\n+    if (savedMessages) {\n+      setMessages(JSON.parse(savedMessages));\n+    }\n+  }, [recyclingId]);\n+\n   const handleSendMessage = async () => {\n     if (topic.trim() && message.trim()) {\n       const newMessage = { text: message, isUser: true };\n-      setMessages((prevMessages) => [...prevMessages, newMessage]);\n+      const updatedMessages = [...messages, newMessage];\n+      setMessages(updatedMessages);\n \n       // Llama a tu API para crear un nuevo chat\n       const response = await fetch(`/api/chats/${recyclingId}`, {\n         method: \"POST\",\n@@ -44,8 +53,10 @@\n         body: JSON.stringify({ topic, message }), // Enviar tanto el tema como el mensaje\n       });\n \n       if (response.ok) {\n+        // Guardar el nuevo mensaje en localStorage\n+        localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n         setMessage(\"\"); // Limpia el campo de mensaje\n         setTopic(\"\");   // Limpia el campo de tema\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n"
                },
                {
                    "date": 1728688733573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,9 @@\n   message,\n   isUser,\n }) => {\n   return (\n-    <div\n-      className={`flex ${\n-        isUser ? \"justify-end\" : \"justify-start\"\n-      } mb-2`}\n-    >\n+    <div className={`flex ${isUser ? \"justify-end\" : \"justify-start\"} mb-2`}>\n       <div\n         className={`p-2 rounded-lg max-w-xs text-white ${\n           isUser ? \"bg-blue-500\" : \"bg-gray-500\"\n         }`}\n@@ -26,19 +22,26 @@\n   onClose,\n }) => {\n   const [topic, setTopic] = useState(\"\");\n   const [message, setMessage] = useState(\"\");\n-  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n+  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>(\n+    []\n+  );\n   const [isMinimized, setIsMinimized] = useState(false);\n \n+  // Recuperar el historial desde localStorage al cargar el componente\n   useEffect(() => {\n-    // Cargar el historial del chat desde localStorage al montar el componente\n     const savedMessages = localStorage.getItem(`chat_${recyclingId}`);\n     if (savedMessages) {\n       setMessages(JSON.parse(savedMessages));\n     }\n   }, [recyclingId]);\n \n+  // Guardar el historial en localStorage al cerrar el chat o al minimizarlo\n+  const handleSaveChat = () => {\n+    localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(messages));\n+  };\n+\n   const handleSendMessage = async () => {\n     if (topic.trim() && message.trim()) {\n       const newMessage = { text: message, isUser: true };\n       const updatedMessages = [...messages, newMessage];\n@@ -55,21 +58,31 @@\n \n       if (response.ok) {\n         // Guardar el nuevo mensaje en localStorage\n         localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n-        setMessage(\"\"); // Limpia el campo de mensaje\n-        setTopic(\"\");   // Limpia el campo de tema\n+        setMessage(\"\"); // Limpiar campo mensaje\n+        setTopic(\"\");   // Limpiar campo tema\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n       }\n     }\n   };\n \n   return (\n-    <div className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${isMinimized ? \"transform translate-y-full\" : \"\"}`}>\n+    <div\n+      className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n+        isMinimized ? \"transform translate-y-full\" : \"\"\n+      }`}\n+    >\n       <div className=\"p-4 border-b bg-gray-200 flex justify-between items-center\">\n         <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n-        <button onClick={() => setIsMinimized(!isMinimized)} className=\"text-gray-500 hover:text-blue-500\">\n+        <button\n+          onClick={() => {\n+            handleSaveChat(); // Guardar el historial al minimizar\n+            setIsMinimized(!isMinimized);\n+          }}\n+          className=\"text-gray-500 hover:text-blue-500\"\n+        >\n           {isMinimized ? \"🡱\" : \"🡳\"}\n         </button>\n       </div>\n       {!isMinimized && (\n"
                },
                {
                    "date": 1728689021584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,30 +20,44 @@\n const ChatComponent: React.FC<{ recyclingId: string; onClose: () => void }> = ({\n   recyclingId,\n   onClose,\n }) => {\n-  const [topic, setTopic] = useState(\"\");\n+  const [topic, setTopic] = useState<string | null>(null);\n   const [message, setMessage] = useState(\"\");\n   const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>(\n     []\n   );\n   const [isMinimized, setIsMinimized] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n \n   // Recuperar el historial desde localStorage al cargar el componente\n   useEffect(() => {\n     const savedMessages = localStorage.getItem(`chat_${recyclingId}`);\n     if (savedMessages) {\n       setMessages(JSON.parse(savedMessages));\n     }\n+\n+    const savedTopic = localStorage.getItem(`topic_${recyclingId}`);\n+    if (savedTopic) {\n+      setTopic(savedTopic);\n+    }\n   }, [recyclingId]);\n \n   // Guardar el historial en localStorage al cerrar el chat o al minimizarlo\n   const handleSaveChat = () => {\n     localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(messages));\n+    if (topic) {\n+      localStorage.setItem(`topic_${recyclingId}`, topic);\n+    }\n   };\n \n   const handleSendMessage = async () => {\n-    if (topic.trim() && message.trim()) {\n+    if (!topic) {\n+      setError(\"El campo 'Tema' no puede estar vacío.\");\n+      return;\n+    }\n+\n+    if (message.trim()) {\n       const newMessage = { text: message, isUser: true };\n       const updatedMessages = [...messages, newMessage];\n       setMessages(updatedMessages);\n \n@@ -56,68 +70,85 @@\n         body: JSON.stringify({ topic, message }), // Enviar tanto el tema como el mensaje\n       });\n \n       if (response.ok) {\n-        // Guardar el nuevo mensaje en localStorage\n+        setMessage(\"\"); // Limpiar campo mensaje\n+        setError(null); // Limpiar el error\n         localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n-        setMessage(\"\"); // Limpiar campo mensaje\n-        setTopic(\"\");   // Limpiar campo tema\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n       }\n     }\n   };\n \n+  const handleChatClick = () => {\n+    setIsMinimized(false);\n+  };\n+\n   return (\n-    <div\n-      className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n-        isMinimized ? \"transform translate-y-full\" : \"\"\n-      }`}\n-    >\n-      <div className=\"p-4 border-b bg-gray-200 flex justify-between items-center\">\n-        <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n-        <button\n-          onClick={() => {\n-            handleSaveChat(); // Guardar el historial al minimizar\n-            setIsMinimized(!isMinimized);\n-          }}\n-          className=\"text-gray-500 hover:text-blue-500\"\n+    <>\n+      <div\n+        className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n+          isMinimized ? \"transform translate-y-full\" : \"\"\n+        } z-50`} // Asegurar que el chat se superponga a otros elementos\n+      >\n+        <div className=\"p-4 border-b bg-gray-200 flex justify-between items-center\">\n+          <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n+          <button\n+            onClick={() => {\n+              handleSaveChat(); // Guardar el historial al minimizar\n+              setIsMinimized(!isMinimized);\n+            }}\n+            className=\"text-gray-500 hover:text-blue-500\"\n+          >\n+            {isMinimized ? \"🡱\" : \"🡳\"}\n+          </button>\n+        </div>\n+        {!isMinimized && (\n+          <>\n+            <div className=\"p-4 h-64 overflow-y-auto\">\n+              {messages.map((msg, index) => (\n+                <ChatBubble key={index} message={msg.text} isUser={msg.isUser} />\n+              ))}\n+            </div>\n+            <div className=\"p-4\">\n+              <input\n+                type=\"text\"\n+                placeholder=\"Tema\"\n+                value={topic || \"\"}\n+                onChange={(e) => setTopic(e.target.value)}\n+                className=\"border rounded-md p-2 w-full mb-2\"\n+                disabled={!!topic} // Deshabilitar el campo si ya hay un tema\n+              />\n+              <input\n+                type=\"text\"\n+                placeholder=\"Mensaje\"\n+                value={message}\n+                onChange={(e) => setMessage(e.target.value)}\n+                className=\"border rounded-md p-2 w-full mb-2\"\n+              />\n+              {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n+              <button\n+                onClick={handleSendMessage}\n+                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n+              >\n+                Enviar\n+              </button>\n+            </div>\n+          </>\n+        )}\n+      </div>\n+\n+      {/* Botón para maximizar el chat cuando está minimizado */}\n+      {isMinimized && (\n+        <div\n+          className=\"fixed bottom-0 right-0 mb-4 mr-4 w-20 h-10 bg-blue-500 text-white rounded-full flex items-center justify-center cursor-pointer z-50\"\n+          onClick={handleChatClick}\n         >\n-          {isMinimized ? \"🡱\" : \"🡳\"}\n-        </button>\n-      </div>\n-      {!isMinimized && (\n-        <>\n-          <div className=\"p-4 h-64 overflow-y-auto\">\n-            {messages.map((msg, index) => (\n-              <ChatBubble key={index} message={msg.text} isUser={msg.isUser} />\n-            ))}\n-          </div>\n-          <div className=\"p-4\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Tema\"\n-              value={topic}\n-              onChange={(e) => setTopic(e.target.value)}\n-              className=\"border rounded-md p-2 w-full mb-2\"\n-            />\n-            <input\n-              type=\"text\"\n-              placeholder=\"Mensaje\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              className=\"border rounded-md p-2 w-full mb-2\"\n-            />\n-            <button\n-              onClick={handleSendMessage}\n-              className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n-            >\n-              Enviar\n-            </button>\n-          </div>\n-        </>\n+          💬 Chat\n+        </div>\n       )}\n-    </div>\n+    </>\n   );\n };\n \n export default ChatComponent;\n"
                },
                {
                    "date": 1728689229017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     }\n \n     const savedTopic = localStorage.getItem(`topic_${recyclingId}`);\n     if (savedTopic) {\n-      setTopic(savedTopic);\n+      setTopic(savedTopic); // Precargar el tema si ya ha sido guardado\n     }\n   }, [recyclingId]);\n \n   // Guardar el historial en localStorage al cerrar el chat o al minimizarlo\n@@ -70,9 +70,9 @@\n         body: JSON.stringify({ topic, message }), // Enviar tanto el tema como el mensaje\n       });\n \n       if (response.ok) {\n-        setMessage(\"\"); // Limpiar campo mensaje\n+        setMessage(\"\"); // Limpiar el campo de mensaje después de enviar\n         setError(null); // Limpiar el error\n         localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n@@ -116,9 +116,9 @@\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n                 className=\"border rounded-md p-2 w-full mb-2\"\n-                disabled={!!topic} // Deshabilitar el campo si ya hay un tema\n+                disabled={!!topic} // Deshabilitar si ya hay un tema\n               />\n               <input\n                 type=\"text\"\n                 placeholder=\"Mensaje\"\n"
                },
                {
                    "date": 1728689422823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState, useEffect } from \"react\";\n+import { clearLine } from \"readline\";\n \n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n@@ -128,9 +129,9 @@\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n                 onClick={handleSendMessage}\n-                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n+                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clear-start\"\n               >\n                 Enviar\n               </button>\n             </div>\n"
                },
                {
                    "date": 1728689438506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n                 onClick={handleSendMessage}\n-                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clear-start\"\n+                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clean-button\"\n               >\n                 Enviar\n               </button>\n             </div>\n"
                },
                {
                    "date": 1728689502402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n                 onClick={handleSendMessage}\n-                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clean-button\"\n+                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clean-input\"\n               >\n                 Enviar\n               </button>\n             </div>\n"
                },
                {
                    "date": 1728689817986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,12 @@\n                 className=\"border rounded-md p-2 w-full mb-2\"\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n-                onClick={handleSendMessage}\n-                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full clean-input\"\n+                onClick= {async ()=> { await handleSendMessage();\n+                    setMessage(\"\");\n+                }}\n+                className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n               >\n                 Enviar\n               </button>\n             </div>\n"
                },
                {
                    "date": 1728689860083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 type=\"text\"\n                 placeholder=\"Mensaje\"\n                 value={message}\n                 onChange={(e) => setMessage(e.target.value)}\n-                className=\"border rounded-md p-2 w-full mb-2\"\n+                className=\"border rounded-md p-2 w-full mb-2 bg-gray-100\"\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n                 onClick= {async ()=> { await handleSendMessage();\n"
                },
                {
                    "date": 1728689888031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,17 +116,17 @@\n                 type=\"text\"\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className=\"border rounded-md p-2 w-full mb-2\"\n+                className=\"border rounded-md p-2 w-full mb-2  bg-gray-900\"\n                 disabled={!!topic} // Deshabilitar si ya hay un tema\n               />\n               <input\n                 type=\"text\"\n                 placeholder=\"Mensaje\"\n                 value={message}\n                 onChange={(e) => setMessage(e.target.value)}\n-                className=\"border rounded-md p-2 w-full mb-2 bg-gray-100\"\n+                className=\"border rounded-md p-2 w-full mb-2\"\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n                 onClick= {async ()=> { await handleSendMessage();\n"
                },
                {
                    "date": 1728689895449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n                 type=\"text\"\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className=\"border rounded-md p-2 w-full mb-2  bg-gray-900\"\n+                className=\"border rounded-md p-2 w-full mb-2  bg-gray-200\"\n                 disabled={!!topic} // Deshabilitar si ya hay un tema\n               />\n               <input\n                 type=\"text\"\n"
                },
                {
                    "date": 1728690065951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,10 @@\n                 type=\"text\"\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className=\"border rounded-md p-2 w-full mb-2  bg-gray-200\"\n+                className=\"{`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-gray-300' : 'bg-white'}`\"\n+               \n                 disabled={!!topic} // Deshabilitar si ya hay un tema\n               />\n               <input\n                 type=\"text\"\n"
                },
                {
                    "date": 1728690100405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n                 type=\"text\"\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className=\"{`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-gray-300' : 'bg-white'}`\"\n+                className=\"{`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-gray-900' : 'bg-white'}`\"\n                \n                 disabled={!!topic} // Deshabilitar si ya hay un tema\n               />\n               <input\n"
                },
                {
                    "date": 1728691241623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n             <div className=\"p-4\">\n               <input\n                 type=\"text\"\n                 placeholder=\"Tema\"\n-                value={topic || \"\"}\n+                value={topic}\n                 onChange={(e) => setTopic(e.target.value)}\n                 className=\"{`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-gray-900' : 'bg-white'}`\"\n                \n                 disabled={!!topic} // Deshabilitar si ya hay un tema\n"
                },
                {
                    "date": 1728691565145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState, useEffect } from \"react\";\n-import { clearLine } from \"readline\";\n \n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n@@ -23,11 +22,9 @@\n   onClose,\n }) => {\n   const [topic, setTopic] = useState<string | null>(null);\n   const [message, setMessage] = useState(\"\");\n-  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>(\n-    []\n-  );\n+  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n   const [isMinimized, setIsMinimized] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   // Recuperar el historial desde localStorage al cargar el componente\n@@ -114,13 +111,11 @@\n             <div className=\"p-4\">\n               <input\n                 type=\"text\"\n                 placeholder=\"Tema\"\n-                value={topic}\n+                value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className=\"{`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-gray-900' : 'bg-white'}`\"\n-               \n-                disabled={!!topic} // Deshabilitar si ya hay un tema\n+                className={`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-white' : 'bg-gray-300'}`} // Cambia el color de fondo según el tema\n               />\n               <input\n                 type=\"text\"\n                 placeholder=\"Mensaje\"\n@@ -129,11 +124,9 @@\n                 className=\"border rounded-md p-2 w-full mb-2\"\n               />\n               {error && <p className=\"text-red-500 mb-2\">{error}</p>}\n               <button\n-                onClick= {async ()=> { await handleSendMessage();\n-                    setMessage(\"\");\n-                }}\n+                onClick={handleSendMessage}\n                 className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n               >\n                 Enviar\n               </button>\n"
                },
                {
                    "date": 1728693525780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,10 @@\n         localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n       } else {\n         console.error(\"Error al enviar el mensaje.\");\n       }\n+    } else {\n+      setError(\"El mensaje no puede estar vacío.\");\n     }\n   };\n \n   const handleChatClick = () => {\n"
                },
                {
                    "date": 1728695127537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,13 @@\n import React, { useState, useEffect } from \"react\";\n+import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+import axios from 'axios';\n \n+export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n+const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\"\n+const URL = \"https://api.testnet.aptoslabs.com/v1/graphql\";\n+\n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n }) => {\n@@ -83,8 +90,35 @@\n   const handleChatClick = () => {\n     setIsMinimized(false);\n   };\n \n+  const {connect, account, connected, disconnect, signAndSubmitTransaction,\n+    signTransaction, signMessage, \n+    signMessageAndVerify} = useWallet();\n+  \n+  const createChat = async () =>{\n+    if (!account) {\n+        console.error(\"Account is null\");\n+        return;\n+    }\n+\n+    const response = await signAndSubmitTransaction({\n+        sender: account.address,\n+        data:{\n+            function: `${ADDRESS}::recicly::set_chat`,\n+            typeArguments: [],\n+            functionArguments: [],\n+        }\n+    });\n+    //esperar a que la transaccion se complete\n+    try {\n+        await aptos.waitForTransaction({transactionHash: response.hash});\n+    }\n+    catch (error){\n+        console.log(error);\n+    }\n+}\n+\n   return (\n     <>\n       <div\n         className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n"
                },
                {
                    "date": 1728695330156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import React, { useState, useEffect } from \"react\";\n import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n import { useWallet } from '@aptos-labs/wallet-adapter-react';\n-import axios from 'axios';\n \n export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\"\n const URL = \"https://api.testnet.aptoslabs.com/v1/graphql\";\n"
                },
                {
                    "date": 1728695564380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,21 @@\n         console.log(error);\n     }\n }\n \n+const getChat = async () =>{\n+    if (!account) {\n+        console.error(\"Account is null\");\n+        return;\n+    }\n+    const payload = {\n+        function: `${ADDRESS}::recicly::get_chat`,\n+        functionArguments: [`${account.address}`, 4]\n+    }\n+    let result = await aptos.view({payload});\n+    console.log(result);\n+}\n+\n   return (\n     <>\n       <div\n         className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n"
                },
                {
                    "date": 1728695604890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,12 +122,12 @@\n         console.error(\"Account is null\");\n         return;\n     }\n     const payload = {\n-        function: `${ADDRESS}::recicly::get_chat`,\n+        function: `${ADDRESS}::recicly::get_chat` as `${string}::${string}::${string}`,\n         functionArguments: [`${account.address}`, 4]\n-    }\n-    let result = await aptos.view({payload});\n+    };\n+    let result = await aptos.view({ payload });\n     console.log(result);\n }\n \n   return (\n"
                },
                {
                    "date": 1728695682653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,9 @@\n                 className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n               >\n                 Enviar\n               </button>\n+              <button onClick={getChat}>Obtener chat</button>\n             </div>\n           </>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728695838796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { useWallet } from '@aptos-labs/wallet-adapter-react';\n \n export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\"\n-const URL = \"https://api.testnet.aptoslabs.com/v1/graphql\";\n \n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n"
                },
                {
                    "date": 1728696723278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import React, { useState, useEffect } from \"react\";\n-import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from '@aptos-labs/wallet-adapter-react';\n+import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n+import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n \n-export const aptos= new Aptos(new AptosConfig({network: Network.TESTNET}));\n-const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\"\n+export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n+const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\";\n \n const ChatBubble: React.FC<{ message: string; isUser?: boolean }> = ({\n   message,\n   isUser,\n@@ -30,8 +30,9 @@\n   const [message, setMessage] = useState(\"\");\n   const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n   const [isMinimized, setIsMinimized] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n+  const { connect, account, connected, disconnect, signAndSubmitTransaction } = useWallet();\n \n   // Recuperar el historial desde localStorage al cargar el componente\n   useEffect(() => {\n     const savedMessages = localStorage.getItem(`chat_${recyclingId}`);\n@@ -88,48 +89,34 @@\n   const handleChatClick = () => {\n     setIsMinimized(false);\n   };\n \n-  const {connect, account, connected, disconnect, signAndSubmitTransaction,\n-    signTransaction, signMessage, \n-    signMessageAndVerify} = useWallet();\n-  \n-  const createChat = async () =>{\n+  // Obtener el chat del contrato inteligente\n+  const getChat = async () => {\n     if (!account) {\n-        console.error(\"Account is null\");\n-        return;\n+      console.error(\"Account is null\");\n+      return;\n     }\n \n-    const response = await signAndSubmitTransaction({\n-        sender: account.address,\n-        data:{\n-            function: `${ADDRESS}::recicly::set_chat`,\n-            typeArguments: [],\n-            functionArguments: [],\n-        }\n-    });\n-    //esperar a que la transaccion se complete\n+    const payload = {\n+      function: `${ADDRESS}::recicly::get_chat` as `${string}::${string}::${string}`,\n+      functionArguments: [`${account.address}`, recyclingId], // Usar el recyclingId como argumento\n+    };\n+\n     try {\n-        await aptos.waitForTransaction({transactionHash: response.hash});\n+      const result = await aptos.view({ payload });\n+      // Suponiendo que result es un array de mensajes\n+      const chatMessages = result.map((msg: any) => ({\n+        text: msg.message, // Ajusta según la estructura de tu mensaje en el contrato\n+        isUser: false, // Considera que estos son mensajes del otro usuario\n+      }));\n+      setMessages(chatMessages);\n+    } catch (error) {\n+      console.error(\"Error al obtener el chat:\", error);\n+      setError(\"No se pudo obtener el chat.\");\n     }\n-    catch (error){\n-        console.log(error);\n-    }\n-}\n+  };\n \n-const getChat = async () =>{\n-    if (!account) {\n-        console.error(\"Account is null\");\n-        return;\n-    }\n-    const payload = {\n-        function: `${ADDRESS}::recicly::get_chat` as `${string}::${string}::${string}`,\n-        functionArguments: [`${account.address}`, 4]\n-    };\n-    let result = await aptos.view({ payload });\n-    console.log(result);\n-}\n-\n   return (\n     <>\n       <div\n         className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n@@ -176,9 +163,11 @@\n                 className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n               >\n                 Enviar\n               </button>\n-              <button onClick={getChat}>Obtener chat</button>\n+              <button onClick={getChat} className=\"bg-green-500 text-white px-4 py-2 rounded-md w-full\">\n+                Obtener chat\n+              </button>\n             </div>\n           </>\n         )}\n       </div>\n"
                },
                {
                    "date": 1728696816584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from \"react\";\n import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n-import { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n+import { useWallet } from '@aptos-labs/wallet-adapter-react';\n \n export const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }));\n const ADDRESS = \"0x7ba23f3b116da3871b06133fda6f9ba93339b6714213f643a85d608beeaa9044\";\n \n@@ -30,20 +30,19 @@\n   const [message, setMessage] = useState(\"\");\n   const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([]);\n   const [isMinimized, setIsMinimized] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n-  const { connect, account, connected, disconnect, signAndSubmitTransaction } = useWallet();\n+  const { account, signAndSubmitTransaction } = useWallet();\n \n   // Recuperar el historial desde localStorage al cargar el componente\n   useEffect(() => {\n     const savedMessages = localStorage.getItem(`chat_${recyclingId}`);\n     if (savedMessages) {\n       setMessages(JSON.parse(savedMessages));\n     }\n-\n     const savedTopic = localStorage.getItem(`topic_${recyclingId}`);\n     if (savedTopic) {\n-      setTopic(savedTopic); // Precargar el tema si ya ha sido guardado\n+      setTopic(savedTopic);\n     }\n   }, [recyclingId]);\n \n   // Guardar el historial en localStorage al cerrar el chat o al minimizarlo\n@@ -63,24 +62,27 @@\n     if (message.trim()) {\n       const newMessage = { text: message, isUser: true };\n       const updatedMessages = [...messages, newMessage];\n       setMessages(updatedMessages);\n+      setMessage(\"\"); // Limpiar el campo de mensaje después de enviar\n+      setError(null); // Limpiar el error\n+      handleSaveChat(); // Guardar en localStorage\n \n-      // Llama a tu API para crear un nuevo chat\n-      const response = await fetch(`/api/chats/${recyclingId}`, {\n-        method: \"POST\",\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n+      // Guardar el mensaje en el contrato inteligente\n+      const response = await signAndSubmitTransaction({\n+        sender: account?.address,\n+        data: {\n+          function: `${ADDRESS}::recicly::set_chat`,\n+          typeArguments: [],\n+          functionArguments: [topic, message], // Envía el tema y el mensaje al contrato\n         },\n-        body: JSON.stringify({ topic, message }), // Enviar tanto el tema como el mensaje\n       });\n \n-      if (response.ok) {\n-        setMessage(\"\"); // Limpiar el campo de mensaje después de enviar\n-        setError(null); // Limpiar el error\n-        localStorage.setItem(`chat_${recyclingId}`, JSON.stringify(updatedMessages));\n-      } else {\n-        console.error(\"Error al enviar el mensaje.\");\n+      // Esperar a que la transacción se complete\n+      try {\n+        await aptos.waitForTransaction({ transactionHash: response.hash });\n+      } catch (error) {\n+        console.error(\"Error al esperar la transacción:\", error);\n       }\n     } else {\n       setError(\"El mensaje no puede estar vacío.\");\n     }\n@@ -89,46 +91,42 @@\n   const handleChatClick = () => {\n     setIsMinimized(false);\n   };\n \n-  // Obtener el chat del contrato inteligente\n   const getChat = async () => {\n     if (!account) {\n       console.error(\"Account is null\");\n       return;\n     }\n \n     const payload = {\n-      function: `${ADDRESS}::recicly::get_chat` as `${string}::${string}::${string}`,\n-      functionArguments: [`${account.address}`, recyclingId], // Usar el recyclingId como argumento\n+      function: `${ADDRESS}::recicly::get_chat`,\n+      functionArguments: [account.address, recyclingId], // Cambia el argumento según sea necesario\n     };\n-\n+    \n     try {\n       const result = await aptos.view({ payload });\n-      // Suponiendo que result es un array de mensajes\n-      const chatMessages = result.map((msg: any) => ({\n-        text: msg.message, // Ajusta según la estructura de tu mensaje en el contrato\n-        isUser: false, // Considera que estos son mensajes del otro usuario\n-      }));\n-      setMessages(chatMessages);\n+      // Procesar el resultado, por ejemplo, actualiza el estado de los mensajes\n+      console.log(result);\n+      const chatMessages = result.messages || []; // Asegúrate de que el resultado tenga la estructura correcta\n+      setMessages(chatMessages.map((msg: any) => ({ text: msg.text, isUser: msg.isUser }))); // Actualiza el estado de mensajes\n     } catch (error) {\n       console.error(\"Error al obtener el chat:\", error);\n-      setError(\"No se pudo obtener el chat.\");\n     }\n   };\n \n   return (\n     <>\n       <div\n         className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n           isMinimized ? \"transform translate-y-full\" : \"\"\n-        } z-50`} // Asegurar que el chat se superponga a otros elementos\n+        } z-50`}\n       >\n         <div className=\"p-4 border-b bg-gray-200 flex justify-between items-center\">\n           <h2 className=\"text-lg font-semibold\">Chat sobre reciclaje {recyclingId}</h2>\n           <button\n             onClick={() => {\n-              handleSaveChat(); // Guardar el historial al minimizar\n+              handleSaveChat();\n               setIsMinimized(!isMinimized);\n             }}\n             className=\"text-gray-500 hover:text-blue-500\"\n           >\n@@ -147,9 +145,9 @@\n                 type=\"text\"\n                 placeholder=\"Tema\"\n                 value={topic || \"\"}\n                 onChange={(e) => setTopic(e.target.value)}\n-                className={`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-white' : 'bg-gray-300'}`} // Cambia el color de fondo según el tema\n+                className={`border rounded-md p-2 w-full mb-2 ${topic ? 'bg-white' : 'bg-gray-300'}`}\n               />\n               <input\n                 type=\"text\"\n                 placeholder=\"Mensaje\"\n@@ -163,17 +161,14 @@\n                 className=\"bg-blue-500 text-white px-4 py-2 rounded-md w-full\"\n               >\n                 Enviar\n               </button>\n-              <button onClick={getChat} className=\"bg-green-500 text-white px-4 py-2 rounded-md w-full\">\n-                Obtener chat\n-              </button>\n+              <button onClick={getChat}>Obtener chat</button>\n             </div>\n           </>\n         )}\n       </div>\n \n-      {/* Botón para maximizar el chat cuando está minimizado */}\n       {isMinimized && (\n         <div\n           className=\"fixed bottom-0 right-0 mb-4 mr-4 w-20 h-10 bg-blue-500 text-white rounded-full flex items-center justify-center cursor-pointer z-50\"\n           onClick={handleChatClick}\n"
                },
                {
                    "date": 1728696871509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,18 +97,21 @@\n       console.error(\"Account is null\");\n       return;\n     }\n \n-    const payload = {\n+    const payload: {\n+      function: `${typeof ADDRESS}::recicly::get_chat`,\n+      functionArguments: [string, string],\n+    } = {\n       function: `${ADDRESS}::recicly::get_chat`,\n       functionArguments: [account.address, recyclingId], // Cambia el argumento según sea necesario\n     };\n     \n     try {\n       const result = await aptos.view({ payload });\n       // Procesar el resultado, por ejemplo, actualiza el estado de los mensajes\n       console.log(result);\n-      const chatMessages = result.messages || []; // Asegúrate de que el resultado tenga la estructura correcta\n+      const chatMessages = result.map((msg: any) => ({ text: msg.value.text, isUser: msg.value.isUser })) || []; // Asegúrate de que el resultado tenga la estructura correcta\n       setMessages(chatMessages.map((msg: any) => ({ text: msg.text, isUser: msg.isUser }))); // Actualiza el estado de mensajes\n     } catch (error) {\n       console.error(\"Error al obtener el chat:\", error);\n     }\n"
                },
                {
                    "date": 1728698059572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,13 @@\n     }\n   };\n \n   const handleSendMessage = async () => {\n+    \n+        if (!account) {\n+          setError(\"Debe conectarse a una wallet antes de enviar mensajes.\");\n+          return;\n+        }\n     if (!topic) {\n       setError(\"El campo 'Tema' no puede estar vacío.\");\n       return;\n     }\n@@ -68,8 +73,10 @@\n       handleSaveChat(); // Guardar en localStorage\n \n       // Guardar el mensaje en el contrato inteligente\n       const response = await signAndSubmitTransaction({\n+        \n+        \n         sender: account?.address,\n         data: {\n           function: `${ADDRESS}::recicly::set_chat`,\n           typeArguments: [],\n"
                },
                {
                    "date": 1728698065936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n     }\n   };\n \n   const handleSendMessage = async () => {\n-    \n         if (!account) {\n           setError(\"Debe conectarse a una wallet antes de enviar mensajes.\");\n           return;\n         }\n"
                },
                {
                    "date": 1728698569361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,12 +53,8 @@\n     }\n   };\n \n   const handleSendMessage = async () => {\n-        if (!account) {\n-          setError(\"Debe conectarse a una wallet antes de enviar mensajes.\");\n-          return;\n-        }\n     if (!topic) {\n       setError(\"El campo 'Tema' no puede estar vacío.\");\n       return;\n     }\n@@ -73,9 +69,8 @@\n \n       // Guardar el mensaje en el contrato inteligente\n       const response = await signAndSubmitTransaction({\n         \n-        \n         sender: account?.address,\n         data: {\n           function: `${ADDRESS}::recicly::set_chat`,\n           typeArguments: [],\n"
                },
                {
                    "date": 1728698581263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,8 @@\n       handleSaveChat(); // Guardar en localStorage\n \n       // Guardar el mensaje en el contrato inteligente\n       const response = await signAndSubmitTransaction({\n-        \n         sender: account?.address,\n         data: {\n           function: `${ADDRESS}::recicly::set_chat`,\n           typeArguments: [],\n@@ -110,9 +109,9 @@\n     try {\n       const result = await aptos.view({ payload });\n       // Procesar el resultado, por ejemplo, actualiza el estado de los mensajes\n       console.log(result);\n-      const chatMessages = result.map((msg: any) => ({ text: msg.value.text, isUser: msg.value.isUser })) || []; // Asegúrate de que el resultado tenga la estructura correcta\n+      const chatMessages = result.messages || []; // Asegúrate de que el resultado tenga la estructura correcta\n       setMessages(chatMessages.map((msg: any) => ({ text: msg.text, isUser: msg.isUser }))); // Actualiza el estado de mensajes\n     } catch (error) {\n       console.error(\"Error al obtener el chat:\", error);\n     }\n"
                },
                {
                    "date": 1728698626026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     try {\n       const result = await aptos.view({ payload });\n       // Procesar el resultado, por ejemplo, actualiza el estado de los mensajes\n       console.log(result);\n-      const chatMessages = result.messages || []; // Asegúrate de que el resultado tenga la estructura correcta\n+      const chatMessages = result.map((msg: any) => ({ text: msg.value.text, isUser: msg.value.isUser })) || []; // Asegúrate de que el resultado tenga la estructura correcta\n       setMessages(chatMessages.map((msg: any) => ({ text: msg.text, isUser: msg.isUser }))); // Actualiza el estado de mensajes\n     } catch (error) {\n       console.error(\"Error al obtener el chat:\", error);\n     }\n"
                },
                {
                    "date": 1728698695353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,12 +107,9 @@\n     };\n     \n     try {\n       const result = await aptos.view({ payload });\n-      // Procesar el resultado, por ejemplo, actualiza el estado de los mensajes\n-      console.log(result);\n-      const chatMessages = result.map((msg: any) => ({ text: msg.value.text, isUser: msg.value.isUser })) || []; // Asegúrate de que el resultado tenga la estructura correcta\n-      setMessages(chatMessages.map((msg: any) => ({ text: msg.text, isUser: msg.isUser }))); // Actualiza el estado de mensajes\n+        console.log(\"Chat obtenido:\", result);\n     } catch (error) {\n       console.error(\"Error al obtener el chat:\", error);\n     }\n   };\n"
                },
                {
                    "date": 1728699175270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,55 +66,25 @@\n       setMessage(\"\"); // Limpiar el campo de mensaje después de enviar\n       setError(null); // Limpiar el error\n       handleSaveChat(); // Guardar en localStorage\n \n-      // Guardar el mensaje en el contrato inteligente\n-      const response = await signAndSubmitTransaction({\n-        sender: account?.address,\n-        data: {\n-          function: `${ADDRESS}::recicly::set_chat`,\n-          typeArguments: [],\n-          functionArguments: [topic, message], // Envía el tema y el mensaje al contrato\n-        },\n-      });\n-\n-      // Esperar a que la transacción se complete\n-      try {\n-        await aptos.waitForTransaction({ transactionHash: response.hash });\n-      } catch (error) {\n-        console.error(\"Error al esperar la transacción:\", error);\n-      }\n-    } else {\n-      setError(\"El mensaje no puede estar vacío.\");\n-    }\n-  };\n-\n   const handleChatClick = () => {\n     setIsMinimized(false);\n   };\n \n-  const getChat = async () => {\n-    if (!account) {\n+  const getChat = async () =>{\n+    if (account) {\n+      const payload = {\n+          function: `${ADDRESS}::recicly::get_chat` as `${string}::${string}::${string}`,\n+          functionArguments: [`${account.address}`, 4]\n+      }\n+      let result = await aptos.view({payload});\n+      console.log(result);\n+    } else {\n       console.error(\"Account is null\");\n-      return;\n     }\n+}\n \n-    const payload: {\n-      function: `${typeof ADDRESS}::recicly::get_chat`,\n-      functionArguments: [string, string],\n-    } = {\n-      function: `${ADDRESS}::recicly::get_chat`,\n-      functionArguments: [account.address, recyclingId], // Cambia el argumento según sea necesario\n-    };\n-    \n-    try {\n-      const result = await aptos.view({ payload });\n-        console.log(\"Chat obtenido:\", result);\n-    } catch (error) {\n-      console.error(\"Error al obtener el chat:\", error);\n-    }\n-  };\n-\n   return (\n     <>\n       <div\n         className={`fixed bottom-0 right-0 mb-4 mr-4 w-80 bg-white rounded-lg shadow-lg border border-gray-300 transition-transform duration-300 ${\n"
                },
                {
                    "date": 1728699244004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,6 +148,7 @@\n       )}\n     </>\n   );\n };\n+  };\n \n export default ChatComponent;\n"
                },
                {
                    "date": 1728699332168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,11 @@\n       const updatedMessages = [...messages, newMessage];\n       setMessages(updatedMessages);\n       setMessage(\"\"); // Limpiar el campo de mensaje después de enviar\n       setError(null); // Limpiar el error\n-      handleSaveChat(); // Guardar en localStorage\n+          handleSaveChat(); // Guardar en localStorage\n+        }\n+      };\n \n   const handleChatClick = () => {\n     setIsMinimized(false);\n   };\n@@ -148,7 +150,7 @@\n       )}\n     </>\n   );\n };\n-  };\n \n+\n export default ChatComponent;\n"
                }
            ],
            "date": 1728682522730,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\n\nconst ChatPopup: React.FC = () => {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [newMessage, setNewMessage] = useState<string>(\"\");\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() !== \"\") {\n      setMessages([...messages, newMessage]);\n      setNewMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-5 right-5 w-80 bg-white shadow-lg rounded-lg overflow-hidden z-50\">\n      <div className=\"bg-blue-500 text-white p-3 text-center\">\n        <h3>Chat</h3>\n      </div>\n      <div className=\"p-4 h-64 overflow-y-auto\">\n        {messages.map((message, index) => (\n          <p key={index} className=\"bg-gray-100 p-2 my-2 rounded-md\">{message}</p>\n        ))}\n      </div>\n      <div className=\"p-2 border-t\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Escribe un mensaje...\"\n          className=\"w-full p-2 border rounded-md\"\n        />\n        <button\n          onClick={handleSendMessage}\n          className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-md\"\n        >\n          Enviar\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPopup;\n"
        }
    ]
}